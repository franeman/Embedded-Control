                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lab1_1_3_Eric_Segerstrom
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _sensor3
                                     12 	.globl _main
                                     13 	.globl _putchar
                                     14 	.globl _printf
                                     15 	.globl _getchar_nw
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _PB1
                                     20 	.globl _PB0
                                     21 	.globl _SS
                                     22 	.globl _BUZZ
                                     23 	.globl _BILED1
                                     24 	.globl _BILED0
                                     25 	.globl _LED0
                                     26 	.globl _SPIF
                                     27 	.globl _WCOL
                                     28 	.globl _MODF
                                     29 	.globl _RXOVRN
                                     30 	.globl _TXBSY
                                     31 	.globl _SLVSEL
                                     32 	.globl _MSTEN
                                     33 	.globl _SPIEN
                                     34 	.globl _AD0EN
                                     35 	.globl _ADCEN
                                     36 	.globl _AD0TM
                                     37 	.globl _ADCTM
                                     38 	.globl _AD0INT
                                     39 	.globl _ADCINT
                                     40 	.globl _AD0BUSY
                                     41 	.globl _ADBUSY
                                     42 	.globl _AD0CM1
                                     43 	.globl _ADSTM1
                                     44 	.globl _AD0CM0
                                     45 	.globl _ADSTM0
                                     46 	.globl _AD0WINT
                                     47 	.globl _ADWINT
                                     48 	.globl _AD0LJST
                                     49 	.globl _ADLJST
                                     50 	.globl _CF
                                     51 	.globl _CR
                                     52 	.globl _CCF4
                                     53 	.globl _CCF3
                                     54 	.globl _CCF2
                                     55 	.globl _CCF1
                                     56 	.globl _CCF0
                                     57 	.globl _CY
                                     58 	.globl _AC
                                     59 	.globl _F0
                                     60 	.globl _RS1
                                     61 	.globl _RS0
                                     62 	.globl _OV
                                     63 	.globl _F1
                                     64 	.globl _P
                                     65 	.globl _TF2
                                     66 	.globl _EXF2
                                     67 	.globl _RCLK
                                     68 	.globl _TCLK
                                     69 	.globl _EXEN2
                                     70 	.globl _TR2
                                     71 	.globl _CT2
                                     72 	.globl _CPRL2
                                     73 	.globl _BUSY
                                     74 	.globl _ENSMB
                                     75 	.globl _STA
                                     76 	.globl _STO
                                     77 	.globl _SI
                                     78 	.globl _AA
                                     79 	.globl _SMBFTE
                                     80 	.globl _SMBTOE
                                     81 	.globl _PT2
                                     82 	.globl _PS
                                     83 	.globl _PS0
                                     84 	.globl _PT1
                                     85 	.globl _PX1
                                     86 	.globl _PT0
                                     87 	.globl _PX0
                                     88 	.globl _P3_7
                                     89 	.globl _P3_6
                                     90 	.globl _P3_5
                                     91 	.globl _P3_4
                                     92 	.globl _P3_3
                                     93 	.globl _P3_2
                                     94 	.globl _P3_1
                                     95 	.globl _P3_0
                                     96 	.globl _EA
                                     97 	.globl _ET2
                                     98 	.globl _ES
                                     99 	.globl _ES0
                                    100 	.globl _ET1
                                    101 	.globl _EX1
                                    102 	.globl _ET0
                                    103 	.globl _EX0
                                    104 	.globl _P2_7
                                    105 	.globl _P2_6
                                    106 	.globl _P2_5
                                    107 	.globl _P2_4
                                    108 	.globl _P2_3
                                    109 	.globl _P2_2
                                    110 	.globl _P2_1
                                    111 	.globl _P2_0
                                    112 	.globl _S0MODE
                                    113 	.globl _SM00
                                    114 	.globl _SM0
                                    115 	.globl _SM10
                                    116 	.globl _SM1
                                    117 	.globl _MCE0
                                    118 	.globl _SM20
                                    119 	.globl _SM2
                                    120 	.globl _REN0
                                    121 	.globl _REN
                                    122 	.globl _TB80
                                    123 	.globl _TB8
                                    124 	.globl _RB80
                                    125 	.globl _RB8
                                    126 	.globl _TI0
                                    127 	.globl _TI
                                    128 	.globl _RI0
                                    129 	.globl _RI
                                    130 	.globl _P1_7
                                    131 	.globl _P1_6
                                    132 	.globl _P1_5
                                    133 	.globl _P1_4
                                    134 	.globl _P1_3
                                    135 	.globl _P1_2
                                    136 	.globl _P1_1
                                    137 	.globl _P1_0
                                    138 	.globl _TF1
                                    139 	.globl _TR1
                                    140 	.globl _TF0
                                    141 	.globl _TR0
                                    142 	.globl _IE1
                                    143 	.globl _IT1
                                    144 	.globl _IE0
                                    145 	.globl _IT0
                                    146 	.globl _P0_7
                                    147 	.globl _P0_6
                                    148 	.globl _P0_5
                                    149 	.globl _P0_4
                                    150 	.globl _P0_3
                                    151 	.globl _P0_2
                                    152 	.globl _P0_1
                                    153 	.globl _P0_0
                                    154 	.globl _PCA0CP4
                                    155 	.globl _PCA0CP3
                                    156 	.globl _PCA0CP2
                                    157 	.globl _PCA0CP1
                                    158 	.globl _PCA0CP0
                                    159 	.globl _PCA0
                                    160 	.globl _DAC1
                                    161 	.globl _DAC0
                                    162 	.globl _ADC0LT
                                    163 	.globl _ADC0GT
                                    164 	.globl _ADC0
                                    165 	.globl _RCAP4
                                    166 	.globl _TMR4
                                    167 	.globl _TMR3RL
                                    168 	.globl _TMR3
                                    169 	.globl _RCAP2
                                    170 	.globl _TMR2
                                    171 	.globl _TMR1
                                    172 	.globl _TMR0
                                    173 	.globl _WDTCN
                                    174 	.globl _PCA0CPH4
                                    175 	.globl _PCA0CPH3
                                    176 	.globl _PCA0CPH2
                                    177 	.globl _PCA0CPH1
                                    178 	.globl _PCA0CPH0
                                    179 	.globl _PCA0H
                                    180 	.globl _SPI0CN
                                    181 	.globl _EIP2
                                    182 	.globl _EIP1
                                    183 	.globl _TH4
                                    184 	.globl _TL4
                                    185 	.globl _SADDR1
                                    186 	.globl _SBUF1
                                    187 	.globl _SCON1
                                    188 	.globl _B
                                    189 	.globl _RSTSRC
                                    190 	.globl _PCA0CPL4
                                    191 	.globl _PCA0CPL3
                                    192 	.globl _PCA0CPL2
                                    193 	.globl _PCA0CPL1
                                    194 	.globl _PCA0CPL0
                                    195 	.globl _PCA0L
                                    196 	.globl _ADC0CN
                                    197 	.globl _EIE2
                                    198 	.globl _EIE1
                                    199 	.globl _RCAP4H
                                    200 	.globl _RCAP4L
                                    201 	.globl _XBR2
                                    202 	.globl _XBR1
                                    203 	.globl _XBR0
                                    204 	.globl _ACC
                                    205 	.globl _PCA0CPM4
                                    206 	.globl _PCA0CPM3
                                    207 	.globl _PCA0CPM2
                                    208 	.globl _PCA0CPM1
                                    209 	.globl _PCA0CPM0
                                    210 	.globl _PCA0MD
                                    211 	.globl _PCA0CN
                                    212 	.globl _DAC1CN
                                    213 	.globl _DAC1H
                                    214 	.globl _DAC1L
                                    215 	.globl _DAC0CN
                                    216 	.globl _DAC0H
                                    217 	.globl _DAC0L
                                    218 	.globl _REF0CN
                                    219 	.globl _PSW
                                    220 	.globl _SMB0CR
                                    221 	.globl _TH2
                                    222 	.globl _TL2
                                    223 	.globl _RCAP2H
                                    224 	.globl _RCAP2L
                                    225 	.globl _T4CON
                                    226 	.globl _T2CON
                                    227 	.globl _ADC0LTH
                                    228 	.globl _ADC0LTL
                                    229 	.globl _ADC0GTH
                                    230 	.globl _ADC0GTL
                                    231 	.globl _SMB0ADR
                                    232 	.globl _SMB0DAT
                                    233 	.globl _SMB0STA
                                    234 	.globl _SMB0CN
                                    235 	.globl _ADC0H
                                    236 	.globl _ADC0L
                                    237 	.globl _P1MDIN
                                    238 	.globl _ADC0CF
                                    239 	.globl _AMX0SL
                                    240 	.globl _AMX0CF
                                    241 	.globl _SADEN0
                                    242 	.globl _IP
                                    243 	.globl _FLACL
                                    244 	.globl _FLSCL
                                    245 	.globl _P74OUT
                                    246 	.globl _OSCICN
                                    247 	.globl _OSCXCN
                                    248 	.globl _P3
                                    249 	.globl __XPAGE
                                    250 	.globl _EMI0CN
                                    251 	.globl _SADEN1
                                    252 	.globl _P3IF
                                    253 	.globl _AMX1SL
                                    254 	.globl _ADC1CF
                                    255 	.globl _ADC1CN
                                    256 	.globl _SADDR0
                                    257 	.globl _IE
                                    258 	.globl _P3MDOUT
                                    259 	.globl _PRT3CF
                                    260 	.globl _P2MDOUT
                                    261 	.globl _PRT2CF
                                    262 	.globl _P1MDOUT
                                    263 	.globl _PRT1CF
                                    264 	.globl _P0MDOUT
                                    265 	.globl _PRT0CF
                                    266 	.globl _EMI0CF
                                    267 	.globl _EMI0TC
                                    268 	.globl _P2
                                    269 	.globl _CPT1CN
                                    270 	.globl _CPT0CN
                                    271 	.globl _SPI0CKR
                                    272 	.globl _ADC1
                                    273 	.globl _SPI0DAT
                                    274 	.globl _SPI0CFG
                                    275 	.globl _SBUF0
                                    276 	.globl _SBUF
                                    277 	.globl _SCON0
                                    278 	.globl _SCON
                                    279 	.globl _P7
                                    280 	.globl _TMR3H
                                    281 	.globl _TMR3L
                                    282 	.globl _TMR3RLH
                                    283 	.globl _TMR3RLL
                                    284 	.globl _TMR3CN
                                    285 	.globl _P1
                                    286 	.globl _PSCTL
                                    287 	.globl _CKCON
                                    288 	.globl _TH1
                                    289 	.globl _TH0
                                    290 	.globl _TL1
                                    291 	.globl _TL0
                                    292 	.globl _TMOD
                                    293 	.globl _TCON
                                    294 	.globl _PCON
                                    295 	.globl _P6
                                    296 	.globl _P5
                                    297 	.globl _P4
                                    298 	.globl _DPH
                                    299 	.globl _DPL
                                    300 	.globl _SP
                                    301 	.globl _P0
                                    302 	.globl _Port_Init
                                    303 	.globl _Set_outputs
                                    304 	.globl _sensor1
                                    305 	.globl _sensor2
                                    306 ;--------------------------------------------------------
                                    307 ; special function registers
                                    308 ;--------------------------------------------------------
                                    309 	.area RSEG    (ABS,DATA)
      000000                        310 	.org 0x0000
                           000080   311 G$P0$0$0 == 0x0080
                           000080   312 _P0	=	0x0080
                           000081   313 G$SP$0$0 == 0x0081
                           000081   314 _SP	=	0x0081
                           000082   315 G$DPL$0$0 == 0x0082
                           000082   316 _DPL	=	0x0082
                           000083   317 G$DPH$0$0 == 0x0083
                           000083   318 _DPH	=	0x0083
                           000084   319 G$P4$0$0 == 0x0084
                           000084   320 _P4	=	0x0084
                           000085   321 G$P5$0$0 == 0x0085
                           000085   322 _P5	=	0x0085
                           000086   323 G$P6$0$0 == 0x0086
                           000086   324 _P6	=	0x0086
                           000087   325 G$PCON$0$0 == 0x0087
                           000087   326 _PCON	=	0x0087
                           000088   327 G$TCON$0$0 == 0x0088
                           000088   328 _TCON	=	0x0088
                           000089   329 G$TMOD$0$0 == 0x0089
                           000089   330 _TMOD	=	0x0089
                           00008A   331 G$TL0$0$0 == 0x008a
                           00008A   332 _TL0	=	0x008a
                           00008B   333 G$TL1$0$0 == 0x008b
                           00008B   334 _TL1	=	0x008b
                           00008C   335 G$TH0$0$0 == 0x008c
                           00008C   336 _TH0	=	0x008c
                           00008D   337 G$TH1$0$0 == 0x008d
                           00008D   338 _TH1	=	0x008d
                           00008E   339 G$CKCON$0$0 == 0x008e
                           00008E   340 _CKCON	=	0x008e
                           00008F   341 G$PSCTL$0$0 == 0x008f
                           00008F   342 _PSCTL	=	0x008f
                           000090   343 G$P1$0$0 == 0x0090
                           000090   344 _P1	=	0x0090
                           000091   345 G$TMR3CN$0$0 == 0x0091
                           000091   346 _TMR3CN	=	0x0091
                           000092   347 G$TMR3RLL$0$0 == 0x0092
                           000092   348 _TMR3RLL	=	0x0092
                           000093   349 G$TMR3RLH$0$0 == 0x0093
                           000093   350 _TMR3RLH	=	0x0093
                           000094   351 G$TMR3L$0$0 == 0x0094
                           000094   352 _TMR3L	=	0x0094
                           000095   353 G$TMR3H$0$0 == 0x0095
                           000095   354 _TMR3H	=	0x0095
                           000096   355 G$P7$0$0 == 0x0096
                           000096   356 _P7	=	0x0096
                           000098   357 G$SCON$0$0 == 0x0098
                           000098   358 _SCON	=	0x0098
                           000098   359 G$SCON0$0$0 == 0x0098
                           000098   360 _SCON0	=	0x0098
                           000099   361 G$SBUF$0$0 == 0x0099
                           000099   362 _SBUF	=	0x0099
                           000099   363 G$SBUF0$0$0 == 0x0099
                           000099   364 _SBUF0	=	0x0099
                           00009A   365 G$SPI0CFG$0$0 == 0x009a
                           00009A   366 _SPI0CFG	=	0x009a
                           00009B   367 G$SPI0DAT$0$0 == 0x009b
                           00009B   368 _SPI0DAT	=	0x009b
                           00009C   369 G$ADC1$0$0 == 0x009c
                           00009C   370 _ADC1	=	0x009c
                           00009D   371 G$SPI0CKR$0$0 == 0x009d
                           00009D   372 _SPI0CKR	=	0x009d
                           00009E   373 G$CPT0CN$0$0 == 0x009e
                           00009E   374 _CPT0CN	=	0x009e
                           00009F   375 G$CPT1CN$0$0 == 0x009f
                           00009F   376 _CPT1CN	=	0x009f
                           0000A0   377 G$P2$0$0 == 0x00a0
                           0000A0   378 _P2	=	0x00a0
                           0000A1   379 G$EMI0TC$0$0 == 0x00a1
                           0000A1   380 _EMI0TC	=	0x00a1
                           0000A3   381 G$EMI0CF$0$0 == 0x00a3
                           0000A3   382 _EMI0CF	=	0x00a3
                           0000A4   383 G$PRT0CF$0$0 == 0x00a4
                           0000A4   384 _PRT0CF	=	0x00a4
                           0000A4   385 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   386 _P0MDOUT	=	0x00a4
                           0000A5   387 G$PRT1CF$0$0 == 0x00a5
                           0000A5   388 _PRT1CF	=	0x00a5
                           0000A5   389 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   390 _P1MDOUT	=	0x00a5
                           0000A6   391 G$PRT2CF$0$0 == 0x00a6
                           0000A6   392 _PRT2CF	=	0x00a6
                           0000A6   393 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   394 _P2MDOUT	=	0x00a6
                           0000A7   395 G$PRT3CF$0$0 == 0x00a7
                           0000A7   396 _PRT3CF	=	0x00a7
                           0000A7   397 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   398 _P3MDOUT	=	0x00a7
                           0000A8   399 G$IE$0$0 == 0x00a8
                           0000A8   400 _IE	=	0x00a8
                           0000A9   401 G$SADDR0$0$0 == 0x00a9
                           0000A9   402 _SADDR0	=	0x00a9
                           0000AA   403 G$ADC1CN$0$0 == 0x00aa
                           0000AA   404 _ADC1CN	=	0x00aa
                           0000AB   405 G$ADC1CF$0$0 == 0x00ab
                           0000AB   406 _ADC1CF	=	0x00ab
                           0000AC   407 G$AMX1SL$0$0 == 0x00ac
                           0000AC   408 _AMX1SL	=	0x00ac
                           0000AD   409 G$P3IF$0$0 == 0x00ad
                           0000AD   410 _P3IF	=	0x00ad
                           0000AE   411 G$SADEN1$0$0 == 0x00ae
                           0000AE   412 _SADEN1	=	0x00ae
                           0000AF   413 G$EMI0CN$0$0 == 0x00af
                           0000AF   414 _EMI0CN	=	0x00af
                           0000AF   415 G$_XPAGE$0$0 == 0x00af
                           0000AF   416 __XPAGE	=	0x00af
                           0000B0   417 G$P3$0$0 == 0x00b0
                           0000B0   418 _P3	=	0x00b0
                           0000B1   419 G$OSCXCN$0$0 == 0x00b1
                           0000B1   420 _OSCXCN	=	0x00b1
                           0000B2   421 G$OSCICN$0$0 == 0x00b2
                           0000B2   422 _OSCICN	=	0x00b2
                           0000B5   423 G$P74OUT$0$0 == 0x00b5
                           0000B5   424 _P74OUT	=	0x00b5
                           0000B6   425 G$FLSCL$0$0 == 0x00b6
                           0000B6   426 _FLSCL	=	0x00b6
                           0000B7   427 G$FLACL$0$0 == 0x00b7
                           0000B7   428 _FLACL	=	0x00b7
                           0000B8   429 G$IP$0$0 == 0x00b8
                           0000B8   430 _IP	=	0x00b8
                           0000B9   431 G$SADEN0$0$0 == 0x00b9
                           0000B9   432 _SADEN0	=	0x00b9
                           0000BA   433 G$AMX0CF$0$0 == 0x00ba
                           0000BA   434 _AMX0CF	=	0x00ba
                           0000BB   435 G$AMX0SL$0$0 == 0x00bb
                           0000BB   436 _AMX0SL	=	0x00bb
                           0000BC   437 G$ADC0CF$0$0 == 0x00bc
                           0000BC   438 _ADC0CF	=	0x00bc
                           0000BD   439 G$P1MDIN$0$0 == 0x00bd
                           0000BD   440 _P1MDIN	=	0x00bd
                           0000BE   441 G$ADC0L$0$0 == 0x00be
                           0000BE   442 _ADC0L	=	0x00be
                           0000BF   443 G$ADC0H$0$0 == 0x00bf
                           0000BF   444 _ADC0H	=	0x00bf
                           0000C0   445 G$SMB0CN$0$0 == 0x00c0
                           0000C0   446 _SMB0CN	=	0x00c0
                           0000C1   447 G$SMB0STA$0$0 == 0x00c1
                           0000C1   448 _SMB0STA	=	0x00c1
                           0000C2   449 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   450 _SMB0DAT	=	0x00c2
                           0000C3   451 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   452 _SMB0ADR	=	0x00c3
                           0000C4   453 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   454 _ADC0GTL	=	0x00c4
                           0000C5   455 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   456 _ADC0GTH	=	0x00c5
                           0000C6   457 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   458 _ADC0LTL	=	0x00c6
                           0000C7   459 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   460 _ADC0LTH	=	0x00c7
                           0000C8   461 G$T2CON$0$0 == 0x00c8
                           0000C8   462 _T2CON	=	0x00c8
                           0000C9   463 G$T4CON$0$0 == 0x00c9
                           0000C9   464 _T4CON	=	0x00c9
                           0000CA   465 G$RCAP2L$0$0 == 0x00ca
                           0000CA   466 _RCAP2L	=	0x00ca
                           0000CB   467 G$RCAP2H$0$0 == 0x00cb
                           0000CB   468 _RCAP2H	=	0x00cb
                           0000CC   469 G$TL2$0$0 == 0x00cc
                           0000CC   470 _TL2	=	0x00cc
                           0000CD   471 G$TH2$0$0 == 0x00cd
                           0000CD   472 _TH2	=	0x00cd
                           0000CF   473 G$SMB0CR$0$0 == 0x00cf
                           0000CF   474 _SMB0CR	=	0x00cf
                           0000D0   475 G$PSW$0$0 == 0x00d0
                           0000D0   476 _PSW	=	0x00d0
                           0000D1   477 G$REF0CN$0$0 == 0x00d1
                           0000D1   478 _REF0CN	=	0x00d1
                           0000D2   479 G$DAC0L$0$0 == 0x00d2
                           0000D2   480 _DAC0L	=	0x00d2
                           0000D3   481 G$DAC0H$0$0 == 0x00d3
                           0000D3   482 _DAC0H	=	0x00d3
                           0000D4   483 G$DAC0CN$0$0 == 0x00d4
                           0000D4   484 _DAC0CN	=	0x00d4
                           0000D5   485 G$DAC1L$0$0 == 0x00d5
                           0000D5   486 _DAC1L	=	0x00d5
                           0000D6   487 G$DAC1H$0$0 == 0x00d6
                           0000D6   488 _DAC1H	=	0x00d6
                           0000D7   489 G$DAC1CN$0$0 == 0x00d7
                           0000D7   490 _DAC1CN	=	0x00d7
                           0000D8   491 G$PCA0CN$0$0 == 0x00d8
                           0000D8   492 _PCA0CN	=	0x00d8
                           0000D9   493 G$PCA0MD$0$0 == 0x00d9
                           0000D9   494 _PCA0MD	=	0x00d9
                           0000DA   495 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   496 _PCA0CPM0	=	0x00da
                           0000DB   497 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   498 _PCA0CPM1	=	0x00db
                           0000DC   499 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   500 _PCA0CPM2	=	0x00dc
                           0000DD   501 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   502 _PCA0CPM3	=	0x00dd
                           0000DE   503 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   504 _PCA0CPM4	=	0x00de
                           0000E0   505 G$ACC$0$0 == 0x00e0
                           0000E0   506 _ACC	=	0x00e0
                           0000E1   507 G$XBR0$0$0 == 0x00e1
                           0000E1   508 _XBR0	=	0x00e1
                           0000E2   509 G$XBR1$0$0 == 0x00e2
                           0000E2   510 _XBR1	=	0x00e2
                           0000E3   511 G$XBR2$0$0 == 0x00e3
                           0000E3   512 _XBR2	=	0x00e3
                           0000E4   513 G$RCAP4L$0$0 == 0x00e4
                           0000E4   514 _RCAP4L	=	0x00e4
                           0000E5   515 G$RCAP4H$0$0 == 0x00e5
                           0000E5   516 _RCAP4H	=	0x00e5
                           0000E6   517 G$EIE1$0$0 == 0x00e6
                           0000E6   518 _EIE1	=	0x00e6
                           0000E7   519 G$EIE2$0$0 == 0x00e7
                           0000E7   520 _EIE2	=	0x00e7
                           0000E8   521 G$ADC0CN$0$0 == 0x00e8
                           0000E8   522 _ADC0CN	=	0x00e8
                           0000E9   523 G$PCA0L$0$0 == 0x00e9
                           0000E9   524 _PCA0L	=	0x00e9
                           0000EA   525 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   526 _PCA0CPL0	=	0x00ea
                           0000EB   527 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   528 _PCA0CPL1	=	0x00eb
                           0000EC   529 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   530 _PCA0CPL2	=	0x00ec
                           0000ED   531 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   532 _PCA0CPL3	=	0x00ed
                           0000EE   533 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   534 _PCA0CPL4	=	0x00ee
                           0000EF   535 G$RSTSRC$0$0 == 0x00ef
                           0000EF   536 _RSTSRC	=	0x00ef
                           0000F0   537 G$B$0$0 == 0x00f0
                           0000F0   538 _B	=	0x00f0
                           0000F1   539 G$SCON1$0$0 == 0x00f1
                           0000F1   540 _SCON1	=	0x00f1
                           0000F2   541 G$SBUF1$0$0 == 0x00f2
                           0000F2   542 _SBUF1	=	0x00f2
                           0000F3   543 G$SADDR1$0$0 == 0x00f3
                           0000F3   544 _SADDR1	=	0x00f3
                           0000F4   545 G$TL4$0$0 == 0x00f4
                           0000F4   546 _TL4	=	0x00f4
                           0000F5   547 G$TH4$0$0 == 0x00f5
                           0000F5   548 _TH4	=	0x00f5
                           0000F6   549 G$EIP1$0$0 == 0x00f6
                           0000F6   550 _EIP1	=	0x00f6
                           0000F7   551 G$EIP2$0$0 == 0x00f7
                           0000F7   552 _EIP2	=	0x00f7
                           0000F8   553 G$SPI0CN$0$0 == 0x00f8
                           0000F8   554 _SPI0CN	=	0x00f8
                           0000F9   555 G$PCA0H$0$0 == 0x00f9
                           0000F9   556 _PCA0H	=	0x00f9
                           0000FA   557 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   558 _PCA0CPH0	=	0x00fa
                           0000FB   559 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   560 _PCA0CPH1	=	0x00fb
                           0000FC   561 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   562 _PCA0CPH2	=	0x00fc
                           0000FD   563 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   564 _PCA0CPH3	=	0x00fd
                           0000FE   565 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   566 _PCA0CPH4	=	0x00fe
                           0000FF   567 G$WDTCN$0$0 == 0x00ff
                           0000FF   568 _WDTCN	=	0x00ff
                           008C8A   569 G$TMR0$0$0 == 0x8c8a
                           008C8A   570 _TMR0	=	0x8c8a
                           008D8B   571 G$TMR1$0$0 == 0x8d8b
                           008D8B   572 _TMR1	=	0x8d8b
                           00CDCC   573 G$TMR2$0$0 == 0xcdcc
                           00CDCC   574 _TMR2	=	0xcdcc
                           00CBCA   575 G$RCAP2$0$0 == 0xcbca
                           00CBCA   576 _RCAP2	=	0xcbca
                           009594   577 G$TMR3$0$0 == 0x9594
                           009594   578 _TMR3	=	0x9594
                           009392   579 G$TMR3RL$0$0 == 0x9392
                           009392   580 _TMR3RL	=	0x9392
                           00F5F4   581 G$TMR4$0$0 == 0xf5f4
                           00F5F4   582 _TMR4	=	0xf5f4
                           00E5E4   583 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   584 _RCAP4	=	0xe5e4
                           00BFBE   585 G$ADC0$0$0 == 0xbfbe
                           00BFBE   586 _ADC0	=	0xbfbe
                           00C5C4   587 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   588 _ADC0GT	=	0xc5c4
                           00C7C6   589 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   590 _ADC0LT	=	0xc7c6
                           00D3D2   591 G$DAC0$0$0 == 0xd3d2
                           00D3D2   592 _DAC0	=	0xd3d2
                           00D6D5   593 G$DAC1$0$0 == 0xd6d5
                           00D6D5   594 _DAC1	=	0xd6d5
                           00F9E9   595 G$PCA0$0$0 == 0xf9e9
                           00F9E9   596 _PCA0	=	0xf9e9
                           00FAEA   597 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   598 _PCA0CP0	=	0xfaea
                           00FBEB   599 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   600 _PCA0CP1	=	0xfbeb
                           00FCEC   601 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   602 _PCA0CP2	=	0xfcec
                           00FDED   603 G$PCA0CP3$0$0 == 0xfded
                           00FDED   604 _PCA0CP3	=	0xfded
                           00FEEE   605 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   606 _PCA0CP4	=	0xfeee
                                    607 ;--------------------------------------------------------
                                    608 ; special function bits
                                    609 ;--------------------------------------------------------
                                    610 	.area RSEG    (ABS,DATA)
      000000                        611 	.org 0x0000
                           000080   612 G$P0_0$0$0 == 0x0080
                           000080   613 _P0_0	=	0x0080
                           000081   614 G$P0_1$0$0 == 0x0081
                           000081   615 _P0_1	=	0x0081
                           000082   616 G$P0_2$0$0 == 0x0082
                           000082   617 _P0_2	=	0x0082
                           000083   618 G$P0_3$0$0 == 0x0083
                           000083   619 _P0_3	=	0x0083
                           000084   620 G$P0_4$0$0 == 0x0084
                           000084   621 _P0_4	=	0x0084
                           000085   622 G$P0_5$0$0 == 0x0085
                           000085   623 _P0_5	=	0x0085
                           000086   624 G$P0_6$0$0 == 0x0086
                           000086   625 _P0_6	=	0x0086
                           000087   626 G$P0_7$0$0 == 0x0087
                           000087   627 _P0_7	=	0x0087
                           000088   628 G$IT0$0$0 == 0x0088
                           000088   629 _IT0	=	0x0088
                           000089   630 G$IE0$0$0 == 0x0089
                           000089   631 _IE0	=	0x0089
                           00008A   632 G$IT1$0$0 == 0x008a
                           00008A   633 _IT1	=	0x008a
                           00008B   634 G$IE1$0$0 == 0x008b
                           00008B   635 _IE1	=	0x008b
                           00008C   636 G$TR0$0$0 == 0x008c
                           00008C   637 _TR0	=	0x008c
                           00008D   638 G$TF0$0$0 == 0x008d
                           00008D   639 _TF0	=	0x008d
                           00008E   640 G$TR1$0$0 == 0x008e
                           00008E   641 _TR1	=	0x008e
                           00008F   642 G$TF1$0$0 == 0x008f
                           00008F   643 _TF1	=	0x008f
                           000090   644 G$P1_0$0$0 == 0x0090
                           000090   645 _P1_0	=	0x0090
                           000091   646 G$P1_1$0$0 == 0x0091
                           000091   647 _P1_1	=	0x0091
                           000092   648 G$P1_2$0$0 == 0x0092
                           000092   649 _P1_2	=	0x0092
                           000093   650 G$P1_3$0$0 == 0x0093
                           000093   651 _P1_3	=	0x0093
                           000094   652 G$P1_4$0$0 == 0x0094
                           000094   653 _P1_4	=	0x0094
                           000095   654 G$P1_5$0$0 == 0x0095
                           000095   655 _P1_5	=	0x0095
                           000096   656 G$P1_6$0$0 == 0x0096
                           000096   657 _P1_6	=	0x0096
                           000097   658 G$P1_7$0$0 == 0x0097
                           000097   659 _P1_7	=	0x0097
                           000098   660 G$RI$0$0 == 0x0098
                           000098   661 _RI	=	0x0098
                           000098   662 G$RI0$0$0 == 0x0098
                           000098   663 _RI0	=	0x0098
                           000099   664 G$TI$0$0 == 0x0099
                           000099   665 _TI	=	0x0099
                           000099   666 G$TI0$0$0 == 0x0099
                           000099   667 _TI0	=	0x0099
                           00009A   668 G$RB8$0$0 == 0x009a
                           00009A   669 _RB8	=	0x009a
                           00009A   670 G$RB80$0$0 == 0x009a
                           00009A   671 _RB80	=	0x009a
                           00009B   672 G$TB8$0$0 == 0x009b
                           00009B   673 _TB8	=	0x009b
                           00009B   674 G$TB80$0$0 == 0x009b
                           00009B   675 _TB80	=	0x009b
                           00009C   676 G$REN$0$0 == 0x009c
                           00009C   677 _REN	=	0x009c
                           00009C   678 G$REN0$0$0 == 0x009c
                           00009C   679 _REN0	=	0x009c
                           00009D   680 G$SM2$0$0 == 0x009d
                           00009D   681 _SM2	=	0x009d
                           00009D   682 G$SM20$0$0 == 0x009d
                           00009D   683 _SM20	=	0x009d
                           00009D   684 G$MCE0$0$0 == 0x009d
                           00009D   685 _MCE0	=	0x009d
                           00009E   686 G$SM1$0$0 == 0x009e
                           00009E   687 _SM1	=	0x009e
                           00009E   688 G$SM10$0$0 == 0x009e
                           00009E   689 _SM10	=	0x009e
                           00009F   690 G$SM0$0$0 == 0x009f
                           00009F   691 _SM0	=	0x009f
                           00009F   692 G$SM00$0$0 == 0x009f
                           00009F   693 _SM00	=	0x009f
                           00009F   694 G$S0MODE$0$0 == 0x009f
                           00009F   695 _S0MODE	=	0x009f
                           0000A0   696 G$P2_0$0$0 == 0x00a0
                           0000A0   697 _P2_0	=	0x00a0
                           0000A1   698 G$P2_1$0$0 == 0x00a1
                           0000A1   699 _P2_1	=	0x00a1
                           0000A2   700 G$P2_2$0$0 == 0x00a2
                           0000A2   701 _P2_2	=	0x00a2
                           0000A3   702 G$P2_3$0$0 == 0x00a3
                           0000A3   703 _P2_3	=	0x00a3
                           0000A4   704 G$P2_4$0$0 == 0x00a4
                           0000A4   705 _P2_4	=	0x00a4
                           0000A5   706 G$P2_5$0$0 == 0x00a5
                           0000A5   707 _P2_5	=	0x00a5
                           0000A6   708 G$P2_6$0$0 == 0x00a6
                           0000A6   709 _P2_6	=	0x00a6
                           0000A7   710 G$P2_7$0$0 == 0x00a7
                           0000A7   711 _P2_7	=	0x00a7
                           0000A8   712 G$EX0$0$0 == 0x00a8
                           0000A8   713 _EX0	=	0x00a8
                           0000A9   714 G$ET0$0$0 == 0x00a9
                           0000A9   715 _ET0	=	0x00a9
                           0000AA   716 G$EX1$0$0 == 0x00aa
                           0000AA   717 _EX1	=	0x00aa
                           0000AB   718 G$ET1$0$0 == 0x00ab
                           0000AB   719 _ET1	=	0x00ab
                           0000AC   720 G$ES0$0$0 == 0x00ac
                           0000AC   721 _ES0	=	0x00ac
                           0000AC   722 G$ES$0$0 == 0x00ac
                           0000AC   723 _ES	=	0x00ac
                           0000AD   724 G$ET2$0$0 == 0x00ad
                           0000AD   725 _ET2	=	0x00ad
                           0000AF   726 G$EA$0$0 == 0x00af
                           0000AF   727 _EA	=	0x00af
                           0000B0   728 G$P3_0$0$0 == 0x00b0
                           0000B0   729 _P3_0	=	0x00b0
                           0000B1   730 G$P3_1$0$0 == 0x00b1
                           0000B1   731 _P3_1	=	0x00b1
                           0000B2   732 G$P3_2$0$0 == 0x00b2
                           0000B2   733 _P3_2	=	0x00b2
                           0000B3   734 G$P3_3$0$0 == 0x00b3
                           0000B3   735 _P3_3	=	0x00b3
                           0000B4   736 G$P3_4$0$0 == 0x00b4
                           0000B4   737 _P3_4	=	0x00b4
                           0000B5   738 G$P3_5$0$0 == 0x00b5
                           0000B5   739 _P3_5	=	0x00b5
                           0000B6   740 G$P3_6$0$0 == 0x00b6
                           0000B6   741 _P3_6	=	0x00b6
                           0000B7   742 G$P3_7$0$0 == 0x00b7
                           0000B7   743 _P3_7	=	0x00b7
                           0000B8   744 G$PX0$0$0 == 0x00b8
                           0000B8   745 _PX0	=	0x00b8
                           0000B9   746 G$PT0$0$0 == 0x00b9
                           0000B9   747 _PT0	=	0x00b9
                           0000BA   748 G$PX1$0$0 == 0x00ba
                           0000BA   749 _PX1	=	0x00ba
                           0000BB   750 G$PT1$0$0 == 0x00bb
                           0000BB   751 _PT1	=	0x00bb
                           0000BC   752 G$PS0$0$0 == 0x00bc
                           0000BC   753 _PS0	=	0x00bc
                           0000BC   754 G$PS$0$0 == 0x00bc
                           0000BC   755 _PS	=	0x00bc
                           0000BD   756 G$PT2$0$0 == 0x00bd
                           0000BD   757 _PT2	=	0x00bd
                           0000C0   758 G$SMBTOE$0$0 == 0x00c0
                           0000C0   759 _SMBTOE	=	0x00c0
                           0000C1   760 G$SMBFTE$0$0 == 0x00c1
                           0000C1   761 _SMBFTE	=	0x00c1
                           0000C2   762 G$AA$0$0 == 0x00c2
                           0000C2   763 _AA	=	0x00c2
                           0000C3   764 G$SI$0$0 == 0x00c3
                           0000C3   765 _SI	=	0x00c3
                           0000C4   766 G$STO$0$0 == 0x00c4
                           0000C4   767 _STO	=	0x00c4
                           0000C5   768 G$STA$0$0 == 0x00c5
                           0000C5   769 _STA	=	0x00c5
                           0000C6   770 G$ENSMB$0$0 == 0x00c6
                           0000C6   771 _ENSMB	=	0x00c6
                           0000C7   772 G$BUSY$0$0 == 0x00c7
                           0000C7   773 _BUSY	=	0x00c7
                           0000C8   774 G$CPRL2$0$0 == 0x00c8
                           0000C8   775 _CPRL2	=	0x00c8
                           0000C9   776 G$CT2$0$0 == 0x00c9
                           0000C9   777 _CT2	=	0x00c9
                           0000CA   778 G$TR2$0$0 == 0x00ca
                           0000CA   779 _TR2	=	0x00ca
                           0000CB   780 G$EXEN2$0$0 == 0x00cb
                           0000CB   781 _EXEN2	=	0x00cb
                           0000CC   782 G$TCLK$0$0 == 0x00cc
                           0000CC   783 _TCLK	=	0x00cc
                           0000CD   784 G$RCLK$0$0 == 0x00cd
                           0000CD   785 _RCLK	=	0x00cd
                           0000CE   786 G$EXF2$0$0 == 0x00ce
                           0000CE   787 _EXF2	=	0x00ce
                           0000CF   788 G$TF2$0$0 == 0x00cf
                           0000CF   789 _TF2	=	0x00cf
                           0000D0   790 G$P$0$0 == 0x00d0
                           0000D0   791 _P	=	0x00d0
                           0000D1   792 G$F1$0$0 == 0x00d1
                           0000D1   793 _F1	=	0x00d1
                           0000D2   794 G$OV$0$0 == 0x00d2
                           0000D2   795 _OV	=	0x00d2
                           0000D3   796 G$RS0$0$0 == 0x00d3
                           0000D3   797 _RS0	=	0x00d3
                           0000D4   798 G$RS1$0$0 == 0x00d4
                           0000D4   799 _RS1	=	0x00d4
                           0000D5   800 G$F0$0$0 == 0x00d5
                           0000D5   801 _F0	=	0x00d5
                           0000D6   802 G$AC$0$0 == 0x00d6
                           0000D6   803 _AC	=	0x00d6
                           0000D7   804 G$CY$0$0 == 0x00d7
                           0000D7   805 _CY	=	0x00d7
                           0000D8   806 G$CCF0$0$0 == 0x00d8
                           0000D8   807 _CCF0	=	0x00d8
                           0000D9   808 G$CCF1$0$0 == 0x00d9
                           0000D9   809 _CCF1	=	0x00d9
                           0000DA   810 G$CCF2$0$0 == 0x00da
                           0000DA   811 _CCF2	=	0x00da
                           0000DB   812 G$CCF3$0$0 == 0x00db
                           0000DB   813 _CCF3	=	0x00db
                           0000DC   814 G$CCF4$0$0 == 0x00dc
                           0000DC   815 _CCF4	=	0x00dc
                           0000DE   816 G$CR$0$0 == 0x00de
                           0000DE   817 _CR	=	0x00de
                           0000DF   818 G$CF$0$0 == 0x00df
                           0000DF   819 _CF	=	0x00df
                           0000E8   820 G$ADLJST$0$0 == 0x00e8
                           0000E8   821 _ADLJST	=	0x00e8
                           0000E8   822 G$AD0LJST$0$0 == 0x00e8
                           0000E8   823 _AD0LJST	=	0x00e8
                           0000E9   824 G$ADWINT$0$0 == 0x00e9
                           0000E9   825 _ADWINT	=	0x00e9
                           0000E9   826 G$AD0WINT$0$0 == 0x00e9
                           0000E9   827 _AD0WINT	=	0x00e9
                           0000EA   828 G$ADSTM0$0$0 == 0x00ea
                           0000EA   829 _ADSTM0	=	0x00ea
                           0000EA   830 G$AD0CM0$0$0 == 0x00ea
                           0000EA   831 _AD0CM0	=	0x00ea
                           0000EB   832 G$ADSTM1$0$0 == 0x00eb
                           0000EB   833 _ADSTM1	=	0x00eb
                           0000EB   834 G$AD0CM1$0$0 == 0x00eb
                           0000EB   835 _AD0CM1	=	0x00eb
                           0000EC   836 G$ADBUSY$0$0 == 0x00ec
                           0000EC   837 _ADBUSY	=	0x00ec
                           0000EC   838 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   839 _AD0BUSY	=	0x00ec
                           0000ED   840 G$ADCINT$0$0 == 0x00ed
                           0000ED   841 _ADCINT	=	0x00ed
                           0000ED   842 G$AD0INT$0$0 == 0x00ed
                           0000ED   843 _AD0INT	=	0x00ed
                           0000EE   844 G$ADCTM$0$0 == 0x00ee
                           0000EE   845 _ADCTM	=	0x00ee
                           0000EE   846 G$AD0TM$0$0 == 0x00ee
                           0000EE   847 _AD0TM	=	0x00ee
                           0000EF   848 G$ADCEN$0$0 == 0x00ef
                           0000EF   849 _ADCEN	=	0x00ef
                           0000EF   850 G$AD0EN$0$0 == 0x00ef
                           0000EF   851 _AD0EN	=	0x00ef
                           0000F8   852 G$SPIEN$0$0 == 0x00f8
                           0000F8   853 _SPIEN	=	0x00f8
                           0000F9   854 G$MSTEN$0$0 == 0x00f9
                           0000F9   855 _MSTEN	=	0x00f9
                           0000FA   856 G$SLVSEL$0$0 == 0x00fa
                           0000FA   857 _SLVSEL	=	0x00fa
                           0000FB   858 G$TXBSY$0$0 == 0x00fb
                           0000FB   859 _TXBSY	=	0x00fb
                           0000FC   860 G$RXOVRN$0$0 == 0x00fc
                           0000FC   861 _RXOVRN	=	0x00fc
                           0000FD   862 G$MODF$0$0 == 0x00fd
                           0000FD   863 _MODF	=	0x00fd
                           0000FE   864 G$WCOL$0$0 == 0x00fe
                           0000FE   865 _WCOL	=	0x00fe
                           0000FF   866 G$SPIF$0$0 == 0x00ff
                           0000FF   867 _SPIF	=	0x00ff
                           0000B6   868 G$LED0$0$0 == 0x00b6
                           0000B6   869 _LED0	=	0x00b6
                           0000B3   870 G$BILED0$0$0 == 0x00b3
                           0000B3   871 _BILED0	=	0x00b3
                           0000B4   872 G$BILED1$0$0 == 0x00b4
                           0000B4   873 _BILED1	=	0x00b4
                           0000B7   874 G$BUZZ$0$0 == 0x00b7
                           0000B7   875 _BUZZ	=	0x00b7
                           0000A0   876 G$SS$0$0 == 0x00a0
                           0000A0   877 _SS	=	0x00a0
                           0000B0   878 G$PB0$0$0 == 0x00b0
                           0000B0   879 _PB0	=	0x00b0
                           0000B1   880 G$PB1$0$0 == 0x00b1
                           0000B1   881 _PB1	=	0x00b1
                                    882 ;--------------------------------------------------------
                                    883 ; overlayable register banks
                                    884 ;--------------------------------------------------------
                                    885 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        886 	.ds 8
                                    887 ;--------------------------------------------------------
                                    888 ; internal ram data
                                    889 ;--------------------------------------------------------
                                    890 	.area DSEG    (DATA)
                                    891 ;--------------------------------------------------------
                                    892 ; overlayable items in internal ram 
                                    893 ;--------------------------------------------------------
                                    894 	.area	OSEG    (OVR,DATA)
                                    895 	.area	OSEG    (OVR,DATA)
                                    896 ;--------------------------------------------------------
                                    897 ; Stack segment in internal ram 
                                    898 ;--------------------------------------------------------
                                    899 	.area	SSEG
      000000                        900 __start__stack:
      000000                        901 	.ds	1
                                    902 
                                    903 ;--------------------------------------------------------
                                    904 ; indirectly addressable internal ram data
                                    905 ;--------------------------------------------------------
                                    906 	.area ISEG    (DATA)
                                    907 ;--------------------------------------------------------
                                    908 ; absolute internal ram data
                                    909 ;--------------------------------------------------------
                                    910 	.area IABS    (ABS,DATA)
                                    911 	.area IABS    (ABS,DATA)
                                    912 ;--------------------------------------------------------
                                    913 ; bit data
                                    914 ;--------------------------------------------------------
                                    915 	.area BSEG    (BIT)
                                    916 ;--------------------------------------------------------
                                    917 ; paged external ram data
                                    918 ;--------------------------------------------------------
                                    919 	.area PSEG    (PAG,XDATA)
                                    920 ;--------------------------------------------------------
                                    921 ; external ram data
                                    922 ;--------------------------------------------------------
                                    923 	.area XSEG    (XDATA)
                                    924 ;--------------------------------------------------------
                                    925 ; absolute external ram data
                                    926 ;--------------------------------------------------------
                                    927 	.area XABS    (ABS,XDATA)
                                    928 ;--------------------------------------------------------
                                    929 ; external initialized ram data
                                    930 ;--------------------------------------------------------
                                    931 	.area XISEG   (XDATA)
                                    932 	.area HOME    (CODE)
                                    933 	.area GSINIT0 (CODE)
                                    934 	.area GSINIT1 (CODE)
                                    935 	.area GSINIT2 (CODE)
                                    936 	.area GSINIT3 (CODE)
                                    937 	.area GSINIT4 (CODE)
                                    938 	.area GSINIT5 (CODE)
                                    939 	.area GSINIT  (CODE)
                                    940 	.area GSFINAL (CODE)
                                    941 	.area CSEG    (CODE)
                                    942 ;--------------------------------------------------------
                                    943 ; interrupt vector 
                                    944 ;--------------------------------------------------------
                                    945 	.area HOME    (CODE)
      000000                        946 __interrupt_vect:
      000000 02r00r00         [24]  947 	ljmp	__sdcc_gsinit_startup
                                    948 ;--------------------------------------------------------
                                    949 ; global & static initialisations
                                    950 ;--------------------------------------------------------
                                    951 	.area HOME    (CODE)
                                    952 	.area GSINIT  (CODE)
                                    953 	.area GSFINAL (CODE)
                                    954 	.area GSINIT  (CODE)
                                    955 	.globl __sdcc_gsinit_startup
                                    956 	.globl __sdcc_program_startup
                                    957 	.globl __start__stack
                                    958 	.globl __mcs51_genXINIT
                                    959 	.globl __mcs51_genXRAMCLEAR
                                    960 	.globl __mcs51_genRAMCLEAR
                                    961 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  962 	ljmp	__sdcc_program_startup
                                    963 ;--------------------------------------------------------
                                    964 ; Home
                                    965 ;--------------------------------------------------------
                                    966 	.area HOME    (CODE)
                                    967 	.area HOME    (CODE)
      000003                        968 __sdcc_program_startup:
      000003 02r00r7B         [24]  969 	ljmp	_main
                                    970 ;	return from main will return to caller
                                    971 ;--------------------------------------------------------
                                    972 ; code
                                    973 ;--------------------------------------------------------
                                    974 	.area CSEG    (CODE)
                                    975 ;------------------------------------------------------------
                                    976 ;Allocation info for local variables in function 'SYSCLK_Init'
                                    977 ;------------------------------------------------------------
                                    978 ;i                         Allocated to registers r6 r7 
                                    979 ;------------------------------------------------------------
                           000000   980 	G$SYSCLK_Init$0$0 ==.
                           000000   981 	C$c8051_SDCC.h$62$0$0 ==.
                                    982 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:62: void SYSCLK_Init(void)
                                    983 ;	-----------------------------------------
                                    984 ;	 function SYSCLK_Init
                                    985 ;	-----------------------------------------
      000000                        986 _SYSCLK_Init:
                           000007   987 	ar7 = 0x07
                           000006   988 	ar6 = 0x06
                           000005   989 	ar5 = 0x05
                           000004   990 	ar4 = 0x04
                           000003   991 	ar3 = 0x03
                           000002   992 	ar2 = 0x02
                           000001   993 	ar1 = 0x01
                           000000   994 	ar0 = 0x00
                           000000   995 	C$c8051_SDCC.h$66$1$2 ==.
                                    996 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24]  997 	mov	_OSCXCN,#0x67
                           000003   998 	C$c8051_SDCC.h$69$1$2 ==.
                                    999 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1000 	mov	r6,#0x00
      000005 7F 01            [12] 1001 	mov	r7,#0x01
      000007                       1002 00107$:
      000007 EE               [12] 1003 	mov	a,r6
      000008 24 FF            [12] 1004 	add	a,#0xff
      00000A FC               [12] 1005 	mov	r4,a
      00000B EF               [12] 1006 	mov	a,r7
      00000C 34 FF            [12] 1007 	addc	a,#0xff
      00000E FD               [12] 1008 	mov	r5,a
      00000F 8C 06            [24] 1009 	mov	ar6,r4
      000011 8D 07            [24] 1010 	mov	ar7,r5
      000013 EC               [12] 1011 	mov	a,r4
      000014 4D               [12] 1012 	orl	a,r5
      000015 70 F0            [24] 1013 	jnz	00107$
                           000017  1014 	C$c8051_SDCC.h$71$1$2 ==.
                                   1015 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1016 00102$:
      000017 E5 B1            [12] 1017 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1018 	jnb	acc.7,00102$
                           00001C  1019 	C$c8051_SDCC.h$73$1$2 ==.
                                   1020 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1021 	mov	_OSCICN,#0x88
                           00001F  1022 	C$c8051_SDCC.h$76$1$2 ==.
                           00001F  1023 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1024 	ret
                                   1025 ;------------------------------------------------------------
                                   1026 ;Allocation info for local variables in function 'UART0_Init'
                                   1027 ;------------------------------------------------------------
                           000020  1028 	G$UART0_Init$0$0 ==.
                           000020  1029 	C$c8051_SDCC.h$84$1$2 ==.
                                   1030 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:84: void UART0_Init(void)
                                   1031 ;	-----------------------------------------
                                   1032 ;	 function UART0_Init
                                   1033 ;	-----------------------------------------
      000020                       1034 _UART0_Init:
                           000020  1035 	C$c8051_SDCC.h$86$1$4 ==.
                                   1036 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1037 	mov	_SCON0,#0x50
                           000023  1038 	C$c8051_SDCC.h$87$1$4 ==.
                                   1039 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:87: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1040 	mov	_TMOD,#0x20
                           000026  1041 	C$c8051_SDCC.h$88$1$4 ==.
                                   1042 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1043 	mov	_TH1,#0xdc
                           000029  1044 	C$c8051_SDCC.h$89$1$4 ==.
                                   1045 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1046 	setb	_TR1
                           00002B  1047 	C$c8051_SDCC.h$90$1$4 ==.
                                   1048 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:90: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1049 	orl	_CKCON,#0x10
                           00002E  1050 	C$c8051_SDCC.h$91$1$4 ==.
                                   1051 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1052 	orl	_PCON,#0x80
                           000031  1053 	C$c8051_SDCC.h$93$1$4 ==.
                                   1054 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:93: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1055 	setb	_TI0
                           000033  1056 	C$c8051_SDCC.h$94$1$4 ==.
                                   1057 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:94: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1058 	orl	_P0MDOUT,#0x01
                           000036  1059 	C$c8051_SDCC.h$95$1$4 ==.
                           000036  1060 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1061 	ret
                                   1062 ;------------------------------------------------------------
                                   1063 ;Allocation info for local variables in function 'Sys_Init'
                                   1064 ;------------------------------------------------------------
                           000037  1065 	G$Sys_Init$0$0 ==.
                           000037  1066 	C$c8051_SDCC.h$103$1$4 ==.
                                   1067 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:103: void Sys_Init(void)
                                   1068 ;	-----------------------------------------
                                   1069 ;	 function Sys_Init
                                   1070 ;	-----------------------------------------
      000037                       1071 _Sys_Init:
                           000037  1072 	C$c8051_SDCC.h$105$1$6 ==.
                                   1073 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:105: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1074 	mov	_WDTCN,#0xde
                           00003A  1075 	C$c8051_SDCC.h$106$1$6 ==.
                                   1076 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:106: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1077 	mov	_WDTCN,#0xad
                           00003D  1078 	C$c8051_SDCC.h$108$1$6 ==.
                                   1079 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1080 	lcall	_SYSCLK_Init
                           000040  1081 	C$c8051_SDCC.h$109$1$6 ==.
                                   1082 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:109: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1083 	lcall	_UART0_Init
                           000043  1084 	C$c8051_SDCC.h$111$1$6 ==.
                                   1085 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1086 	orl	_XBR0,#0x04
                           000046  1087 	C$c8051_SDCC.h$112$1$6 ==.
                                   1088 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1089 	orl	_XBR2,#0x40
                           000049  1090 	C$c8051_SDCC.h$113$1$6 ==.
                           000049  1091 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1092 	ret
                                   1093 ;------------------------------------------------------------
                                   1094 ;Allocation info for local variables in function 'putchar'
                                   1095 ;------------------------------------------------------------
                                   1096 ;c                         Allocated to registers r7 
                                   1097 ;------------------------------------------------------------
                           00004A  1098 	G$putchar$0$0 ==.
                           00004A  1099 	C$c8051_SDCC.h$129$1$6 ==.
                                   1100 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: void putchar(char c)
                                   1101 ;	-----------------------------------------
                                   1102 ;	 function putchar
                                   1103 ;	-----------------------------------------
      00004A                       1104 _putchar:
      00004A AF 82            [24] 1105 	mov	r7,dpl
                           00004C  1106 	C$c8051_SDCC.h$132$1$8 ==.
                                   1107 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:132: while (!TI0); 
      00004C                       1108 00101$:
                           00004C  1109 	C$c8051_SDCC.h$133$1$8 ==.
                                   1110 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:133: TI0 = 0;
      00004C 10 99 02         [24] 1111 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1112 	sjmp	00101$
      000051                       1113 00112$:
                           000051  1114 	C$c8051_SDCC.h$134$1$8 ==.
                                   1115 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:134: SBUF0 = c;
      000051 8F 99            [24] 1116 	mov	_SBUF0,r7
                           000053  1117 	C$c8051_SDCC.h$135$1$8 ==.
                           000053  1118 	XG$putchar$0$0 ==.
      000053 22               [24] 1119 	ret
                                   1120 ;------------------------------------------------------------
                                   1121 ;Allocation info for local variables in function 'getchar'
                                   1122 ;------------------------------------------------------------
                                   1123 ;c                         Allocated to registers r7 
                                   1124 ;------------------------------------------------------------
                           000054  1125 	G$getchar$0$0 ==.
                           000054  1126 	C$c8051_SDCC.h$154$1$8 ==.
                                   1127 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:154: char getchar(void)
                                   1128 ;	-----------------------------------------
                                   1129 ;	 function getchar
                                   1130 ;	-----------------------------------------
      000054                       1131 _getchar:
                           000054  1132 	C$c8051_SDCC.h$157$1$10 ==.
                                   1133 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:157: while (!RI0);
      000054                       1134 00101$:
                           000054  1135 	C$c8051_SDCC.h$158$1$10 ==.
                                   1136 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:158: RI0 = 0;
      000054 10 98 02         [24] 1137 	jbc	_RI0,00112$
      000057 80 FB            [24] 1138 	sjmp	00101$
      000059                       1139 00112$:
                           000059  1140 	C$c8051_SDCC.h$159$1$10 ==.
                                   1141 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:159: c = SBUF0;
      000059 AF 99            [24] 1142 	mov	r7,_SBUF0
                           00005B  1143 	C$c8051_SDCC.h$160$1$10 ==.
                                   1144 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:160: putchar(c);                          // echo to terminal
      00005B 8F 82            [24] 1145 	mov	dpl,r7
      00005D C0 07            [24] 1146 	push	ar7
      00005F 12r00r4A         [24] 1147 	lcall	_putchar
      000062 D0 07            [24] 1148 	pop	ar7
                           000064  1149 	C$c8051_SDCC.h$161$1$10 ==.
                                   1150 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:161: return c;
      000064 8F 82            [24] 1151 	mov	dpl,r7
                           000066  1152 	C$c8051_SDCC.h$162$1$10 ==.
                           000066  1153 	XG$getchar$0$0 ==.
      000066 22               [24] 1154 	ret
                                   1155 ;------------------------------------------------------------
                                   1156 ;Allocation info for local variables in function 'getchar_nw'
                                   1157 ;------------------------------------------------------------
                                   1158 ;c                         Allocated to registers 
                                   1159 ;------------------------------------------------------------
                           000067  1160 	G$getchar_nw$0$0 ==.
                           000067  1161 	C$c8051_SDCC.h$168$1$10 ==.
                                   1162 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:168: char getchar_nw(void)
                                   1163 ;	-----------------------------------------
                                   1164 ;	 function getchar_nw
                                   1165 ;	-----------------------------------------
      000067                       1166 _getchar_nw:
                           000067  1167 	C$c8051_SDCC.h$171$1$12 ==.
                                   1168 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:171: if (!RI0) return 0xFF;
      000067 20 98 05         [24] 1169 	jb	_RI0,00102$
      00006A 75 82 FF         [24] 1170 	mov	dpl,#0xff
      00006D 80 0B            [24] 1171 	sjmp	00104$
      00006F                       1172 00102$:
                           00006F  1173 	C$c8051_SDCC.h$174$2$13 ==.
                                   1174 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:174: RI0 = 0;
      00006F C2 98            [12] 1175 	clr	_RI0
                           000071  1176 	C$c8051_SDCC.h$175$2$13 ==.
                                   1177 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:175: c = SBUF0;
      000071 85 99 82         [24] 1178 	mov	dpl,_SBUF0
                           000074  1179 	C$c8051_SDCC.h$176$2$13 ==.
                                   1180 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:176: putchar(c);                          // echo to terminal
      000074 12r00r4A         [24] 1181 	lcall	_putchar
                           000077  1182 	C$c8051_SDCC.h$177$2$13 ==.
                                   1183 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:177: return SBUF0;
      000077 85 99 82         [24] 1184 	mov	dpl,_SBUF0
      00007A                       1185 00104$:
                           00007A  1186 	C$c8051_SDCC.h$179$1$12 ==.
                           00007A  1187 	XG$getchar_nw$0$0 ==.
      00007A 22               [24] 1188 	ret
                                   1189 ;------------------------------------------------------------
                                   1190 ;Allocation info for local variables in function 'main'
                                   1191 ;------------------------------------------------------------
                           00007B  1192 	G$main$0$0 ==.
                           00007B  1193 	C$lab1_1_3_Eric_Segerstrom.c$38$1$12 ==.
                                   1194 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:38: void main(void)
                                   1195 ;	-----------------------------------------
                                   1196 ;	 function main
                                   1197 ;	-----------------------------------------
      00007B                       1198 _main:
                           00007B  1199 	C$lab1_1_3_Eric_Segerstrom.c$40$1$32 ==.
                                   1200 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:40: Sys_Init();        // System Initialization
      00007B 12r00r37         [24] 1201 	lcall	_Sys_Init
                           00007E  1202 	C$lab1_1_3_Eric_Segerstrom.c$41$1$32 ==.
                                   1203 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:41: putchar(' ');      // the quote fonts may not copy correctly into SiLabs IDE
      00007E 75 82 20         [24] 1204 	mov	dpl,#0x20
      000081 12r00r4A         [24] 1205 	lcall	_putchar
                           000084  1206 	C$lab1_1_3_Eric_Segerstrom.c$42$1$32 ==.
                                   1207 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:42: Port_Init();       // Initialize ports 2 and 3 
      000084 12r00r8D         [24] 1208 	lcall	_Port_Init
                           000087  1209 	C$lab1_1_3_Eric_Segerstrom.c$44$1$32 ==.
                                   1210 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:44: while (1)          // infinite loop 
      000087                       1211 00102$:
                           000087  1212 	C$lab1_1_3_Eric_Segerstrom.c$48$2$33 ==.
                                   1213 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:48: Set_outputs();
      000087 12r00r9D         [24] 1214 	lcall	_Set_outputs
      00008A 80 FB            [24] 1215 	sjmp	00102$
                           00008C  1216 	C$lab1_1_3_Eric_Segerstrom.c$50$1$32 ==.
                           00008C  1217 	XG$main$0$0 ==.
      00008C 22               [24] 1218 	ret
                                   1219 ;------------------------------------------------------------
                                   1220 ;Allocation info for local variables in function 'Port_Init'
                                   1221 ;------------------------------------------------------------
                           00008D  1222 	G$Port_Init$0$0 ==.
                           00008D  1223 	C$lab1_1_3_Eric_Segerstrom.c$56$1$32 ==.
                                   1224 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:56: void Port_Init(void)
                                   1225 ;	-----------------------------------------
                                   1226 ;	 function Port_Init
                                   1227 ;	-----------------------------------------
      00008D                       1228 _Port_Init:
                           00008D  1229 	C$lab1_1_3_Eric_Segerstrom.c$59$1$35 ==.
                                   1230 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:59: P3MDOUT |= 0xD8; // set Port 3 output pins to push-pull mode 
      00008D 43 A7 D8         [24] 1231 	orl	_P3MDOUT,#0xd8
                           000090  1232 	C$lab1_1_3_Eric_Segerstrom.c$60$1$35 ==.
                                   1233 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:60: P3MDOUT &= 0xFC; // set Port 3 input pins to open drain mode
      000090 53 A7 FC         [24] 1234 	anl	_P3MDOUT,#0xfc
                           000093  1235 	C$lab1_1_3_Eric_Segerstrom.c$61$1$35 ==.
                                   1236 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:61: P3 |= 0x03; // set Port 3 input pins to high impedance state
      000093 43 B0 03         [24] 1237 	orl	_P3,#0x03
                           000096  1238 	C$lab1_1_3_Eric_Segerstrom.c$64$1$35 ==.
                                   1239 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:64: P2MDOUT &= 0xFE; // set Port 2 input pins to open drain mode
      000096 53 A6 FE         [24] 1240 	anl	_P2MDOUT,#0xfe
                           000099  1241 	C$lab1_1_3_Eric_Segerstrom.c$65$1$35 ==.
                                   1242 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:65: P2 |= 0x01; // set Port 2 input pins to high impedance state
      000099 43 A0 01         [24] 1243 	orl	_P2,#0x01
                           00009C  1244 	C$lab1_1_3_Eric_Segerstrom.c$68$1$35 ==.
                           00009C  1245 	XG$Port_Init$0$0 ==.
      00009C 22               [24] 1246 	ret
                                   1247 ;------------------------------------------------------------
                                   1248 ;Allocation info for local variables in function 'Set_outputs'
                                   1249 ;------------------------------------------------------------
                           00009D  1250 	G$Set_outputs$0$0 ==.
                           00009D  1251 	C$lab1_1_3_Eric_Segerstrom.c$94$1$35 ==.
                                   1252 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:94: void Set_outputs(void)
                                   1253 ;	-----------------------------------------
                                   1254 ;	 function Set_outputs
                                   1255 ;	-----------------------------------------
      00009D                       1256 _Set_outputs:
                           00009D  1257 	C$lab1_1_3_Eric_Segerstrom.c$96$1$37 ==.
                                   1258 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:96: if (!SS)       		// if Slide Switch activated (On position)
      00009D 30 A0 03         [24] 1259 	jnb	_SS,00130$
      0000A0 02r01r41         [24] 1260 	ljmp	00111$
      0000A3                       1261 00130$:
                           0000A3  1262 	C$lab1_1_3_Eric_Segerstrom.c$98$2$38 ==.
                                   1263 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:98: LED0 = 0;		// turn on LED0 
      0000A3 C2 B6            [12] 1264 	clr	_LED0
                           0000A5  1265 	C$lab1_1_3_Eric_Segerstrom.c$99$2$38 ==.
                                   1266 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:99: printf("\r Slide switch is on    \n");
      0000A5 74r00            [12] 1267 	mov	a,#___str_0
      0000A7 C0 E0            [24] 1268 	push	acc
      0000A9 74s00            [12] 1269 	mov	a,#(___str_0 >> 8)
      0000AB C0 E0            [24] 1270 	push	acc
      0000AD 74 80            [12] 1271 	mov	a,#0x80
      0000AF C0 E0            [24] 1272 	push	acc
      0000B1 12r00r00         [24] 1273 	lcall	_printf
      0000B4 15 81            [12] 1274 	dec	sp
      0000B6 15 81            [12] 1275 	dec	sp
      0000B8 15 81            [12] 1276 	dec	sp
                           0000BA  1277 	C$lab1_1_3_Eric_Segerstrom.c$101$2$38 ==.
                                   1278 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:101: if (sensor1() && sensor2())
      0000BA 12r01r5F         [24] 1279 	lcall	_sensor1
      0000BD E5 82            [12] 1280 	mov	a,dpl
      0000BF 85 83 F0         [24] 1281 	mov	b,dph
      0000C2 45 F0            [12] 1282 	orl	a,b
      0000C4 60 29            [24] 1283 	jz	00107$
      0000C6 12r01r6B         [24] 1284 	lcall	_sensor2
      0000C9 E5 82            [12] 1285 	mov	a,dpl
      0000CB 85 83 F0         [24] 1286 	mov	b,dph
      0000CE 45 F0            [12] 1287 	orl	a,b
      0000D0 60 1D            [24] 1288 	jz	00107$
                           0000D2  1289 	C$lab1_1_3_Eric_Segerstrom.c$103$3$39 ==.
                                   1290 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:103: printf("\r Pushbutton 1 and 2 activated    \n");
      0000D2 74r1A            [12] 1291 	mov	a,#___str_1
      0000D4 C0 E0            [24] 1292 	push	acc
      0000D6 74s00            [12] 1293 	mov	a,#(___str_1 >> 8)
      0000D8 C0 E0            [24] 1294 	push	acc
      0000DA 74 80            [12] 1295 	mov	a,#0x80
      0000DC C0 E0            [24] 1296 	push	acc
      0000DE 12r00r00         [24] 1297 	lcall	_printf
      0000E1 15 81            [12] 1298 	dec	sp
      0000E3 15 81            [12] 1299 	dec	sp
      0000E5 15 81            [12] 1300 	dec	sp
                           0000E7  1301 	C$lab1_1_3_Eric_Segerstrom.c$104$3$39 ==.
                                   1302 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:104: BUZZ = 0;	// turn on buzzer
      0000E7 C2 B7            [12] 1303 	clr	_BUZZ
                           0000E9  1304 	C$lab1_1_3_Eric_Segerstrom.c$105$3$39 ==.
                                   1305 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:105: BILED0 = 1; // turn off BILED0 
      0000E9 D2 B3            [12] 1306 	setb	_BILED0
                           0000EB  1307 	C$lab1_1_3_Eric_Segerstrom.c$106$3$39 ==.
                                   1308 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:106: BILED1 = 1; // turn off BILED1 
      0000EB D2 B4            [12] 1309 	setb	_BILED1
      0000ED 80 6F            [24] 1310 	sjmp	00113$
      0000EF                       1311 00107$:
                           0000EF  1312 	C$lab1_1_3_Eric_Segerstrom.c$109$2$38 ==.
                                   1313 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:109: else if (sensor1())
      0000EF 12r01r5F         [24] 1314 	lcall	_sensor1
      0000F2 E5 82            [12] 1315 	mov	a,dpl
      0000F4 85 83 F0         [24] 1316 	mov	b,dph
      0000F7 45 F0            [12] 1317 	orl	a,b
      0000F9 60 1D            [24] 1318 	jz	00104$
                           0000FB  1319 	C$lab1_1_3_Eric_Segerstrom.c$111$3$40 ==.
                                   1320 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:111: printf("\r Pushbutton 1 activated    \n");
      0000FB 74r3E            [12] 1321 	mov	a,#___str_2
      0000FD C0 E0            [24] 1322 	push	acc
      0000FF 74s00            [12] 1323 	mov	a,#(___str_2 >> 8)
      000101 C0 E0            [24] 1324 	push	acc
      000103 74 80            [12] 1325 	mov	a,#0x80
      000105 C0 E0            [24] 1326 	push	acc
      000107 12r00r00         [24] 1327 	lcall	_printf
      00010A 15 81            [12] 1328 	dec	sp
      00010C 15 81            [12] 1329 	dec	sp
      00010E 15 81            [12] 1330 	dec	sp
                           000110  1331 	C$lab1_1_3_Eric_Segerstrom.c$112$3$40 ==.
                                   1332 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:112: BILED0 = 0;	// turn on BILED0
      000110 C2 B3            [12] 1333 	clr	_BILED0
                           000112  1334 	C$lab1_1_3_Eric_Segerstrom.c$113$3$40 ==.
                                   1335 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:113: BUZZ = 1;   // turn off buzzer
      000112 D2 B7            [12] 1336 	setb	_BUZZ
                           000114  1337 	C$lab1_1_3_Eric_Segerstrom.c$114$3$40 ==.
                                   1338 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:114: BILED1 = 1; // turn off BILED1 
      000114 D2 B4            [12] 1339 	setb	_BILED1
      000116 80 46            [24] 1340 	sjmp	00113$
      000118                       1341 00104$:
                           000118  1342 	C$lab1_1_3_Eric_Segerstrom.c$117$2$38 ==.
                                   1343 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:117: else if (sensor2())
      000118 12r01r6B         [24] 1344 	lcall	_sensor2
      00011B E5 82            [12] 1345 	mov	a,dpl
      00011D 85 83 F0         [24] 1346 	mov	b,dph
      000120 45 F0            [12] 1347 	orl	a,b
      000122 60 3A            [24] 1348 	jz	00113$
                           000124  1349 	C$lab1_1_3_Eric_Segerstrom.c$119$3$41 ==.
                                   1350 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:119: printf("\r Pushbutton 2 activated    \n");
      000124 74r5C            [12] 1351 	mov	a,#___str_3
      000126 C0 E0            [24] 1352 	push	acc
      000128 74s00            [12] 1353 	mov	a,#(___str_3 >> 8)
      00012A C0 E0            [24] 1354 	push	acc
      00012C 74 80            [12] 1355 	mov	a,#0x80
      00012E C0 E0            [24] 1356 	push	acc
      000130 12r00r00         [24] 1357 	lcall	_printf
      000133 15 81            [12] 1358 	dec	sp
      000135 15 81            [12] 1359 	dec	sp
      000137 15 81            [12] 1360 	dec	sp
                           000139  1361 	C$lab1_1_3_Eric_Segerstrom.c$120$3$41 ==.
                                   1362 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:120: BILED1 = 0;	// turn on BILED 1
      000139 C2 B4            [12] 1363 	clr	_BILED1
                           00013B  1364 	C$lab1_1_3_Eric_Segerstrom.c$121$3$41 ==.
                                   1365 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:121: BILED0 = 1; // turn off BILED0 
      00013B D2 B3            [12] 1366 	setb	_BILED0
                           00013D  1367 	C$lab1_1_3_Eric_Segerstrom.c$122$3$41 ==.
                                   1368 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:122: BUZZ = 1;   // turn off buzzer
      00013D D2 B7            [12] 1369 	setb	_BUZZ
      00013F 80 1D            [24] 1370 	sjmp	00113$
      000141                       1371 00111$:
                           000141  1372 	C$lab1_1_3_Eric_Segerstrom.c$129$2$42 ==.
                                   1373 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:129: LED0 = 1;   // turn off LED0 
      000141 D2 B6            [12] 1374 	setb	_LED0
                           000143  1375 	C$lab1_1_3_Eric_Segerstrom.c$130$2$42 ==.
                                   1376 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:130: BUZZ = 1;   // turn off buzzer 
      000143 D2 B7            [12] 1377 	setb	_BUZZ
                           000145  1378 	C$lab1_1_3_Eric_Segerstrom.c$131$2$42 ==.
                                   1379 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:131: BILED0 = 1;   // turn off BILED0 
      000145 D2 B3            [12] 1380 	setb	_BILED0
                           000147  1381 	C$lab1_1_3_Eric_Segerstrom.c$132$2$42 ==.
                                   1382 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:132: BILED1 = 1;   // turn off BILED1 
      000147 D2 B4            [12] 1383 	setb	_BILED1
                           000149  1384 	C$lab1_1_3_Eric_Segerstrom.c$133$2$42 ==.
                                   1385 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:133: printf("\r Slide switch is off   \n");	
      000149 74r7A            [12] 1386 	mov	a,#___str_4
      00014B C0 E0            [24] 1387 	push	acc
      00014D 74s00            [12] 1388 	mov	a,#(___str_4 >> 8)
      00014F C0 E0            [24] 1389 	push	acc
      000151 74 80            [12] 1390 	mov	a,#0x80
      000153 C0 E0            [24] 1391 	push	acc
      000155 12r00r00         [24] 1392 	lcall	_printf
      000158 15 81            [12] 1393 	dec	sp
      00015A 15 81            [12] 1394 	dec	sp
      00015C 15 81            [12] 1395 	dec	sp
      00015E                       1396 00113$:
                           00015E  1397 	C$lab1_1_3_Eric_Segerstrom.c$135$1$37 ==.
                           00015E  1398 	XG$Set_outputs$0$0 ==.
      00015E 22               [24] 1399 	ret
                                   1400 ;------------------------------------------------------------
                                   1401 ;Allocation info for local variables in function 'sensor1'
                                   1402 ;------------------------------------------------------------
                           00015F  1403 	G$sensor1$0$0 ==.
                           00015F  1404 	C$lab1_1_3_Eric_Segerstrom.c$143$1$37 ==.
                                   1405 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:143: int sensor1(void)
                                   1406 ;	-----------------------------------------
                                   1407 ;	 function sensor1
                                   1408 ;	-----------------------------------------
      00015F                       1409 _sensor1:
                           00015F  1410 	C$lab1_1_3_Eric_Segerstrom.c$145$1$44 ==.
                                   1411 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:145: if (!PB0) return 1;
      00015F 20 B0 05         [24] 1412 	jb	_PB0,00102$
      000162 90 00 01         [24] 1413 	mov	dptr,#0x0001
      000165 80 03            [24] 1414 	sjmp	00104$
      000167                       1415 00102$:
                           000167  1416 	C$lab1_1_3_Eric_Segerstrom.c$146$1$44 ==.
                                   1417 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:146: else      return 0;
      000167 90 00 00         [24] 1418 	mov	dptr,#0x0000
      00016A                       1419 00104$:
                           00016A  1420 	C$lab1_1_3_Eric_Segerstrom.c$147$1$44 ==.
                           00016A  1421 	XG$sensor1$0$0 ==.
      00016A 22               [24] 1422 	ret
                                   1423 ;------------------------------------------------------------
                                   1424 ;Allocation info for local variables in function 'sensor2'
                                   1425 ;------------------------------------------------------------
                           00016B  1426 	G$sensor2$0$0 ==.
                           00016B  1427 	C$lab1_1_3_Eric_Segerstrom.c$155$1$44 ==.
                                   1428 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:155: int sensor2(void)
                                   1429 ;	-----------------------------------------
                                   1430 ;	 function sensor2
                                   1431 ;	-----------------------------------------
      00016B                       1432 _sensor2:
                           00016B  1433 	C$lab1_1_3_Eric_Segerstrom.c$157$1$46 ==.
                                   1434 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:157: if (!PB1) return 1;
      00016B 20 B1 05         [24] 1435 	jb	_PB1,00102$
      00016E 90 00 01         [24] 1436 	mov	dptr,#0x0001
      000171 80 03            [24] 1437 	sjmp	00104$
      000173                       1438 00102$:
                           000173  1439 	C$lab1_1_3_Eric_Segerstrom.c$158$1$46 ==.
                                   1440 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:158: else      return 0;
      000173 90 00 00         [24] 1441 	mov	dptr,#0x0000
      000176                       1442 00104$:
                           000176  1443 	C$lab1_1_3_Eric_Segerstrom.c$159$1$46 ==.
                           000176  1444 	XG$sensor2$0$0 ==.
      000176 22               [24] 1445 	ret
                                   1446 ;------------------------------------------------------------
                                   1447 ;Allocation info for local variables in function 'sensor3'
                                   1448 ;------------------------------------------------------------
                           000177  1449 	G$sensor3$0$0 ==.
                           000177  1450 	C$lab1_1_3_Eric_Segerstrom.c$167$1$46 ==.
                                   1451 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:167: int sensor3(void)
                                   1452 ;	-----------------------------------------
                                   1453 ;	 function sensor3
                                   1454 ;	-----------------------------------------
      000177                       1455 _sensor3:
                           000177  1456 	C$lab1_1_3_Eric_Segerstrom.c$169$1$48 ==.
                                   1457 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:169: if (!SS) return 1;
      000177 20 A0 05         [24] 1458 	jb	_SS,00102$
      00017A 90 00 01         [24] 1459 	mov	dptr,#0x0001
      00017D 80 03            [24] 1460 	sjmp	00104$
      00017F                       1461 00102$:
                           00017F  1462 	C$lab1_1_3_Eric_Segerstrom.c$170$1$48 ==.
                                   1463 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 1-1\lab1-1-3_Eric_Segerstrom.c:170: else     return 0;
      00017F 90 00 00         [24] 1464 	mov	dptr,#0x0000
      000182                       1465 00104$:
                           000182  1466 	C$lab1_1_3_Eric_Segerstrom.c$171$1$48 ==.
                           000182  1467 	XG$sensor3$0$0 ==.
      000182 22               [24] 1468 	ret
                                   1469 	.area CSEG    (CODE)
                                   1470 	.area CONST   (CODE)
                           000000  1471 Flab1_1_3_Eric_Segerstrom$__str_0$0$0 == .
      000000                       1472 ___str_0:
      000000 0D                    1473 	.db 0x0d
      000001 20 53 6C 69 64 65 20  1474 	.ascii " Slide switch is on    "
             73 77 69 74 63 68 20
             69 73 20 6F 6E 20 20
             20 20
      000018 0A                    1475 	.db 0x0a
      000019 00                    1476 	.db 0x00
                           00001A  1477 Flab1_1_3_Eric_Segerstrom$__str_1$0$0 == .
      00001A                       1478 ___str_1:
      00001A 0D                    1479 	.db 0x0d
      00001B 20 50 75 73 68 62 75  1480 	.ascii " Pushbutton 1 and 2 activated    "
             74 74 6F 6E 20 31 20
             61 6E 64 20 32 20 61
             63 74 69 76 61 74 65
             64 20 20 20 20
      00003C 0A                    1481 	.db 0x0a
      00003D 00                    1482 	.db 0x00
                           00003E  1483 Flab1_1_3_Eric_Segerstrom$__str_2$0$0 == .
      00003E                       1484 ___str_2:
      00003E 0D                    1485 	.db 0x0d
      00003F 20 50 75 73 68 62 75  1486 	.ascii " Pushbutton 1 activated    "
             74 74 6F 6E 20 31 20
             61 63 74 69 76 61 74
             65 64 20 20 20 20
      00005A 0A                    1487 	.db 0x0a
      00005B 00                    1488 	.db 0x00
                           00005C  1489 Flab1_1_3_Eric_Segerstrom$__str_3$0$0 == .
      00005C                       1490 ___str_3:
      00005C 0D                    1491 	.db 0x0d
      00005D 20 50 75 73 68 62 75  1492 	.ascii " Pushbutton 2 activated    "
             74 74 6F 6E 20 32 20
             61 63 74 69 76 61 74
             65 64 20 20 20 20
      000078 0A                    1493 	.db 0x0a
      000079 00                    1494 	.db 0x00
                           00007A  1495 Flab1_1_3_Eric_Segerstrom$__str_4$0$0 == .
      00007A                       1496 ___str_4:
      00007A 0D                    1497 	.db 0x0d
      00007B 20 53 6C 69 64 65 20  1498 	.ascii " Slide switch is off   "
             73 77 69 74 63 68 20
             69 73 20 6F 66 66 20
             20 20
      000092 0A                    1499 	.db 0x0a
      000093 00                    1500 	.db 0x00
                                   1501 	.area XINIT   (CODE)
                                   1502 	.area CABS    (ABS,CODE)
