                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module Lab2
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _abs
                                     13 	.globl _srand
                                     14 	.globl _rand
                                     15 	.globl _putchar
                                     16 	.globl _printf
                                     17 	.globl _getchar_nw
                                     18 	.globl _Sys_Init
                                     19 	.globl _UART0_Init
                                     20 	.globl _SYSCLK_Init
                                     21 	.globl _LED2
                                     22 	.globl _LED0
                                     23 	.globl _LED1
                                     24 	.globl _BILED1
                                     25 	.globl _BILED0
                                     26 	.globl _LED3
                                     27 	.globl _PB0
                                     28 	.globl _SS1
                                     29 	.globl _SS0
                                     30 	.globl _SPIF
                                     31 	.globl _WCOL
                                     32 	.globl _MODF
                                     33 	.globl _RXOVRN
                                     34 	.globl _TXBSY
                                     35 	.globl _SLVSEL
                                     36 	.globl _MSTEN
                                     37 	.globl _SPIEN
                                     38 	.globl _AD0EN
                                     39 	.globl _ADCEN
                                     40 	.globl _AD0TM
                                     41 	.globl _ADCTM
                                     42 	.globl _AD0INT
                                     43 	.globl _ADCINT
                                     44 	.globl _AD0BUSY
                                     45 	.globl _ADBUSY
                                     46 	.globl _AD0CM1
                                     47 	.globl _ADSTM1
                                     48 	.globl _AD0CM0
                                     49 	.globl _ADSTM0
                                     50 	.globl _AD0WINT
                                     51 	.globl _ADWINT
                                     52 	.globl _AD0LJST
                                     53 	.globl _ADLJST
                                     54 	.globl _CF
                                     55 	.globl _CR
                                     56 	.globl _CCF4
                                     57 	.globl _CCF3
                                     58 	.globl _CCF2
                                     59 	.globl _CCF1
                                     60 	.globl _CCF0
                                     61 	.globl _CY
                                     62 	.globl _AC
                                     63 	.globl _F0
                                     64 	.globl _RS1
                                     65 	.globl _RS0
                                     66 	.globl _OV
                                     67 	.globl _F1
                                     68 	.globl _P
                                     69 	.globl _TF2
                                     70 	.globl _EXF2
                                     71 	.globl _RCLK
                                     72 	.globl _TCLK
                                     73 	.globl _EXEN2
                                     74 	.globl _TR2
                                     75 	.globl _CT2
                                     76 	.globl _CPRL2
                                     77 	.globl _BUSY
                                     78 	.globl _ENSMB
                                     79 	.globl _STA
                                     80 	.globl _STO
                                     81 	.globl _SI
                                     82 	.globl _AA
                                     83 	.globl _SMBFTE
                                     84 	.globl _SMBTOE
                                     85 	.globl _PT2
                                     86 	.globl _PS
                                     87 	.globl _PS0
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _P3_7
                                     93 	.globl _P3_6
                                     94 	.globl _P3_5
                                     95 	.globl _P3_4
                                     96 	.globl _P3_3
                                     97 	.globl _P3_2
                                     98 	.globl _P3_1
                                     99 	.globl _P3_0
                                    100 	.globl _EA
                                    101 	.globl _ET2
                                    102 	.globl _ES
                                    103 	.globl _ES0
                                    104 	.globl _ET1
                                    105 	.globl _EX1
                                    106 	.globl _ET0
                                    107 	.globl _EX0
                                    108 	.globl _P2_7
                                    109 	.globl _P2_6
                                    110 	.globl _P2_5
                                    111 	.globl _P2_4
                                    112 	.globl _P2_3
                                    113 	.globl _P2_2
                                    114 	.globl _P2_1
                                    115 	.globl _P2_0
                                    116 	.globl _S0MODE
                                    117 	.globl _SM00
                                    118 	.globl _SM0
                                    119 	.globl _SM10
                                    120 	.globl _SM1
                                    121 	.globl _MCE0
                                    122 	.globl _SM20
                                    123 	.globl _SM2
                                    124 	.globl _REN0
                                    125 	.globl _REN
                                    126 	.globl _TB80
                                    127 	.globl _TB8
                                    128 	.globl _RB80
                                    129 	.globl _RB8
                                    130 	.globl _TI0
                                    131 	.globl _TI
                                    132 	.globl _RI0
                                    133 	.globl _RI
                                    134 	.globl _P1_7
                                    135 	.globl _P1_6
                                    136 	.globl _P1_5
                                    137 	.globl _P1_4
                                    138 	.globl _P1_3
                                    139 	.globl _P1_2
                                    140 	.globl _P1_1
                                    141 	.globl _P1_0
                                    142 	.globl _TF1
                                    143 	.globl _TR1
                                    144 	.globl _TF0
                                    145 	.globl _TR0
                                    146 	.globl _IE1
                                    147 	.globl _IT1
                                    148 	.globl _IE0
                                    149 	.globl _IT0
                                    150 	.globl _P0_7
                                    151 	.globl _P0_6
                                    152 	.globl _P0_5
                                    153 	.globl _P0_4
                                    154 	.globl _P0_3
                                    155 	.globl _P0_2
                                    156 	.globl _P0_1
                                    157 	.globl _P0_0
                                    158 	.globl _PCA0CP4
                                    159 	.globl _PCA0CP3
                                    160 	.globl _PCA0CP2
                                    161 	.globl _PCA0CP1
                                    162 	.globl _PCA0CP0
                                    163 	.globl _PCA0
                                    164 	.globl _DAC1
                                    165 	.globl _DAC0
                                    166 	.globl _ADC0LT
                                    167 	.globl _ADC0GT
                                    168 	.globl _ADC0
                                    169 	.globl _RCAP4
                                    170 	.globl _TMR4
                                    171 	.globl _TMR3RL
                                    172 	.globl _TMR3
                                    173 	.globl _RCAP2
                                    174 	.globl _TMR2
                                    175 	.globl _TMR1
                                    176 	.globl _TMR0
                                    177 	.globl _WDTCN
                                    178 	.globl _PCA0CPH4
                                    179 	.globl _PCA0CPH3
                                    180 	.globl _PCA0CPH2
                                    181 	.globl _PCA0CPH1
                                    182 	.globl _PCA0CPH0
                                    183 	.globl _PCA0H
                                    184 	.globl _SPI0CN
                                    185 	.globl _EIP2
                                    186 	.globl _EIP1
                                    187 	.globl _TH4
                                    188 	.globl _TL4
                                    189 	.globl _SADDR1
                                    190 	.globl _SBUF1
                                    191 	.globl _SCON1
                                    192 	.globl _B
                                    193 	.globl _RSTSRC
                                    194 	.globl _PCA0CPL4
                                    195 	.globl _PCA0CPL3
                                    196 	.globl _PCA0CPL2
                                    197 	.globl _PCA0CPL1
                                    198 	.globl _PCA0CPL0
                                    199 	.globl _PCA0L
                                    200 	.globl _ADC0CN
                                    201 	.globl _EIE2
                                    202 	.globl _EIE1
                                    203 	.globl _RCAP4H
                                    204 	.globl _RCAP4L
                                    205 	.globl _XBR2
                                    206 	.globl _XBR1
                                    207 	.globl _XBR0
                                    208 	.globl _ACC
                                    209 	.globl _PCA0CPM4
                                    210 	.globl _PCA0CPM3
                                    211 	.globl _PCA0CPM2
                                    212 	.globl _PCA0CPM1
                                    213 	.globl _PCA0CPM0
                                    214 	.globl _PCA0MD
                                    215 	.globl _PCA0CN
                                    216 	.globl _DAC1CN
                                    217 	.globl _DAC1H
                                    218 	.globl _DAC1L
                                    219 	.globl _DAC0CN
                                    220 	.globl _DAC0H
                                    221 	.globl _DAC0L
                                    222 	.globl _REF0CN
                                    223 	.globl _PSW
                                    224 	.globl _SMB0CR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T4CON
                                    230 	.globl _T2CON
                                    231 	.globl _ADC0LTH
                                    232 	.globl _ADC0LTL
                                    233 	.globl _ADC0GTH
                                    234 	.globl _ADC0GTL
                                    235 	.globl _SMB0ADR
                                    236 	.globl _SMB0DAT
                                    237 	.globl _SMB0STA
                                    238 	.globl _SMB0CN
                                    239 	.globl _ADC0H
                                    240 	.globl _ADC0L
                                    241 	.globl _P1MDIN
                                    242 	.globl _ADC0CF
                                    243 	.globl _AMX0SL
                                    244 	.globl _AMX0CF
                                    245 	.globl _SADEN0
                                    246 	.globl _IP
                                    247 	.globl _FLACL
                                    248 	.globl _FLSCL
                                    249 	.globl _P74OUT
                                    250 	.globl _OSCICN
                                    251 	.globl _OSCXCN
                                    252 	.globl _P3
                                    253 	.globl __XPAGE
                                    254 	.globl _EMI0CN
                                    255 	.globl _SADEN1
                                    256 	.globl _P3IF
                                    257 	.globl _AMX1SL
                                    258 	.globl _ADC1CF
                                    259 	.globl _ADC1CN
                                    260 	.globl _SADDR0
                                    261 	.globl _IE
                                    262 	.globl _P3MDOUT
                                    263 	.globl _PRT3CF
                                    264 	.globl _P2MDOUT
                                    265 	.globl _PRT2CF
                                    266 	.globl _P1MDOUT
                                    267 	.globl _PRT1CF
                                    268 	.globl _P0MDOUT
                                    269 	.globl _PRT0CF
                                    270 	.globl _EMI0CF
                                    271 	.globl _EMI0TC
                                    272 	.globl _P2
                                    273 	.globl _CPT1CN
                                    274 	.globl _CPT0CN
                                    275 	.globl _SPI0CKR
                                    276 	.globl _ADC1
                                    277 	.globl _SPI0DAT
                                    278 	.globl _SPI0CFG
                                    279 	.globl _SBUF0
                                    280 	.globl _SBUF
                                    281 	.globl _SCON0
                                    282 	.globl _SCON
                                    283 	.globl _P7
                                    284 	.globl _TMR3H
                                    285 	.globl _TMR3L
                                    286 	.globl _TMR3RLH
                                    287 	.globl _TMR3RLL
                                    288 	.globl _TMR3CN
                                    289 	.globl _P1
                                    290 	.globl _PSCTL
                                    291 	.globl _CKCON
                                    292 	.globl _TH1
                                    293 	.globl _TH0
                                    294 	.globl _TL1
                                    295 	.globl _TL0
                                    296 	.globl _TMOD
                                    297 	.globl _TCON
                                    298 	.globl _PCON
                                    299 	.globl _P6
                                    300 	.globl _P5
                                    301 	.globl _P4
                                    302 	.globl _DPH
                                    303 	.globl _DPL
                                    304 	.globl _SP
                                    305 	.globl _P0
                                    306 	.globl _CompareVals_PARM_2
                                    307 	.globl _MapADC_PARM_3
                                    308 	.globl _MapADC_PARM_2
                                    309 	.globl _aligned_alloc_PARM_2
                                    310 	.globl _desiredValue
                                    311 	.globl _ADC_mapped
                                    312 	.globl _tries
                                    313 	.globl _numLEDs
                                    314 	.globl _overflows
                                    315 	.globl _tmpCount
                                    316 	.globl _buttonPresses
                                    317 	.globl _score
                                    318 	.globl _error
                                    319 	.globl _ADC_value
                                    320 	.globl _length
                                    321 	.globl _randomNumber
                                    322 	.globl _totalPoints
                                    323 	.globl _n
                                    324 	.globl _var
                                    325 	.globl _counts
                                    326 	.globl _Port_Init
                                    327 	.globl _Timer_Init
                                    328 	.globl _Interrupt_Init
                                    329 	.globl _ADC1_Init
                                    330 	.globl _read_AD_input
                                    331 	.globl _Flash_Biled
                                    332 	.globl _Flash_LEDs
                                    333 	.globl _Mode_One
                                    334 	.globl _Mode_Two
                                    335 	.globl _Mode_Three
                                    336 	.globl _Draw_Bar
                                    337 	.globl _Timer0_ISR
                                    338 	.globl _random
                                    339 	.globl _SetAllLEDs
                                    340 	.globl _MapADC
                                    341 	.globl _LightNumLEDs
                                    342 	.globl _ClearTimer0
                                    343 	.globl _SetBILED
                                    344 	.globl _DebounceButton
                                    345 	.globl _CompareVals
                                    346 ;--------------------------------------------------------
                                    347 ; special function registers
                                    348 ;--------------------------------------------------------
                                    349 	.area RSEG    (ABS,DATA)
      000000                        350 	.org 0x0000
                           000080   351 G$P0$0$0 == 0x0080
                           000080   352 _P0	=	0x0080
                           000081   353 G$SP$0$0 == 0x0081
                           000081   354 _SP	=	0x0081
                           000082   355 G$DPL$0$0 == 0x0082
                           000082   356 _DPL	=	0x0082
                           000083   357 G$DPH$0$0 == 0x0083
                           000083   358 _DPH	=	0x0083
                           000084   359 G$P4$0$0 == 0x0084
                           000084   360 _P4	=	0x0084
                           000085   361 G$P5$0$0 == 0x0085
                           000085   362 _P5	=	0x0085
                           000086   363 G$P6$0$0 == 0x0086
                           000086   364 _P6	=	0x0086
                           000087   365 G$PCON$0$0 == 0x0087
                           000087   366 _PCON	=	0x0087
                           000088   367 G$TCON$0$0 == 0x0088
                           000088   368 _TCON	=	0x0088
                           000089   369 G$TMOD$0$0 == 0x0089
                           000089   370 _TMOD	=	0x0089
                           00008A   371 G$TL0$0$0 == 0x008a
                           00008A   372 _TL0	=	0x008a
                           00008B   373 G$TL1$0$0 == 0x008b
                           00008B   374 _TL1	=	0x008b
                           00008C   375 G$TH0$0$0 == 0x008c
                           00008C   376 _TH0	=	0x008c
                           00008D   377 G$TH1$0$0 == 0x008d
                           00008D   378 _TH1	=	0x008d
                           00008E   379 G$CKCON$0$0 == 0x008e
                           00008E   380 _CKCON	=	0x008e
                           00008F   381 G$PSCTL$0$0 == 0x008f
                           00008F   382 _PSCTL	=	0x008f
                           000090   383 G$P1$0$0 == 0x0090
                           000090   384 _P1	=	0x0090
                           000091   385 G$TMR3CN$0$0 == 0x0091
                           000091   386 _TMR3CN	=	0x0091
                           000092   387 G$TMR3RLL$0$0 == 0x0092
                           000092   388 _TMR3RLL	=	0x0092
                           000093   389 G$TMR3RLH$0$0 == 0x0093
                           000093   390 _TMR3RLH	=	0x0093
                           000094   391 G$TMR3L$0$0 == 0x0094
                           000094   392 _TMR3L	=	0x0094
                           000095   393 G$TMR3H$0$0 == 0x0095
                           000095   394 _TMR3H	=	0x0095
                           000096   395 G$P7$0$0 == 0x0096
                           000096   396 _P7	=	0x0096
                           000098   397 G$SCON$0$0 == 0x0098
                           000098   398 _SCON	=	0x0098
                           000098   399 G$SCON0$0$0 == 0x0098
                           000098   400 _SCON0	=	0x0098
                           000099   401 G$SBUF$0$0 == 0x0099
                           000099   402 _SBUF	=	0x0099
                           000099   403 G$SBUF0$0$0 == 0x0099
                           000099   404 _SBUF0	=	0x0099
                           00009A   405 G$SPI0CFG$0$0 == 0x009a
                           00009A   406 _SPI0CFG	=	0x009a
                           00009B   407 G$SPI0DAT$0$0 == 0x009b
                           00009B   408 _SPI0DAT	=	0x009b
                           00009C   409 G$ADC1$0$0 == 0x009c
                           00009C   410 _ADC1	=	0x009c
                           00009D   411 G$SPI0CKR$0$0 == 0x009d
                           00009D   412 _SPI0CKR	=	0x009d
                           00009E   413 G$CPT0CN$0$0 == 0x009e
                           00009E   414 _CPT0CN	=	0x009e
                           00009F   415 G$CPT1CN$0$0 == 0x009f
                           00009F   416 _CPT1CN	=	0x009f
                           0000A0   417 G$P2$0$0 == 0x00a0
                           0000A0   418 _P2	=	0x00a0
                           0000A1   419 G$EMI0TC$0$0 == 0x00a1
                           0000A1   420 _EMI0TC	=	0x00a1
                           0000A3   421 G$EMI0CF$0$0 == 0x00a3
                           0000A3   422 _EMI0CF	=	0x00a3
                           0000A4   423 G$PRT0CF$0$0 == 0x00a4
                           0000A4   424 _PRT0CF	=	0x00a4
                           0000A4   425 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   426 _P0MDOUT	=	0x00a4
                           0000A5   427 G$PRT1CF$0$0 == 0x00a5
                           0000A5   428 _PRT1CF	=	0x00a5
                           0000A5   429 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   430 _P1MDOUT	=	0x00a5
                           0000A6   431 G$PRT2CF$0$0 == 0x00a6
                           0000A6   432 _PRT2CF	=	0x00a6
                           0000A6   433 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   434 _P2MDOUT	=	0x00a6
                           0000A7   435 G$PRT3CF$0$0 == 0x00a7
                           0000A7   436 _PRT3CF	=	0x00a7
                           0000A7   437 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   438 _P3MDOUT	=	0x00a7
                           0000A8   439 G$IE$0$0 == 0x00a8
                           0000A8   440 _IE	=	0x00a8
                           0000A9   441 G$SADDR0$0$0 == 0x00a9
                           0000A9   442 _SADDR0	=	0x00a9
                           0000AA   443 G$ADC1CN$0$0 == 0x00aa
                           0000AA   444 _ADC1CN	=	0x00aa
                           0000AB   445 G$ADC1CF$0$0 == 0x00ab
                           0000AB   446 _ADC1CF	=	0x00ab
                           0000AC   447 G$AMX1SL$0$0 == 0x00ac
                           0000AC   448 _AMX1SL	=	0x00ac
                           0000AD   449 G$P3IF$0$0 == 0x00ad
                           0000AD   450 _P3IF	=	0x00ad
                           0000AE   451 G$SADEN1$0$0 == 0x00ae
                           0000AE   452 _SADEN1	=	0x00ae
                           0000AF   453 G$EMI0CN$0$0 == 0x00af
                           0000AF   454 _EMI0CN	=	0x00af
                           0000AF   455 G$_XPAGE$0$0 == 0x00af
                           0000AF   456 __XPAGE	=	0x00af
                           0000B0   457 G$P3$0$0 == 0x00b0
                           0000B0   458 _P3	=	0x00b0
                           0000B1   459 G$OSCXCN$0$0 == 0x00b1
                           0000B1   460 _OSCXCN	=	0x00b1
                           0000B2   461 G$OSCICN$0$0 == 0x00b2
                           0000B2   462 _OSCICN	=	0x00b2
                           0000B5   463 G$P74OUT$0$0 == 0x00b5
                           0000B5   464 _P74OUT	=	0x00b5
                           0000B6   465 G$FLSCL$0$0 == 0x00b6
                           0000B6   466 _FLSCL	=	0x00b6
                           0000B7   467 G$FLACL$0$0 == 0x00b7
                           0000B7   468 _FLACL	=	0x00b7
                           0000B8   469 G$IP$0$0 == 0x00b8
                           0000B8   470 _IP	=	0x00b8
                           0000B9   471 G$SADEN0$0$0 == 0x00b9
                           0000B9   472 _SADEN0	=	0x00b9
                           0000BA   473 G$AMX0CF$0$0 == 0x00ba
                           0000BA   474 _AMX0CF	=	0x00ba
                           0000BB   475 G$AMX0SL$0$0 == 0x00bb
                           0000BB   476 _AMX0SL	=	0x00bb
                           0000BC   477 G$ADC0CF$0$0 == 0x00bc
                           0000BC   478 _ADC0CF	=	0x00bc
                           0000BD   479 G$P1MDIN$0$0 == 0x00bd
                           0000BD   480 _P1MDIN	=	0x00bd
                           0000BE   481 G$ADC0L$0$0 == 0x00be
                           0000BE   482 _ADC0L	=	0x00be
                           0000BF   483 G$ADC0H$0$0 == 0x00bf
                           0000BF   484 _ADC0H	=	0x00bf
                           0000C0   485 G$SMB0CN$0$0 == 0x00c0
                           0000C0   486 _SMB0CN	=	0x00c0
                           0000C1   487 G$SMB0STA$0$0 == 0x00c1
                           0000C1   488 _SMB0STA	=	0x00c1
                           0000C2   489 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   490 _SMB0DAT	=	0x00c2
                           0000C3   491 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   492 _SMB0ADR	=	0x00c3
                           0000C4   493 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   494 _ADC0GTL	=	0x00c4
                           0000C5   495 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   496 _ADC0GTH	=	0x00c5
                           0000C6   497 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   498 _ADC0LTL	=	0x00c6
                           0000C7   499 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   500 _ADC0LTH	=	0x00c7
                           0000C8   501 G$T2CON$0$0 == 0x00c8
                           0000C8   502 _T2CON	=	0x00c8
                           0000C9   503 G$T4CON$0$0 == 0x00c9
                           0000C9   504 _T4CON	=	0x00c9
                           0000CA   505 G$RCAP2L$0$0 == 0x00ca
                           0000CA   506 _RCAP2L	=	0x00ca
                           0000CB   507 G$RCAP2H$0$0 == 0x00cb
                           0000CB   508 _RCAP2H	=	0x00cb
                           0000CC   509 G$TL2$0$0 == 0x00cc
                           0000CC   510 _TL2	=	0x00cc
                           0000CD   511 G$TH2$0$0 == 0x00cd
                           0000CD   512 _TH2	=	0x00cd
                           0000CF   513 G$SMB0CR$0$0 == 0x00cf
                           0000CF   514 _SMB0CR	=	0x00cf
                           0000D0   515 G$PSW$0$0 == 0x00d0
                           0000D0   516 _PSW	=	0x00d0
                           0000D1   517 G$REF0CN$0$0 == 0x00d1
                           0000D1   518 _REF0CN	=	0x00d1
                           0000D2   519 G$DAC0L$0$0 == 0x00d2
                           0000D2   520 _DAC0L	=	0x00d2
                           0000D3   521 G$DAC0H$0$0 == 0x00d3
                           0000D3   522 _DAC0H	=	0x00d3
                           0000D4   523 G$DAC0CN$0$0 == 0x00d4
                           0000D4   524 _DAC0CN	=	0x00d4
                           0000D5   525 G$DAC1L$0$0 == 0x00d5
                           0000D5   526 _DAC1L	=	0x00d5
                           0000D6   527 G$DAC1H$0$0 == 0x00d6
                           0000D6   528 _DAC1H	=	0x00d6
                           0000D7   529 G$DAC1CN$0$0 == 0x00d7
                           0000D7   530 _DAC1CN	=	0x00d7
                           0000D8   531 G$PCA0CN$0$0 == 0x00d8
                           0000D8   532 _PCA0CN	=	0x00d8
                           0000D9   533 G$PCA0MD$0$0 == 0x00d9
                           0000D9   534 _PCA0MD	=	0x00d9
                           0000DA   535 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   536 _PCA0CPM0	=	0x00da
                           0000DB   537 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   538 _PCA0CPM1	=	0x00db
                           0000DC   539 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   540 _PCA0CPM2	=	0x00dc
                           0000DD   541 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   542 _PCA0CPM3	=	0x00dd
                           0000DE   543 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   544 _PCA0CPM4	=	0x00de
                           0000E0   545 G$ACC$0$0 == 0x00e0
                           0000E0   546 _ACC	=	0x00e0
                           0000E1   547 G$XBR0$0$0 == 0x00e1
                           0000E1   548 _XBR0	=	0x00e1
                           0000E2   549 G$XBR1$0$0 == 0x00e2
                           0000E2   550 _XBR1	=	0x00e2
                           0000E3   551 G$XBR2$0$0 == 0x00e3
                           0000E3   552 _XBR2	=	0x00e3
                           0000E4   553 G$RCAP4L$0$0 == 0x00e4
                           0000E4   554 _RCAP4L	=	0x00e4
                           0000E5   555 G$RCAP4H$0$0 == 0x00e5
                           0000E5   556 _RCAP4H	=	0x00e5
                           0000E6   557 G$EIE1$0$0 == 0x00e6
                           0000E6   558 _EIE1	=	0x00e6
                           0000E7   559 G$EIE2$0$0 == 0x00e7
                           0000E7   560 _EIE2	=	0x00e7
                           0000E8   561 G$ADC0CN$0$0 == 0x00e8
                           0000E8   562 _ADC0CN	=	0x00e8
                           0000E9   563 G$PCA0L$0$0 == 0x00e9
                           0000E9   564 _PCA0L	=	0x00e9
                           0000EA   565 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   566 _PCA0CPL0	=	0x00ea
                           0000EB   567 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   568 _PCA0CPL1	=	0x00eb
                           0000EC   569 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   570 _PCA0CPL2	=	0x00ec
                           0000ED   571 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   572 _PCA0CPL3	=	0x00ed
                           0000EE   573 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   574 _PCA0CPL4	=	0x00ee
                           0000EF   575 G$RSTSRC$0$0 == 0x00ef
                           0000EF   576 _RSTSRC	=	0x00ef
                           0000F0   577 G$B$0$0 == 0x00f0
                           0000F0   578 _B	=	0x00f0
                           0000F1   579 G$SCON1$0$0 == 0x00f1
                           0000F1   580 _SCON1	=	0x00f1
                           0000F2   581 G$SBUF1$0$0 == 0x00f2
                           0000F2   582 _SBUF1	=	0x00f2
                           0000F3   583 G$SADDR1$0$0 == 0x00f3
                           0000F3   584 _SADDR1	=	0x00f3
                           0000F4   585 G$TL4$0$0 == 0x00f4
                           0000F4   586 _TL4	=	0x00f4
                           0000F5   587 G$TH4$0$0 == 0x00f5
                           0000F5   588 _TH4	=	0x00f5
                           0000F6   589 G$EIP1$0$0 == 0x00f6
                           0000F6   590 _EIP1	=	0x00f6
                           0000F7   591 G$EIP2$0$0 == 0x00f7
                           0000F7   592 _EIP2	=	0x00f7
                           0000F8   593 G$SPI0CN$0$0 == 0x00f8
                           0000F8   594 _SPI0CN	=	0x00f8
                           0000F9   595 G$PCA0H$0$0 == 0x00f9
                           0000F9   596 _PCA0H	=	0x00f9
                           0000FA   597 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   598 _PCA0CPH0	=	0x00fa
                           0000FB   599 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   600 _PCA0CPH1	=	0x00fb
                           0000FC   601 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   602 _PCA0CPH2	=	0x00fc
                           0000FD   603 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   604 _PCA0CPH3	=	0x00fd
                           0000FE   605 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   606 _PCA0CPH4	=	0x00fe
                           0000FF   607 G$WDTCN$0$0 == 0x00ff
                           0000FF   608 _WDTCN	=	0x00ff
                           008C8A   609 G$TMR0$0$0 == 0x8c8a
                           008C8A   610 _TMR0	=	0x8c8a
                           008D8B   611 G$TMR1$0$0 == 0x8d8b
                           008D8B   612 _TMR1	=	0x8d8b
                           00CDCC   613 G$TMR2$0$0 == 0xcdcc
                           00CDCC   614 _TMR2	=	0xcdcc
                           00CBCA   615 G$RCAP2$0$0 == 0xcbca
                           00CBCA   616 _RCAP2	=	0xcbca
                           009594   617 G$TMR3$0$0 == 0x9594
                           009594   618 _TMR3	=	0x9594
                           009392   619 G$TMR3RL$0$0 == 0x9392
                           009392   620 _TMR3RL	=	0x9392
                           00F5F4   621 G$TMR4$0$0 == 0xf5f4
                           00F5F4   622 _TMR4	=	0xf5f4
                           00E5E4   623 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   624 _RCAP4	=	0xe5e4
                           00BFBE   625 G$ADC0$0$0 == 0xbfbe
                           00BFBE   626 _ADC0	=	0xbfbe
                           00C5C4   627 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   628 _ADC0GT	=	0xc5c4
                           00C7C6   629 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   630 _ADC0LT	=	0xc7c6
                           00D3D2   631 G$DAC0$0$0 == 0xd3d2
                           00D3D2   632 _DAC0	=	0xd3d2
                           00D6D5   633 G$DAC1$0$0 == 0xd6d5
                           00D6D5   634 _DAC1	=	0xd6d5
                           00F9E9   635 G$PCA0$0$0 == 0xf9e9
                           00F9E9   636 _PCA0	=	0xf9e9
                           00FAEA   637 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   638 _PCA0CP0	=	0xfaea
                           00FBEB   639 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   640 _PCA0CP1	=	0xfbeb
                           00FCEC   641 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   642 _PCA0CP2	=	0xfcec
                           00FDED   643 G$PCA0CP3$0$0 == 0xfded
                           00FDED   644 _PCA0CP3	=	0xfded
                           00FEEE   645 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   646 _PCA0CP4	=	0xfeee
                                    647 ;--------------------------------------------------------
                                    648 ; special function bits
                                    649 ;--------------------------------------------------------
                                    650 	.area RSEG    (ABS,DATA)
      000000                        651 	.org 0x0000
                           000080   652 G$P0_0$0$0 == 0x0080
                           000080   653 _P0_0	=	0x0080
                           000081   654 G$P0_1$0$0 == 0x0081
                           000081   655 _P0_1	=	0x0081
                           000082   656 G$P0_2$0$0 == 0x0082
                           000082   657 _P0_2	=	0x0082
                           000083   658 G$P0_3$0$0 == 0x0083
                           000083   659 _P0_3	=	0x0083
                           000084   660 G$P0_4$0$0 == 0x0084
                           000084   661 _P0_4	=	0x0084
                           000085   662 G$P0_5$0$0 == 0x0085
                           000085   663 _P0_5	=	0x0085
                           000086   664 G$P0_6$0$0 == 0x0086
                           000086   665 _P0_6	=	0x0086
                           000087   666 G$P0_7$0$0 == 0x0087
                           000087   667 _P0_7	=	0x0087
                           000088   668 G$IT0$0$0 == 0x0088
                           000088   669 _IT0	=	0x0088
                           000089   670 G$IE0$0$0 == 0x0089
                           000089   671 _IE0	=	0x0089
                           00008A   672 G$IT1$0$0 == 0x008a
                           00008A   673 _IT1	=	0x008a
                           00008B   674 G$IE1$0$0 == 0x008b
                           00008B   675 _IE1	=	0x008b
                           00008C   676 G$TR0$0$0 == 0x008c
                           00008C   677 _TR0	=	0x008c
                           00008D   678 G$TF0$0$0 == 0x008d
                           00008D   679 _TF0	=	0x008d
                           00008E   680 G$TR1$0$0 == 0x008e
                           00008E   681 _TR1	=	0x008e
                           00008F   682 G$TF1$0$0 == 0x008f
                           00008F   683 _TF1	=	0x008f
                           000090   684 G$P1_0$0$0 == 0x0090
                           000090   685 _P1_0	=	0x0090
                           000091   686 G$P1_1$0$0 == 0x0091
                           000091   687 _P1_1	=	0x0091
                           000092   688 G$P1_2$0$0 == 0x0092
                           000092   689 _P1_2	=	0x0092
                           000093   690 G$P1_3$0$0 == 0x0093
                           000093   691 _P1_3	=	0x0093
                           000094   692 G$P1_4$0$0 == 0x0094
                           000094   693 _P1_4	=	0x0094
                           000095   694 G$P1_5$0$0 == 0x0095
                           000095   695 _P1_5	=	0x0095
                           000096   696 G$P1_6$0$0 == 0x0096
                           000096   697 _P1_6	=	0x0096
                           000097   698 G$P1_7$0$0 == 0x0097
                           000097   699 _P1_7	=	0x0097
                           000098   700 G$RI$0$0 == 0x0098
                           000098   701 _RI	=	0x0098
                           000098   702 G$RI0$0$0 == 0x0098
                           000098   703 _RI0	=	0x0098
                           000099   704 G$TI$0$0 == 0x0099
                           000099   705 _TI	=	0x0099
                           000099   706 G$TI0$0$0 == 0x0099
                           000099   707 _TI0	=	0x0099
                           00009A   708 G$RB8$0$0 == 0x009a
                           00009A   709 _RB8	=	0x009a
                           00009A   710 G$RB80$0$0 == 0x009a
                           00009A   711 _RB80	=	0x009a
                           00009B   712 G$TB8$0$0 == 0x009b
                           00009B   713 _TB8	=	0x009b
                           00009B   714 G$TB80$0$0 == 0x009b
                           00009B   715 _TB80	=	0x009b
                           00009C   716 G$REN$0$0 == 0x009c
                           00009C   717 _REN	=	0x009c
                           00009C   718 G$REN0$0$0 == 0x009c
                           00009C   719 _REN0	=	0x009c
                           00009D   720 G$SM2$0$0 == 0x009d
                           00009D   721 _SM2	=	0x009d
                           00009D   722 G$SM20$0$0 == 0x009d
                           00009D   723 _SM20	=	0x009d
                           00009D   724 G$MCE0$0$0 == 0x009d
                           00009D   725 _MCE0	=	0x009d
                           00009E   726 G$SM1$0$0 == 0x009e
                           00009E   727 _SM1	=	0x009e
                           00009E   728 G$SM10$0$0 == 0x009e
                           00009E   729 _SM10	=	0x009e
                           00009F   730 G$SM0$0$0 == 0x009f
                           00009F   731 _SM0	=	0x009f
                           00009F   732 G$SM00$0$0 == 0x009f
                           00009F   733 _SM00	=	0x009f
                           00009F   734 G$S0MODE$0$0 == 0x009f
                           00009F   735 _S0MODE	=	0x009f
                           0000A0   736 G$P2_0$0$0 == 0x00a0
                           0000A0   737 _P2_0	=	0x00a0
                           0000A1   738 G$P2_1$0$0 == 0x00a1
                           0000A1   739 _P2_1	=	0x00a1
                           0000A2   740 G$P2_2$0$0 == 0x00a2
                           0000A2   741 _P2_2	=	0x00a2
                           0000A3   742 G$P2_3$0$0 == 0x00a3
                           0000A3   743 _P2_3	=	0x00a3
                           0000A4   744 G$P2_4$0$0 == 0x00a4
                           0000A4   745 _P2_4	=	0x00a4
                           0000A5   746 G$P2_5$0$0 == 0x00a5
                           0000A5   747 _P2_5	=	0x00a5
                           0000A6   748 G$P2_6$0$0 == 0x00a6
                           0000A6   749 _P2_6	=	0x00a6
                           0000A7   750 G$P2_7$0$0 == 0x00a7
                           0000A7   751 _P2_7	=	0x00a7
                           0000A8   752 G$EX0$0$0 == 0x00a8
                           0000A8   753 _EX0	=	0x00a8
                           0000A9   754 G$ET0$0$0 == 0x00a9
                           0000A9   755 _ET0	=	0x00a9
                           0000AA   756 G$EX1$0$0 == 0x00aa
                           0000AA   757 _EX1	=	0x00aa
                           0000AB   758 G$ET1$0$0 == 0x00ab
                           0000AB   759 _ET1	=	0x00ab
                           0000AC   760 G$ES0$0$0 == 0x00ac
                           0000AC   761 _ES0	=	0x00ac
                           0000AC   762 G$ES$0$0 == 0x00ac
                           0000AC   763 _ES	=	0x00ac
                           0000AD   764 G$ET2$0$0 == 0x00ad
                           0000AD   765 _ET2	=	0x00ad
                           0000AF   766 G$EA$0$0 == 0x00af
                           0000AF   767 _EA	=	0x00af
                           0000B0   768 G$P3_0$0$0 == 0x00b0
                           0000B0   769 _P3_0	=	0x00b0
                           0000B1   770 G$P3_1$0$0 == 0x00b1
                           0000B1   771 _P3_1	=	0x00b1
                           0000B2   772 G$P3_2$0$0 == 0x00b2
                           0000B2   773 _P3_2	=	0x00b2
                           0000B3   774 G$P3_3$0$0 == 0x00b3
                           0000B3   775 _P3_3	=	0x00b3
                           0000B4   776 G$P3_4$0$0 == 0x00b4
                           0000B4   777 _P3_4	=	0x00b4
                           0000B5   778 G$P3_5$0$0 == 0x00b5
                           0000B5   779 _P3_5	=	0x00b5
                           0000B6   780 G$P3_6$0$0 == 0x00b6
                           0000B6   781 _P3_6	=	0x00b6
                           0000B7   782 G$P3_7$0$0 == 0x00b7
                           0000B7   783 _P3_7	=	0x00b7
                           0000B8   784 G$PX0$0$0 == 0x00b8
                           0000B8   785 _PX0	=	0x00b8
                           0000B9   786 G$PT0$0$0 == 0x00b9
                           0000B9   787 _PT0	=	0x00b9
                           0000BA   788 G$PX1$0$0 == 0x00ba
                           0000BA   789 _PX1	=	0x00ba
                           0000BB   790 G$PT1$0$0 == 0x00bb
                           0000BB   791 _PT1	=	0x00bb
                           0000BC   792 G$PS0$0$0 == 0x00bc
                           0000BC   793 _PS0	=	0x00bc
                           0000BC   794 G$PS$0$0 == 0x00bc
                           0000BC   795 _PS	=	0x00bc
                           0000BD   796 G$PT2$0$0 == 0x00bd
                           0000BD   797 _PT2	=	0x00bd
                           0000C0   798 G$SMBTOE$0$0 == 0x00c0
                           0000C0   799 _SMBTOE	=	0x00c0
                           0000C1   800 G$SMBFTE$0$0 == 0x00c1
                           0000C1   801 _SMBFTE	=	0x00c1
                           0000C2   802 G$AA$0$0 == 0x00c2
                           0000C2   803 _AA	=	0x00c2
                           0000C3   804 G$SI$0$0 == 0x00c3
                           0000C3   805 _SI	=	0x00c3
                           0000C4   806 G$STO$0$0 == 0x00c4
                           0000C4   807 _STO	=	0x00c4
                           0000C5   808 G$STA$0$0 == 0x00c5
                           0000C5   809 _STA	=	0x00c5
                           0000C6   810 G$ENSMB$0$0 == 0x00c6
                           0000C6   811 _ENSMB	=	0x00c6
                           0000C7   812 G$BUSY$0$0 == 0x00c7
                           0000C7   813 _BUSY	=	0x00c7
                           0000C8   814 G$CPRL2$0$0 == 0x00c8
                           0000C8   815 _CPRL2	=	0x00c8
                           0000C9   816 G$CT2$0$0 == 0x00c9
                           0000C9   817 _CT2	=	0x00c9
                           0000CA   818 G$TR2$0$0 == 0x00ca
                           0000CA   819 _TR2	=	0x00ca
                           0000CB   820 G$EXEN2$0$0 == 0x00cb
                           0000CB   821 _EXEN2	=	0x00cb
                           0000CC   822 G$TCLK$0$0 == 0x00cc
                           0000CC   823 _TCLK	=	0x00cc
                           0000CD   824 G$RCLK$0$0 == 0x00cd
                           0000CD   825 _RCLK	=	0x00cd
                           0000CE   826 G$EXF2$0$0 == 0x00ce
                           0000CE   827 _EXF2	=	0x00ce
                           0000CF   828 G$TF2$0$0 == 0x00cf
                           0000CF   829 _TF2	=	0x00cf
                           0000D0   830 G$P$0$0 == 0x00d0
                           0000D0   831 _P	=	0x00d0
                           0000D1   832 G$F1$0$0 == 0x00d1
                           0000D1   833 _F1	=	0x00d1
                           0000D2   834 G$OV$0$0 == 0x00d2
                           0000D2   835 _OV	=	0x00d2
                           0000D3   836 G$RS0$0$0 == 0x00d3
                           0000D3   837 _RS0	=	0x00d3
                           0000D4   838 G$RS1$0$0 == 0x00d4
                           0000D4   839 _RS1	=	0x00d4
                           0000D5   840 G$F0$0$0 == 0x00d5
                           0000D5   841 _F0	=	0x00d5
                           0000D6   842 G$AC$0$0 == 0x00d6
                           0000D6   843 _AC	=	0x00d6
                           0000D7   844 G$CY$0$0 == 0x00d7
                           0000D7   845 _CY	=	0x00d7
                           0000D8   846 G$CCF0$0$0 == 0x00d8
                           0000D8   847 _CCF0	=	0x00d8
                           0000D9   848 G$CCF1$0$0 == 0x00d9
                           0000D9   849 _CCF1	=	0x00d9
                           0000DA   850 G$CCF2$0$0 == 0x00da
                           0000DA   851 _CCF2	=	0x00da
                           0000DB   852 G$CCF3$0$0 == 0x00db
                           0000DB   853 _CCF3	=	0x00db
                           0000DC   854 G$CCF4$0$0 == 0x00dc
                           0000DC   855 _CCF4	=	0x00dc
                           0000DE   856 G$CR$0$0 == 0x00de
                           0000DE   857 _CR	=	0x00de
                           0000DF   858 G$CF$0$0 == 0x00df
                           0000DF   859 _CF	=	0x00df
                           0000E8   860 G$ADLJST$0$0 == 0x00e8
                           0000E8   861 _ADLJST	=	0x00e8
                           0000E8   862 G$AD0LJST$0$0 == 0x00e8
                           0000E8   863 _AD0LJST	=	0x00e8
                           0000E9   864 G$ADWINT$0$0 == 0x00e9
                           0000E9   865 _ADWINT	=	0x00e9
                           0000E9   866 G$AD0WINT$0$0 == 0x00e9
                           0000E9   867 _AD0WINT	=	0x00e9
                           0000EA   868 G$ADSTM0$0$0 == 0x00ea
                           0000EA   869 _ADSTM0	=	0x00ea
                           0000EA   870 G$AD0CM0$0$0 == 0x00ea
                           0000EA   871 _AD0CM0	=	0x00ea
                           0000EB   872 G$ADSTM1$0$0 == 0x00eb
                           0000EB   873 _ADSTM1	=	0x00eb
                           0000EB   874 G$AD0CM1$0$0 == 0x00eb
                           0000EB   875 _AD0CM1	=	0x00eb
                           0000EC   876 G$ADBUSY$0$0 == 0x00ec
                           0000EC   877 _ADBUSY	=	0x00ec
                           0000EC   878 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   879 _AD0BUSY	=	0x00ec
                           0000ED   880 G$ADCINT$0$0 == 0x00ed
                           0000ED   881 _ADCINT	=	0x00ed
                           0000ED   882 G$AD0INT$0$0 == 0x00ed
                           0000ED   883 _AD0INT	=	0x00ed
                           0000EE   884 G$ADCTM$0$0 == 0x00ee
                           0000EE   885 _ADCTM	=	0x00ee
                           0000EE   886 G$AD0TM$0$0 == 0x00ee
                           0000EE   887 _AD0TM	=	0x00ee
                           0000EF   888 G$ADCEN$0$0 == 0x00ef
                           0000EF   889 _ADCEN	=	0x00ef
                           0000EF   890 G$AD0EN$0$0 == 0x00ef
                           0000EF   891 _AD0EN	=	0x00ef
                           0000F8   892 G$SPIEN$0$0 == 0x00f8
                           0000F8   893 _SPIEN	=	0x00f8
                           0000F9   894 G$MSTEN$0$0 == 0x00f9
                           0000F9   895 _MSTEN	=	0x00f9
                           0000FA   896 G$SLVSEL$0$0 == 0x00fa
                           0000FA   897 _SLVSEL	=	0x00fa
                           0000FB   898 G$TXBSY$0$0 == 0x00fb
                           0000FB   899 _TXBSY	=	0x00fb
                           0000FC   900 G$RXOVRN$0$0 == 0x00fc
                           0000FC   901 _RXOVRN	=	0x00fc
                           0000FD   902 G$MODF$0$0 == 0x00fd
                           0000FD   903 _MODF	=	0x00fd
                           0000FE   904 G$WCOL$0$0 == 0x00fe
                           0000FE   905 _WCOL	=	0x00fe
                           0000FF   906 G$SPIF$0$0 == 0x00ff
                           0000FF   907 _SPIF	=	0x00ff
                           0000A0   908 G$SS0$0$0 == 0x00a0
                           0000A0   909 _SS0	=	0x00a0
                           0000A1   910 G$SS1$0$0 == 0x00a1
                           0000A1   911 _SS1	=	0x00a1
                           0000B0   912 G$PB0$0$0 == 0x00b0
                           0000B0   913 _PB0	=	0x00b0
                           0000B2   914 G$LED3$0$0 == 0x00b2
                           0000B2   915 _LED3	=	0x00b2
                           0000B3   916 G$BILED0$0$0 == 0x00b3
                           0000B3   917 _BILED0	=	0x00b3
                           0000B4   918 G$BILED1$0$0 == 0x00b4
                           0000B4   919 _BILED1	=	0x00b4
                           0000B5   920 G$LED1$0$0 == 0x00b5
                           0000B5   921 _LED1	=	0x00b5
                           0000B6   922 G$LED0$0$0 == 0x00b6
                           0000B6   923 _LED0	=	0x00b6
                           0000B7   924 G$LED2$0$0 == 0x00b7
                           0000B7   925 _LED2	=	0x00b7
                                    926 ;--------------------------------------------------------
                                    927 ; overlayable register banks
                                    928 ;--------------------------------------------------------
                                    929 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        930 	.ds 8
                                    931 ;--------------------------------------------------------
                                    932 ; internal ram data
                                    933 ;--------------------------------------------------------
                                    934 	.area DSEG    (DATA)
                           000000   935 G$counts$0$0==.
      000000                        936 _counts::
      000000                        937 	.ds 2
                           000002   938 G$var$0$0==.
      000002                        939 _var::
      000002                        940 	.ds 2
                           000004   941 G$n$0$0==.
      000004                        942 _n::
      000004                        943 	.ds 1
                           000005   944 G$totalPoints$0$0==.
      000005                        945 _totalPoints::
      000005                        946 	.ds 2
                           000007   947 G$randomNumber$0$0==.
      000007                        948 _randomNumber::
      000007                        949 	.ds 2
                           000009   950 G$length$0$0==.
      000009                        951 _length::
      000009                        952 	.ds 1
                           00000A   953 G$ADC_value$0$0==.
      00000A                        954 _ADC_value::
      00000A                        955 	.ds 2
                           00000C   956 G$error$0$0==.
      00000C                        957 _error::
      00000C                        958 	.ds 2
                           00000E   959 G$score$0$0==.
      00000E                        960 _score::
      00000E                        961 	.ds 2
                           000010   962 G$buttonPresses$0$0==.
      000010                        963 _buttonPresses::
      000010                        964 	.ds 2
                           000012   965 G$tmpCount$0$0==.
      000012                        966 _tmpCount::
      000012                        967 	.ds 2
                           000014   968 G$overflows$0$0==.
      000014                        969 _overflows::
      000014                        970 	.ds 10
                           00001E   971 G$numLEDs$0$0==.
      00001E                        972 _numLEDs::
      00001E                        973 	.ds 2
                           000020   974 G$tries$0$0==.
      000020                        975 _tries::
      000020                        976 	.ds 2
                           000022   977 G$ADC_mapped$0$0==.
      000022                        978 _ADC_mapped::
      000022                        979 	.ds 1
                           000023   980 G$desiredValue$0$0==.
      000023                        981 _desiredValue::
      000023                        982 	.ds 2
                           000025   983 LLab2.aligned_alloc$size$1$39==.
      000025                        984 _aligned_alloc_PARM_2:
      000025                        985 	.ds 2
                           000027   986 LLab2.SetAllLEDs$sloc0$1$0==.
      000027                        987 _SetAllLEDs_sloc0_1_0:
      000027                        988 	.ds 1
                           000028   989 LLab2.MapADC$low$1$121==.
      000028                        990 _MapADC_PARM_2:
      000028                        991 	.ds 1
                           000029   992 LLab2.MapADC$high$1$121==.
      000029                        993 _MapADC_PARM_3:
      000029                        994 	.ds 1
                           00002A   995 LLab2.CompareVals$expected$1$138==.
      00002A                        996 _CompareVals_PARM_2:
      00002A                        997 	.ds 1
                                    998 ;--------------------------------------------------------
                                    999 ; overlayable items in internal ram 
                                   1000 ;--------------------------------------------------------
                                   1001 	.area	OSEG    (OVR,DATA)
                                   1002 	.area	OSEG    (OVR,DATA)
                                   1003 	.area	OSEG    (OVR,DATA)
                                   1004 	.area	OSEG    (OVR,DATA)
                                   1005 	.area	OSEG    (OVR,DATA)
                                   1006 ;--------------------------------------------------------
                                   1007 ; Stack segment in internal ram 
                                   1008 ;--------------------------------------------------------
                                   1009 	.area	SSEG
      000000                       1010 __start__stack:
      000000                       1011 	.ds	1
                                   1012 
                                   1013 ;--------------------------------------------------------
                                   1014 ; indirectly addressable internal ram data
                                   1015 ;--------------------------------------------------------
                                   1016 	.area ISEG    (DATA)
                                   1017 ;--------------------------------------------------------
                                   1018 ; absolute internal ram data
                                   1019 ;--------------------------------------------------------
                                   1020 	.area IABS    (ABS,DATA)
                                   1021 	.area IABS    (ABS,DATA)
                                   1022 ;--------------------------------------------------------
                                   1023 ; bit data
                                   1024 ;--------------------------------------------------------
                                   1025 	.area BSEG    (BIT)
                                   1026 ;--------------------------------------------------------
                                   1027 ; paged external ram data
                                   1028 ;--------------------------------------------------------
                                   1029 	.area PSEG    (PAG,XDATA)
                                   1030 ;--------------------------------------------------------
                                   1031 ; external ram data
                                   1032 ;--------------------------------------------------------
                                   1033 	.area XSEG    (XDATA)
                                   1034 ;--------------------------------------------------------
                                   1035 ; absolute external ram data
                                   1036 ;--------------------------------------------------------
                                   1037 	.area XABS    (ABS,XDATA)
                                   1038 ;--------------------------------------------------------
                                   1039 ; external initialized ram data
                                   1040 ;--------------------------------------------------------
                                   1041 	.area XISEG   (XDATA)
                                   1042 	.area HOME    (CODE)
                                   1043 	.area GSINIT0 (CODE)
                                   1044 	.area GSINIT1 (CODE)
                                   1045 	.area GSINIT2 (CODE)
                                   1046 	.area GSINIT3 (CODE)
                                   1047 	.area GSINIT4 (CODE)
                                   1048 	.area GSINIT5 (CODE)
                                   1049 	.area GSINIT  (CODE)
                                   1050 	.area GSFINAL (CODE)
                                   1051 	.area CSEG    (CODE)
                                   1052 ;--------------------------------------------------------
                                   1053 ; interrupt vector 
                                   1054 ;--------------------------------------------------------
                                   1055 	.area HOME    (CODE)
      000000                       1056 __interrupt_vect:
      000000 02r00r00         [24] 1057 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1058 	reti
      000004                       1059 	.ds	7
      00000B 02r09r29         [24] 1060 	ljmp	_Timer0_ISR
                                   1061 ;--------------------------------------------------------
                                   1062 ; global & static initialisations
                                   1063 ;--------------------------------------------------------
                                   1064 	.area HOME    (CODE)
                                   1065 	.area GSINIT  (CODE)
                                   1066 	.area GSFINAL (CODE)
                                   1067 	.area GSINIT  (CODE)
                                   1068 	.globl __sdcc_gsinit_startup
                                   1069 	.globl __sdcc_program_startup
                                   1070 	.globl __start__stack
                                   1071 	.globl __mcs51_genXINIT
                                   1072 	.globl __mcs51_genXRAMCLEAR
                                   1073 	.globl __mcs51_genRAMCLEAR
                           000000  1074 	C$Lab2.c$49$1$139 ==.
                                   1075 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:49: unsigned int counts = 0;
      000000 E4               [12] 1076 	clr	a
      000001 F5*00            [12] 1077 	mov	_counts,a
      000003 F5*01            [12] 1078 	mov	(_counts + 1),a
                           000005  1079 	C$Lab2.c$51$1$139 ==.
                                   1080 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:51: char n = 0;
                                   1081 ;	1-genFromRTrack replaced	mov	_n,#0x00
      000005 F5*04            [12] 1082 	mov	_n,a
                           000007  1083 	C$Lab2.c$60$1$139 ==.
                                   1084 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:60: int overflows[5] = {508,457,413,372,339}; // create an array that hold overflows values for 1.5, 1.35, 1.22, 1.1, and 1 second respectively;
      000007 75*14 FC         [24] 1085 	mov	(_overflows + 0),#0xfc
      00000A 75*15 01         [24] 1086 	mov	(_overflows + 1),#0x01
      00000D 75*16 C9         [24] 1087 	mov	((_overflows + 0x0002) + 0),#0xc9
      000010 75*17 01         [24] 1088 	mov	((_overflows + 0x0002) + 1),#0x01
      000013 75*18 9D         [24] 1089 	mov	((_overflows + 0x0004) + 0),#0x9d
      000016 75*19 01         [24] 1090 	mov	((_overflows + 0x0004) + 1),#0x01
      000019 75*1A 74         [24] 1091 	mov	((_overflows + 0x0006) + 0),#0x74
      00001C 75*1B 01         [24] 1092 	mov	((_overflows + 0x0006) + 1),#0x01
      00001F 75*1C 53         [24] 1093 	mov	((_overflows + 0x0008) + 0),#0x53
      000022 75*1D 01         [24] 1094 	mov	((_overflows + 0x0008) + 1),#0x01
                                   1095 	.area GSFINAL (CODE)
      000000 02r00r0E         [24] 1096 	ljmp	__sdcc_program_startup
                                   1097 ;--------------------------------------------------------
                                   1098 ; Home
                                   1099 ;--------------------------------------------------------
                                   1100 	.area HOME    (CODE)
                                   1101 	.area HOME    (CODE)
      00000E                       1102 __sdcc_program_startup:
      00000E 02r00r7B         [24] 1103 	ljmp	_main
                                   1104 ;	return from main will return to caller
                                   1105 ;--------------------------------------------------------
                                   1106 ; code
                                   1107 ;--------------------------------------------------------
                                   1108 	.area CSEG    (CODE)
                                   1109 ;------------------------------------------------------------
                                   1110 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1111 ;------------------------------------------------------------
                                   1112 ;i                         Allocated to registers r6 r7 
                                   1113 ;------------------------------------------------------------
                           000000  1114 	G$SYSCLK_Init$0$0 ==.
                           000000  1115 	C$c8051_SDCC.h$62$0$0 ==.
                                   1116 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:62: void SYSCLK_Init(void)
                                   1117 ;	-----------------------------------------
                                   1118 ;	 function SYSCLK_Init
                                   1119 ;	-----------------------------------------
      000000                       1120 _SYSCLK_Init:
                           000007  1121 	ar7 = 0x07
                           000006  1122 	ar6 = 0x06
                           000005  1123 	ar5 = 0x05
                           000004  1124 	ar4 = 0x04
                           000003  1125 	ar3 = 0x03
                           000002  1126 	ar2 = 0x02
                           000001  1127 	ar1 = 0x01
                           000000  1128 	ar0 = 0x00
                           000000  1129 	C$c8051_SDCC.h$66$1$2 ==.
                                   1130 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1131 	mov	_OSCXCN,#0x67
                           000003  1132 	C$c8051_SDCC.h$69$1$2 ==.
                                   1133 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1134 	mov	r6,#0x00
      000005 7F 01            [12] 1135 	mov	r7,#0x01
      000007                       1136 00107$:
      000007 EE               [12] 1137 	mov	a,r6
      000008 24 FF            [12] 1138 	add	a,#0xff
      00000A FC               [12] 1139 	mov	r4,a
      00000B EF               [12] 1140 	mov	a,r7
      00000C 34 FF            [12] 1141 	addc	a,#0xff
      00000E FD               [12] 1142 	mov	r5,a
      00000F 8C 06            [24] 1143 	mov	ar6,r4
      000011 8D 07            [24] 1144 	mov	ar7,r5
      000013 EC               [12] 1145 	mov	a,r4
      000014 4D               [12] 1146 	orl	a,r5
      000015 70 F0            [24] 1147 	jnz	00107$
                           000017  1148 	C$c8051_SDCC.h$71$1$2 ==.
                                   1149 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1150 00102$:
      000017 E5 B1            [12] 1151 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1152 	jnb	acc.7,00102$
                           00001C  1153 	C$c8051_SDCC.h$73$1$2 ==.
                                   1154 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1155 	mov	_OSCICN,#0x88
                           00001F  1156 	C$c8051_SDCC.h$76$1$2 ==.
                           00001F  1157 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1158 	ret
                                   1159 ;------------------------------------------------------------
                                   1160 ;Allocation info for local variables in function 'UART0_Init'
                                   1161 ;------------------------------------------------------------
                           000020  1162 	G$UART0_Init$0$0 ==.
                           000020  1163 	C$c8051_SDCC.h$84$1$2 ==.
                                   1164 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:84: void UART0_Init(void)
                                   1165 ;	-----------------------------------------
                                   1166 ;	 function UART0_Init
                                   1167 ;	-----------------------------------------
      000020                       1168 _UART0_Init:
                           000020  1169 	C$c8051_SDCC.h$86$1$4 ==.
                                   1170 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1171 	mov	_SCON0,#0x50
                           000023  1172 	C$c8051_SDCC.h$87$1$4 ==.
                                   1173 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:87: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1174 	mov	_TMOD,#0x20
                           000026  1175 	C$c8051_SDCC.h$88$1$4 ==.
                                   1176 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1177 	mov	_TH1,#0xdc
                           000029  1178 	C$c8051_SDCC.h$89$1$4 ==.
                                   1179 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1180 	setb	_TR1
                           00002B  1181 	C$c8051_SDCC.h$90$1$4 ==.
                                   1182 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:90: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1183 	orl	_CKCON,#0x10
                           00002E  1184 	C$c8051_SDCC.h$91$1$4 ==.
                                   1185 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1186 	orl	_PCON,#0x80
                           000031  1187 	C$c8051_SDCC.h$93$1$4 ==.
                                   1188 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:93: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1189 	setb	_TI0
                           000033  1190 	C$c8051_SDCC.h$94$1$4 ==.
                                   1191 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:94: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1192 	orl	_P0MDOUT,#0x01
                           000036  1193 	C$c8051_SDCC.h$95$1$4 ==.
                           000036  1194 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1195 	ret
                                   1196 ;------------------------------------------------------------
                                   1197 ;Allocation info for local variables in function 'Sys_Init'
                                   1198 ;------------------------------------------------------------
                           000037  1199 	G$Sys_Init$0$0 ==.
                           000037  1200 	C$c8051_SDCC.h$103$1$4 ==.
                                   1201 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:103: void Sys_Init(void)
                                   1202 ;	-----------------------------------------
                                   1203 ;	 function Sys_Init
                                   1204 ;	-----------------------------------------
      000037                       1205 _Sys_Init:
                           000037  1206 	C$c8051_SDCC.h$105$1$6 ==.
                                   1207 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:105: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1208 	mov	_WDTCN,#0xde
                           00003A  1209 	C$c8051_SDCC.h$106$1$6 ==.
                                   1210 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:106: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1211 	mov	_WDTCN,#0xad
                           00003D  1212 	C$c8051_SDCC.h$108$1$6 ==.
                                   1213 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1214 	lcall	_SYSCLK_Init
                           000040  1215 	C$c8051_SDCC.h$109$1$6 ==.
                                   1216 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:109: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1217 	lcall	_UART0_Init
                           000043  1218 	C$c8051_SDCC.h$111$1$6 ==.
                                   1219 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1220 	orl	_XBR0,#0x04
                           000046  1221 	C$c8051_SDCC.h$112$1$6 ==.
                                   1222 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1223 	orl	_XBR2,#0x40
                           000049  1224 	C$c8051_SDCC.h$113$1$6 ==.
                           000049  1225 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1226 	ret
                                   1227 ;------------------------------------------------------------
                                   1228 ;Allocation info for local variables in function 'putchar'
                                   1229 ;------------------------------------------------------------
                                   1230 ;c                         Allocated to registers r7 
                                   1231 ;------------------------------------------------------------
                           00004A  1232 	G$putchar$0$0 ==.
                           00004A  1233 	C$c8051_SDCC.h$129$1$6 ==.
                                   1234 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: void putchar(char c)
                                   1235 ;	-----------------------------------------
                                   1236 ;	 function putchar
                                   1237 ;	-----------------------------------------
      00004A                       1238 _putchar:
      00004A AF 82            [24] 1239 	mov	r7,dpl
                           00004C  1240 	C$c8051_SDCC.h$132$1$8 ==.
                                   1241 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:132: while (!TI0); 
      00004C                       1242 00101$:
                           00004C  1243 	C$c8051_SDCC.h$133$1$8 ==.
                                   1244 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:133: TI0 = 0;
      00004C 10 99 02         [24] 1245 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1246 	sjmp	00101$
      000051                       1247 00112$:
                           000051  1248 	C$c8051_SDCC.h$134$1$8 ==.
                                   1249 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:134: SBUF0 = c;
      000051 8F 99            [24] 1250 	mov	_SBUF0,r7
                           000053  1251 	C$c8051_SDCC.h$135$1$8 ==.
                           000053  1252 	XG$putchar$0$0 ==.
      000053 22               [24] 1253 	ret
                                   1254 ;------------------------------------------------------------
                                   1255 ;Allocation info for local variables in function 'getchar'
                                   1256 ;------------------------------------------------------------
                                   1257 ;c                         Allocated to registers r7 
                                   1258 ;------------------------------------------------------------
                           000054  1259 	G$getchar$0$0 ==.
                           000054  1260 	C$c8051_SDCC.h$154$1$8 ==.
                                   1261 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:154: char getchar(void)
                                   1262 ;	-----------------------------------------
                                   1263 ;	 function getchar
                                   1264 ;	-----------------------------------------
      000054                       1265 _getchar:
                           000054  1266 	C$c8051_SDCC.h$157$1$10 ==.
                                   1267 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:157: while (!RI0);
      000054                       1268 00101$:
                           000054  1269 	C$c8051_SDCC.h$158$1$10 ==.
                                   1270 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:158: RI0 = 0;
      000054 10 98 02         [24] 1271 	jbc	_RI0,00112$
      000057 80 FB            [24] 1272 	sjmp	00101$
      000059                       1273 00112$:
                           000059  1274 	C$c8051_SDCC.h$159$1$10 ==.
                                   1275 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:159: c = SBUF0;
      000059 AF 99            [24] 1276 	mov	r7,_SBUF0
                           00005B  1277 	C$c8051_SDCC.h$160$1$10 ==.
                                   1278 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:160: putchar(c);                          // echo to terminal
      00005B 8F 82            [24] 1279 	mov	dpl,r7
      00005D C0 07            [24] 1280 	push	ar7
      00005F 12r00r4A         [24] 1281 	lcall	_putchar
      000062 D0 07            [24] 1282 	pop	ar7
                           000064  1283 	C$c8051_SDCC.h$161$1$10 ==.
                                   1284 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:161: return c;
      000064 8F 82            [24] 1285 	mov	dpl,r7
                           000066  1286 	C$c8051_SDCC.h$162$1$10 ==.
                           000066  1287 	XG$getchar$0$0 ==.
      000066 22               [24] 1288 	ret
                                   1289 ;------------------------------------------------------------
                                   1290 ;Allocation info for local variables in function 'getchar_nw'
                                   1291 ;------------------------------------------------------------
                                   1292 ;c                         Allocated to registers 
                                   1293 ;------------------------------------------------------------
                           000067  1294 	G$getchar_nw$0$0 ==.
                           000067  1295 	C$c8051_SDCC.h$168$1$10 ==.
                                   1296 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:168: char getchar_nw(void)
                                   1297 ;	-----------------------------------------
                                   1298 ;	 function getchar_nw
                                   1299 ;	-----------------------------------------
      000067                       1300 _getchar_nw:
                           000067  1301 	C$c8051_SDCC.h$171$1$12 ==.
                                   1302 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:171: if (!RI0) return 0xFF;
      000067 20 98 05         [24] 1303 	jb	_RI0,00102$
      00006A 75 82 FF         [24] 1304 	mov	dpl,#0xff
      00006D 80 0B            [24] 1305 	sjmp	00104$
      00006F                       1306 00102$:
                           00006F  1307 	C$c8051_SDCC.h$174$2$13 ==.
                                   1308 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:174: RI0 = 0;
      00006F C2 98            [12] 1309 	clr	_RI0
                           000071  1310 	C$c8051_SDCC.h$175$2$13 ==.
                                   1311 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:175: c = SBUF0;
      000071 85 99 82         [24] 1312 	mov	dpl,_SBUF0
                           000074  1313 	C$c8051_SDCC.h$176$2$13 ==.
                                   1314 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:176: putchar(c);                          // echo to terminal
      000074 12r00r4A         [24] 1315 	lcall	_putchar
                           000077  1316 	C$c8051_SDCC.h$177$2$13 ==.
                                   1317 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:177: return SBUF0;
      000077 85 99 82         [24] 1318 	mov	dpl,_SBUF0
      00007A                       1319 00104$:
                           00007A  1320 	C$c8051_SDCC.h$179$1$12 ==.
                           00007A  1321 	XG$getchar_nw$0$0 ==.
      00007A 22               [24] 1322 	ret
                                   1323 ;------------------------------------------------------------
                                   1324 ;Allocation info for local variables in function 'main'
                                   1325 ;------------------------------------------------------------
                           00007B  1326 	G$main$0$0 ==.
                           00007B  1327 	C$Lab2.c$67$1$12 ==.
                                   1328 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:67: void main(void)
                                   1329 ;	-----------------------------------------
                                   1330 ;	 function main
                                   1331 ;	-----------------------------------------
      00007B                       1332 _main:
                           00007B  1333 	C$Lab2.c$69$1$68 ==.
                                   1334 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:69: Sys_Init();      // System Initialization
      00007B 12r00r37         [24] 1335 	lcall	_Sys_Init
                           00007E  1336 	C$Lab2.c$70$1$68 ==.
                                   1337 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:70: Port_Init();     // Initialize ports 2 and 3 
      00007E 12r01r54         [24] 1338 	lcall	_Port_Init
                           000081  1339 	C$Lab2.c$71$1$68 ==.
                                   1340 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:71: Interrupt_Init(); // Initialize interrupts
      000081 12r01r75         [24] 1341 	lcall	_Interrupt_Init
                           000084  1342 	C$Lab2.c$72$1$68 ==.
                                   1343 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:72: Timer_Init();    // Initialize Timer 0 
      000084 12r01r64         [24] 1344 	lcall	_Timer_Init
                           000087  1345 	C$Lab2.c$73$1$68 ==.
                                   1346 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:73: ADC1_Init();	// Initialize ADC1
      000087 12r01r79         [24] 1347 	lcall	_ADC1_Init
                           00008A  1348 	C$Lab2.c$75$1$68 ==.
                                   1349 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:75: while(1) {
      00008A                       1350 00131$:
                           00008A  1351 	C$Lab2.c$76$2$69 ==.
                                   1352 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:76: printf("\r\n\nSelect a mode using the slide switches.\r\nPress the pushbutton to select a mode, push it again to confirm.");
      00008A 74r00            [12] 1353 	mov	a,#___str_0
      00008C C0 E0            [24] 1354 	push	acc
      00008E 74s00            [12] 1355 	mov	a,#(___str_0 >> 8)
      000090 C0 E0            [24] 1356 	push	acc
      000092 74 80            [12] 1357 	mov	a,#0x80
      000094 C0 E0            [24] 1358 	push	acc
      000096 12r00r00         [24] 1359 	lcall	_printf
      000099 15 81            [12] 1360 	dec	sp
      00009B 15 81            [12] 1361 	dec	sp
      00009D 15 81            [12] 1362 	dec	sp
                           00009F  1363 	C$Lab2.c$78$2$69 ==.
                                   1364 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:78: TR0 = 1;
      00009F D2 8C            [12] 1365 	setb	_TR0
                           0000A1  1366 	C$Lab2.c$80$2$69 ==.
                                   1367 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:80: while(DebounceButton()==0);
      0000A1                       1368 00101$:
      0000A1 12r0Ar79         [24] 1369 	lcall	_DebounceButton
      0000A4 E5 82            [12] 1370 	mov	a,dpl
      0000A6 60 F9            [24] 1371 	jz	00101$
                           0000A8  1372 	C$Lab2.c$82$2$69 ==.
                                   1373 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:82: n = counts;
      0000A8 85*00*04         [24] 1374 	mov	_n,_counts
                           0000AB  1375 	C$Lab2.c$83$2$69 ==.
                                   1376 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:83: srand(n);
      0000AB AE*04            [24] 1377 	mov	r6,_n
      0000AD 7F 00            [12] 1378 	mov	r7,#0x00
      0000AF 8E 82            [24] 1379 	mov	dpl,r6
      0000B1 8F 83            [24] 1380 	mov	dph,r7
      0000B3 12r00r00         [24] 1381 	lcall	_srand
                           0000B6  1382 	C$Lab2.c$85$4$74 ==.
                                   1383 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:85: do{
      0000B6                       1384 00116$:
                           0000B6  1385 	C$Lab2.c$86$3$70 ==.
                                   1386 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:86: if (!SS0 && SS1) {
      0000B6 20 A0 1A         [24] 1387 	jb	_SS0,00113$
      0000B9 30 A1 17         [24] 1388 	jnb	_SS1,00113$
                           0000BC  1389 	C$Lab2.c$87$4$71 ==.
                                   1390 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:87: printf("\r\nMode 1: Slide switch 1 is ON, slide switch 2 is OFF");
      0000BC 74r6D            [12] 1391 	mov	a,#___str_1
      0000BE C0 E0            [24] 1392 	push	acc
      0000C0 74s00            [12] 1393 	mov	a,#(___str_1 >> 8)
      0000C2 C0 E0            [24] 1394 	push	acc
      0000C4 74 80            [12] 1395 	mov	a,#0x80
      0000C6 C0 E0            [24] 1396 	push	acc
      0000C8 12r00r00         [24] 1397 	lcall	_printf
      0000CB 15 81            [12] 1398 	dec	sp
      0000CD 15 81            [12] 1399 	dec	sp
      0000CF 15 81            [12] 1400 	dec	sp
      0000D1 80 4F            [24] 1401 	sjmp	00117$
      0000D3                       1402 00113$:
                           0000D3  1403 	C$Lab2.c$90$3$70 ==.
                                   1404 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:90: else if (SS0 && !SS1) {
      0000D3 30 A0 1A         [24] 1405 	jnb	_SS0,00109$
      0000D6 20 A1 17         [24] 1406 	jb	_SS1,00109$
                           0000D9  1407 	C$Lab2.c$91$4$72 ==.
                                   1408 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:91: printf("\r\nMode 2: Slide switch 1 is OFF, slide switch 2 is ON");
      0000D9 74rA3            [12] 1409 	mov	a,#___str_2
      0000DB C0 E0            [24] 1410 	push	acc
      0000DD 74s00            [12] 1411 	mov	a,#(___str_2 >> 8)
      0000DF C0 E0            [24] 1412 	push	acc
      0000E1 74 80            [12] 1413 	mov	a,#0x80
      0000E3 C0 E0            [24] 1414 	push	acc
      0000E5 12r00r00         [24] 1415 	lcall	_printf
      0000E8 15 81            [12] 1416 	dec	sp
      0000EA 15 81            [12] 1417 	dec	sp
      0000EC 15 81            [12] 1418 	dec	sp
      0000EE 80 32            [24] 1419 	sjmp	00117$
      0000F0                       1420 00109$:
                           0000F0  1421 	C$Lab2.c$94$3$70 ==.
                                   1422 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:94: else if (!SS0 && !SS1) {
      0000F0 20 A0 1A         [24] 1423 	jb	_SS0,00105$
      0000F3 20 A1 17         [24] 1424 	jb	_SS1,00105$
                           0000F6  1425 	C$Lab2.c$95$4$73 ==.
                                   1426 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:95: printf("\r\nMode 3: Slide switch 1 is ON, slide switch 2 is ON");
      0000F6 74rD9            [12] 1427 	mov	a,#___str_3
      0000F8 C0 E0            [24] 1428 	push	acc
      0000FA 74s00            [12] 1429 	mov	a,#(___str_3 >> 8)
      0000FC C0 E0            [24] 1430 	push	acc
      0000FE 74 80            [12] 1431 	mov	a,#0x80
      000100 C0 E0            [24] 1432 	push	acc
      000102 12r00r00         [24] 1433 	lcall	_printf
      000105 15 81            [12] 1434 	dec	sp
      000107 15 81            [12] 1435 	dec	sp
      000109 15 81            [12] 1436 	dec	sp
      00010B 80 15            [24] 1437 	sjmp	00117$
      00010D                       1438 00105$:
                           00010D  1439 	C$Lab2.c$99$4$74 ==.
                                   1440 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:99: printf("\r\nOFF: Slide switch 1 is OFF, slide switch 2 is OFF");
      00010D 74r0E            [12] 1441 	mov	a,#___str_4
      00010F C0 E0            [24] 1442 	push	acc
      000111 74s01            [12] 1443 	mov	a,#(___str_4 >> 8)
      000113 C0 E0            [24] 1444 	push	acc
      000115 74 80            [12] 1445 	mov	a,#0x80
      000117 C0 E0            [24] 1446 	push	acc
      000119 12r00r00         [24] 1447 	lcall	_printf
      00011C 15 81            [12] 1448 	dec	sp
      00011E 15 81            [12] 1449 	dec	sp
      000120 15 81            [12] 1450 	dec	sp
      000122                       1451 00117$:
                           000122  1452 	C$Lab2.c$101$2$69 ==.
                                   1453 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:101: } while(DebounceButton()==0);
      000122 12r0Ar79         [24] 1454 	lcall	_DebounceButton
      000125 E5 82            [12] 1455 	mov	a,dpl
      000127 60 8D            [24] 1456 	jz	00116$
                           000129  1457 	C$Lab2.c$105$2$69 ==.
                                   1458 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:105: if (!SS0 && SS1)
      000129 20 A0 09         [24] 1459 	jb	_SS0,00127$
      00012C 30 A1 06         [24] 1460 	jnb	_SS1,00127$
                           00012F  1461 	C$Lab2.c$106$2$69 ==.
                                   1462 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:106: Mode_One();
      00012F 12r02rC3         [24] 1463 	lcall	_Mode_One
      000132 02r00r8A         [24] 1464 	ljmp	00131$
      000135                       1465 00127$:
                           000135  1466 	C$Lab2.c$107$2$69 ==.
                                   1467 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:107: else if (SS0 && !SS1)
      000135 30 A0 09         [24] 1468 	jnb	_SS0,00123$
      000138 20 A1 06         [24] 1469 	jb	_SS1,00123$
                           00013B  1470 	C$Lab2.c$108$2$69 ==.
                                   1471 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:108: Mode_Two();
      00013B 12r04rD7         [24] 1472 	lcall	_Mode_Two
      00013E 02r00r8A         [24] 1473 	ljmp	00131$
      000141                       1474 00123$:
                           000141  1475 	C$Lab2.c$109$2$69 ==.
                                   1476 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:109: else if (!SS0 && !SS1)
      000141 30 A0 03         [24] 1477 	jnb	_SS0,00198$
      000144 02r00r8A         [24] 1478 	ljmp	00131$
      000147                       1479 00198$:
      000147 30 A1 03         [24] 1480 	jnb	_SS1,00199$
      00014A 02r00r8A         [24] 1481 	ljmp	00131$
      00014D                       1482 00199$:
                           00014D  1483 	C$Lab2.c$110$2$69 ==.
                                   1484 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:110: Mode_Three();
      00014D 12r06rF7         [24] 1485 	lcall	_Mode_Three
      000150 02r00r8A         [24] 1486 	ljmp	00131$
                           000153  1487 	C$Lab2.c$112$1$68 ==.
                           000153  1488 	XG$main$0$0 ==.
      000153 22               [24] 1489 	ret
                                   1490 ;------------------------------------------------------------
                                   1491 ;Allocation info for local variables in function 'Port_Init'
                                   1492 ;------------------------------------------------------------
                           000154  1493 	G$Port_Init$0$0 ==.
                           000154  1494 	C$Lab2.c$116$1$68 ==.
                                   1495 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:116: void Port_Init(void)
                                   1496 ;	-----------------------------------------
                                   1497 ;	 function Port_Init
                                   1498 ;	-----------------------------------------
      000154                       1499 _Port_Init:
                           000154  1500 	C$Lab2.c$120$1$76 ==.
                                   1501 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:120: P3MDOUT |= 0xFC; // set Port 3 output pins to push-pull mode 
      000154 43 A7 FC         [24] 1502 	orl	_P3MDOUT,#0xfc
                           000157  1503 	C$Lab2.c$121$1$76 ==.
                                   1504 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:121: P3MDOUT &= 0xFE; // set Port 3 input pins to open drain mode
      000157 53 A7 FE         [24] 1505 	anl	_P3MDOUT,#0xfe
                           00015A  1506 	C$Lab2.c$122$1$76 ==.
                                   1507 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:122: P3 |= 0x01; // set Port 3 input pins to high impedance state
      00015A 43 B0 01         [24] 1508 	orl	_P3,#0x01
                           00015D  1509 	C$Lab2.c$125$1$76 ==.
                                   1510 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:125: P2MDOUT &= 0xFC; // set Port 2 input pins to open drain mode
      00015D 53 A6 FC         [24] 1511 	anl	_P2MDOUT,#0xfc
                           000160  1512 	C$Lab2.c$126$1$76 ==.
                                   1513 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:126: P2 |= 0x03; // set Port 2 input pins to high impedance state
      000160 43 A0 03         [24] 1514 	orl	_P2,#0x03
                           000163  1515 	C$Lab2.c$128$1$76 ==.
                           000163  1516 	XG$Port_Init$0$0 ==.
      000163 22               [24] 1517 	ret
                                   1518 ;------------------------------------------------------------
                                   1519 ;Allocation info for local variables in function 'Timer_Init'
                                   1520 ;------------------------------------------------------------
                           000164  1521 	G$Timer_Init$0$0 ==.
                           000164  1522 	C$Lab2.c$131$1$76 ==.
                                   1523 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:131: void Timer_Init(void)
                                   1524 ;	-----------------------------------------
                                   1525 ;	 function Timer_Init
                                   1526 ;	-----------------------------------------
      000164                       1527 _Timer_Init:
                           000164  1528 	C$Lab2.c$134$1$78 ==.
                                   1529 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:134: CKCON |= 0x08;  // Timer0 uses SYSCLK as source
      000164 43 8E 08         [24] 1530 	orl	_CKCON,#0x08
                           000167  1531 	C$Lab2.c$135$1$78 ==.
                                   1532 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:135: TMOD &= 0xF0;   // clear the 4 least significant bits
      000167 53 89 F0         [24] 1533 	anl	_TMOD,#0xf0
                           00016A  1534 	C$Lab2.c$136$1$78 ==.
                                   1535 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:136: TMOD |= 0x01;   // Timer0 in mode 1 (16-bit)
      00016A 43 89 01         [24] 1536 	orl	_TMOD,#0x01
                           00016D  1537 	C$Lab2.c$137$1$78 ==.
                                   1538 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:137: TR0 = 0;        // Stop Timer0
      00016D C2 8C            [12] 1539 	clr	_TR0
                           00016F  1540 	C$Lab2.c$138$1$78 ==.
                                   1541 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:138: TMR0 = 0;       // Clear high & low byte of T0
      00016F E4               [12] 1542 	clr	a
      000170 F5 8A            [12] 1543 	mov	((_TMR0 >> 0) & 0xFF),a
      000172 F5 8C            [12] 1544 	mov	((_TMR0 >> 8) & 0xFF),a
                           000174  1545 	C$Lab2.c$140$1$78 ==.
                           000174  1546 	XG$Timer_Init$0$0 ==.
      000174 22               [24] 1547 	ret
                                   1548 ;------------------------------------------------------------
                                   1549 ;Allocation info for local variables in function 'Interrupt_Init'
                                   1550 ;------------------------------------------------------------
                           000175  1551 	G$Interrupt_Init$0$0 ==.
                           000175  1552 	C$Lab2.c$144$1$78 ==.
                                   1553 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:144: void Interrupt_Init(void)
                                   1554 ;	-----------------------------------------
                                   1555 ;	 function Interrupt_Init
                                   1556 ;	-----------------------------------------
      000175                       1557 _Interrupt_Init:
                           000175  1558 	C$Lab2.c$146$1$80 ==.
                                   1559 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:146: IE |= 0x82;      // enable Timer0 Interrupt request (by masking)
      000175 43 A8 82         [24] 1560 	orl	_IE,#0x82
                           000178  1561 	C$Lab2.c$147$1$80 ==.
                           000178  1562 	XG$Interrupt_Init$0$0 ==.
      000178 22               [24] 1563 	ret
                                   1564 ;------------------------------------------------------------
                                   1565 ;Allocation info for local variables in function 'ADC1_Init'
                                   1566 ;------------------------------------------------------------
                           000179  1567 	G$ADC1_Init$0$0 ==.
                           000179  1568 	C$Lab2.c$150$1$80 ==.
                                   1569 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:150: void ADC1_Init(void)
                                   1570 ;	-----------------------------------------
                                   1571 ;	 function ADC1_Init
                                   1572 ;	-----------------------------------------
      000179                       1573 _ADC1_Init:
                           000179  1574 	C$Lab2.c$152$1$82 ==.
                                   1575 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:152: P1MDIN &= ~0x01;
      000179 53 BD FE         [24] 1576 	anl	_P1MDIN,#0xfe
                           00017C  1577 	C$Lab2.c$153$1$82 ==.
                                   1578 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:153: P1MDOUT &= ~0x01;
      00017C 53 A5 FE         [24] 1579 	anl	_P1MDOUT,#0xfe
                           00017F  1580 	C$Lab2.c$154$1$82 ==.
                                   1581 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:154: P1 |= 0x01;
      00017F 43 90 01         [24] 1582 	orl	_P1,#0x01
                           000182  1583 	C$Lab2.c$156$1$82 ==.
                                   1584 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:156: REF0CN = 0x03;		// sets internal voltage reference to 2.4V
      000182 75 D1 03         [24] 1585 	mov	_REF0CN,#0x03
                           000185  1586 	C$Lab2.c$157$1$82 ==.
                                   1587 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:157: ADC1CF |= 0x01;		// sets converter gain to 1
      000185 43 AB 01         [24] 1588 	orl	_ADC1CF,#0x01
                           000188  1589 	C$Lab2.c$158$1$82 ==.
                                   1590 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:158: ADC1CF &= 0xFD;		
      000188 53 AB FD         [24] 1591 	anl	_ADC1CF,#0xfd
                           00018B  1592 	C$Lab2.c$159$1$82 ==.
                                   1593 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:159: ADC1CN = 0x80;		// enables converter
      00018B 75 AA 80         [24] 1594 	mov	_ADC1CN,#0x80
                           00018E  1595 	C$Lab2.c$161$1$82 ==.
                                   1596 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:161: ADC_value = read_AD_input(); // reads initial garbage value
      00018E 12r01r99         [24] 1597 	lcall	_read_AD_input
      000191 AF 82            [24] 1598 	mov	r7,dpl
      000193 8F*0A            [24] 1599 	mov	_ADC_value,r7
      000195 75*0B 00         [24] 1600 	mov	(_ADC_value + 1),#0x00
                           000198  1601 	C$Lab2.c$162$1$82 ==.
                           000198  1602 	XG$ADC1_Init$0$0 ==.
      000198 22               [24] 1603 	ret
                                   1604 ;------------------------------------------------------------
                                   1605 ;Allocation info for local variables in function 'read_AD_input'
                                   1606 ;------------------------------------------------------------
                           000199  1607 	G$read_AD_input$0$0 ==.
                           000199  1608 	C$Lab2.c$165$1$82 ==.
                                   1609 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:165: unsigned char read_AD_input(void)
                                   1610 ;	-----------------------------------------
                                   1611 ;	 function read_AD_input
                                   1612 ;	-----------------------------------------
      000199                       1613 _read_AD_input:
                           000199  1614 	C$Lab2.c$167$1$84 ==.
                                   1615 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:167: AMX1SL = 0;		// sets P1.0 as analog input for ADC1
      000199 75 AC 00         [24] 1616 	mov	_AMX1SL,#0x00
                           00019C  1617 	C$Lab2.c$168$1$84 ==.
                                   1618 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:168: ADC1CN = ADC1CN & ~0x20;	// clears conversion complete flag
      00019C 53 AA DF         [24] 1619 	anl	_ADC1CN,#0xdf
                           00019F  1620 	C$Lab2.c$169$1$84 ==.
                                   1621 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:169: ADC1CN = ADC1CN | 0x10;		// starts conversion
      00019F 43 AA 10         [24] 1622 	orl	_ADC1CN,#0x10
                           0001A2  1623 	C$Lab2.c$170$1$84 ==.
                                   1624 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:170: while ((ADC1CN & 0x20) == 0x00);	// waits for conversion to complete
      0001A2                       1625 00101$:
      0001A2 E5 AA            [12] 1626 	mov	a,_ADC1CN
      0001A4 30 E5 FB         [24] 1627 	jnb	acc.5,00101$
                           0001A7  1628 	C$Lab2.c$171$1$84 ==.
                                   1629 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:171: return ADC1;
      0001A7 85 9C 82         [24] 1630 	mov	dpl,_ADC1
                           0001AA  1631 	C$Lab2.c$172$1$84 ==.
                           0001AA  1632 	XG$read_AD_input$0$0 ==.
      0001AA 22               [24] 1633 	ret
                                   1634 ;------------------------------------------------------------
                                   1635 ;Allocation info for local variables in function 'Flash_Biled'
                                   1636 ;------------------------------------------------------------
                           0001AB  1637 	G$Flash_Biled$0$0 ==.
                           0001AB  1638 	C$Lab2.c$175$1$84 ==.
                                   1639 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:175: void Flash_Biled(void)
                                   1640 ;	-----------------------------------------
                                   1641 ;	 function Flash_Biled
                                   1642 ;	-----------------------------------------
      0001AB                       1643 _Flash_Biled:
                           0001AB  1644 	C$Lab2.c$177$1$86 ==.
                                   1645 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:177: ClearTimer0();
      0001AB 12r0Ar48         [24] 1646 	lcall	_ClearTimer0
                           0001AE  1647 	C$Lab2.c$178$1$86 ==.
                                   1648 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:178: counts = 0;
      0001AE E4               [12] 1649 	clr	a
      0001AF F5*00            [12] 1650 	mov	_counts,a
      0001B1 F5*01            [12] 1651 	mov	(_counts + 1),a
                           0001B3  1652 	C$Lab2.c$179$1$86 ==.
                                   1653 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:179: TR0 = 1;
      0001B3 D2 8C            [12] 1654 	setb	_TR0
                           0001B5  1655 	C$Lab2.c$181$1$86 ==.
                                   1656 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:181: SetBILED('r');
      0001B5 75 82 72         [24] 1657 	mov	dpl,#0x72
      0001B8 12r0Ar54         [24] 1658 	lcall	_SetBILED
                           0001BB  1659 	C$Lab2.c$182$1$86 ==.
                                   1660 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:182: while(counts!=30);
      0001BB                       1661 00101$:
      0001BB 74 1E            [12] 1662 	mov	a,#0x1e
      0001BD B5*00 06         [24] 1663 	cjne	a,_counts,00202$
      0001C0 E4               [12] 1664 	clr	a
      0001C1 B5*01 02         [24] 1665 	cjne	a,(_counts + 1),00202$
      0001C4 80 02            [24] 1666 	sjmp	00203$
      0001C6                       1667 00202$:
      0001C6 80 F3            [24] 1668 	sjmp	00101$
      0001C8                       1669 00203$:
                           0001C8  1670 	C$Lab2.c$183$1$86 ==.
                                   1671 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:183: SetBILED('g');
      0001C8 75 82 67         [24] 1672 	mov	dpl,#0x67
      0001CB 12r0Ar54         [24] 1673 	lcall	_SetBILED
                           0001CE  1674 	C$Lab2.c$184$1$86 ==.
                                   1675 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:184: while(counts!=60);
      0001CE                       1676 00104$:
      0001CE 74 3C            [12] 1677 	mov	a,#0x3c
      0001D0 B5*00 06         [24] 1678 	cjne	a,_counts,00204$
      0001D3 E4               [12] 1679 	clr	a
      0001D4 B5*01 02         [24] 1680 	cjne	a,(_counts + 1),00204$
      0001D7 80 02            [24] 1681 	sjmp	00205$
      0001D9                       1682 00204$:
      0001D9 80 F3            [24] 1683 	sjmp	00104$
      0001DB                       1684 00205$:
                           0001DB  1685 	C$Lab2.c$185$1$86 ==.
                                   1686 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:185: SetBILED('r');
      0001DB 75 82 72         [24] 1687 	mov	dpl,#0x72
      0001DE 12r0Ar54         [24] 1688 	lcall	_SetBILED
                           0001E1  1689 	C$Lab2.c$186$1$86 ==.
                                   1690 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:186: while(counts!=90);
      0001E1                       1691 00107$:
      0001E1 74 5A            [12] 1692 	mov	a,#0x5a
      0001E3 B5*00 06         [24] 1693 	cjne	a,_counts,00206$
      0001E6 E4               [12] 1694 	clr	a
      0001E7 B5*01 02         [24] 1695 	cjne	a,(_counts + 1),00206$
      0001EA 80 02            [24] 1696 	sjmp	00207$
      0001EC                       1697 00206$:
      0001EC 80 F3            [24] 1698 	sjmp	00107$
      0001EE                       1699 00207$:
                           0001EE  1700 	C$Lab2.c$187$1$86 ==.
                                   1701 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:187: SetBILED('g');
      0001EE 75 82 67         [24] 1702 	mov	dpl,#0x67
      0001F1 12r0Ar54         [24] 1703 	lcall	_SetBILED
                           0001F4  1704 	C$Lab2.c$188$1$86 ==.
                                   1705 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:188: while(counts!=120);
      0001F4                       1706 00110$:
      0001F4 74 78            [12] 1707 	mov	a,#0x78
      0001F6 B5*00 06         [24] 1708 	cjne	a,_counts,00208$
      0001F9 E4               [12] 1709 	clr	a
      0001FA B5*01 02         [24] 1710 	cjne	a,(_counts + 1),00208$
      0001FD 80 02            [24] 1711 	sjmp	00209$
      0001FF                       1712 00208$:
      0001FF 80 F3            [24] 1713 	sjmp	00110$
      000201                       1714 00209$:
                           000201  1715 	C$Lab2.c$189$1$86 ==.
                                   1716 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:189: SetBILED('r');
      000201 75 82 72         [24] 1717 	mov	dpl,#0x72
      000204 12r0Ar54         [24] 1718 	lcall	_SetBILED
                           000207  1719 	C$Lab2.c$190$1$86 ==.
                                   1720 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:190: while(counts!=150);
      000207                       1721 00113$:
      000207 74 96            [12] 1722 	mov	a,#0x96
      000209 B5*00 06         [24] 1723 	cjne	a,_counts,00210$
      00020C E4               [12] 1724 	clr	a
      00020D B5*01 02         [24] 1725 	cjne	a,(_counts + 1),00210$
      000210 80 02            [24] 1726 	sjmp	00211$
      000212                       1727 00210$:
      000212 80 F3            [24] 1728 	sjmp	00113$
      000214                       1729 00211$:
                           000214  1730 	C$Lab2.c$191$1$86 ==.
                                   1731 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:191: SetBILED('g');
      000214 75 82 67         [24] 1732 	mov	dpl,#0x67
      000217 12r0Ar54         [24] 1733 	lcall	_SetBILED
                           00021A  1734 	C$Lab2.c$192$1$86 ==.
                                   1735 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:192: while(counts!=180);
      00021A                       1736 00116$:
      00021A 74 B4            [12] 1737 	mov	a,#0xb4
      00021C B5*00 06         [24] 1738 	cjne	a,_counts,00212$
      00021F E4               [12] 1739 	clr	a
      000220 B5*01 02         [24] 1740 	cjne	a,(_counts + 1),00212$
      000223 80 02            [24] 1741 	sjmp	00213$
      000225                       1742 00212$:
      000225 80 F3            [24] 1743 	sjmp	00116$
      000227                       1744 00213$:
                           000227  1745 	C$Lab2.c$193$1$86 ==.
                                   1746 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:193: SetBILED('r');
      000227 75 82 72         [24] 1747 	mov	dpl,#0x72
      00022A 12r0Ar54         [24] 1748 	lcall	_SetBILED
                           00022D  1749 	C$Lab2.c$194$1$86 ==.
                                   1750 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:194: while(counts!=210);
      00022D                       1751 00119$:
      00022D 74 D2            [12] 1752 	mov	a,#0xd2
      00022F B5*00 06         [24] 1753 	cjne	a,_counts,00214$
      000232 E4               [12] 1754 	clr	a
      000233 B5*01 02         [24] 1755 	cjne	a,(_counts + 1),00214$
      000236 80 02            [24] 1756 	sjmp	00215$
      000238                       1757 00214$:
      000238 80 F3            [24] 1758 	sjmp	00119$
      00023A                       1759 00215$:
                           00023A  1760 	C$Lab2.c$195$1$86 ==.
                                   1761 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:195: SetBILED('g');
      00023A 75 82 67         [24] 1762 	mov	dpl,#0x67
      00023D 12r0Ar54         [24] 1763 	lcall	_SetBILED
                           000240  1764 	C$Lab2.c$196$1$86 ==.
                                   1765 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:196: while(counts!=240);
      000240                       1766 00122$:
      000240 74 F0            [12] 1767 	mov	a,#0xf0
      000242 B5*00 06         [24] 1768 	cjne	a,_counts,00216$
      000245 E4               [12] 1769 	clr	a
      000246 B5*01 02         [24] 1770 	cjne	a,(_counts + 1),00216$
      000249 80 02            [24] 1771 	sjmp	00217$
      00024B                       1772 00216$:
      00024B 80 F3            [24] 1773 	sjmp	00122$
      00024D                       1774 00217$:
                           00024D  1775 	C$Lab2.c$197$1$86 ==.
                                   1776 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:197: SetBILED('r');
      00024D 75 82 72         [24] 1777 	mov	dpl,#0x72
      000250 12r0Ar54         [24] 1778 	lcall	_SetBILED
                           000253  1779 	C$Lab2.c$198$1$86 ==.
                                   1780 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:198: while(counts!=270);
      000253                       1781 00125$:
      000253 74 0E            [12] 1782 	mov	a,#0x0e
      000255 B5*00 FB         [24] 1783 	cjne	a,_counts,00125$
      000258 74 01            [12] 1784 	mov	a,#0x01
      00025A B5*01 F6         [24] 1785 	cjne	a,(_counts + 1),00125$
                           00025D  1786 	C$Lab2.c$199$1$86 ==.
                                   1787 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:199: SetBILED('g');
      00025D 75 82 67         [24] 1788 	mov	dpl,#0x67
      000260 12r0Ar54         [24] 1789 	lcall	_SetBILED
                           000263  1790 	C$Lab2.c$200$1$86 ==.
                                   1791 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:200: while(counts!=300);
      000263                       1792 00128$:
      000263 74 2C            [12] 1793 	mov	a,#0x2c
      000265 B5*00 FB         [24] 1794 	cjne	a,_counts,00128$
      000268 74 01            [12] 1795 	mov	a,#0x01
      00026A B5*01 F6         [24] 1796 	cjne	a,(_counts + 1),00128$
                           00026D  1797 	C$Lab2.c$201$1$86 ==.
                                   1798 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:201: SetBILED('r');
      00026D 75 82 72         [24] 1799 	mov	dpl,#0x72
      000270 12r0Ar54         [24] 1800 	lcall	_SetBILED
                           000273  1801 	C$Lab2.c$202$1$86 ==.
                                   1802 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:202: while(counts!=330);
      000273                       1803 00131$:
      000273 74 4A            [12] 1804 	mov	a,#0x4a
      000275 B5*00 FB         [24] 1805 	cjne	a,_counts,00131$
      000278 74 01            [12] 1806 	mov	a,#0x01
      00027A B5*01 F6         [24] 1807 	cjne	a,(_counts + 1),00131$
                           00027D  1808 	C$Lab2.c$203$1$86 ==.
                                   1809 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:203: SetBILED('o');
      00027D 75 82 6F         [24] 1810 	mov	dpl,#0x6f
      000280 12r0Ar54         [24] 1811 	lcall	_SetBILED
                           000283  1812 	C$Lab2.c$204$1$86 ==.
                           000283  1813 	XG$Flash_Biled$0$0 ==.
      000283 22               [24] 1814 	ret
                                   1815 ;------------------------------------------------------------
                                   1816 ;Allocation info for local variables in function 'Flash_LEDs'
                                   1817 ;------------------------------------------------------------
                           000284  1818 	G$Flash_LEDs$0$0 ==.
                           000284  1819 	C$Lab2.c$207$1$86 ==.
                                   1820 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:207: void Flash_LEDs(void) {
                                   1821 ;	-----------------------------------------
                                   1822 ;	 function Flash_LEDs
                                   1823 ;	-----------------------------------------
      000284                       1824 _Flash_LEDs:
                           000284  1825 	C$Lab2.c$209$1$88 ==.
                                   1826 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:209: ClearTimer0();
      000284 12r0Ar48         [24] 1827 	lcall	_ClearTimer0
                           000287  1828 	C$Lab2.c$210$1$88 ==.
                                   1829 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:210: TR0 = 1;
      000287 D2 8C            [12] 1830 	setb	_TR0
                           000289  1831 	C$Lab2.c$211$1$88 ==.
                                   1832 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:211: SetAllLEDs(1);
      000289 75 82 01         [24] 1833 	mov	dpl,#0x01
      00028C 12r09r49         [24] 1834 	lcall	_SetAllLEDs
                           00028F  1835 	C$Lab2.c$212$1$88 ==.
                                   1836 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:212: while (counts!=40);
      00028F                       1837 00101$:
      00028F 74 28            [12] 1838 	mov	a,#0x28
      000291 B5*00 06         [24] 1839 	cjne	a,_counts,00127$
      000294 E4               [12] 1840 	clr	a
      000295 B5*01 02         [24] 1841 	cjne	a,(_counts + 1),00127$
      000298 80 02            [24] 1842 	sjmp	00128$
      00029A                       1843 00127$:
      00029A 80 F3            [24] 1844 	sjmp	00101$
      00029C                       1845 00128$:
                           00029C  1846 	C$Lab2.c$214$1$88 ==.
                                   1847 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:214: SetAllLEDs(0);
      00029C 75 82 00         [24] 1848 	mov	dpl,#0x00
      00029F 12r09r49         [24] 1849 	lcall	_SetAllLEDs
                           0002A2  1850 	C$Lab2.c$215$1$88 ==.
                                   1851 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:215: while (counts!=80);
      0002A2                       1852 00104$:
      0002A2 74 50            [12] 1853 	mov	a,#0x50
      0002A4 B5*00 06         [24] 1854 	cjne	a,_counts,00129$
      0002A7 E4               [12] 1855 	clr	a
      0002A8 B5*01 02         [24] 1856 	cjne	a,(_counts + 1),00129$
      0002AB 80 02            [24] 1857 	sjmp	00130$
      0002AD                       1858 00129$:
      0002AD 80 F3            [24] 1859 	sjmp	00104$
      0002AF                       1860 00130$:
                           0002AF  1861 	C$Lab2.c$217$1$88 ==.
                                   1862 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:217: SetAllLEDs(1);
      0002AF 75 82 01         [24] 1863 	mov	dpl,#0x01
      0002B2 12r09r49         [24] 1864 	lcall	_SetAllLEDs
                           0002B5  1865 	C$Lab2.c$218$1$88 ==.
                                   1866 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:218: while (counts!=120);
      0002B5                       1867 00107$:
      0002B5 74 78            [12] 1868 	mov	a,#0x78
      0002B7 B5*00 06         [24] 1869 	cjne	a,_counts,00131$
      0002BA E4               [12] 1870 	clr	a
      0002BB B5*01 02         [24] 1871 	cjne	a,(_counts + 1),00131$
      0002BE 80 02            [24] 1872 	sjmp	00132$
      0002C0                       1873 00131$:
      0002C0 80 F3            [24] 1874 	sjmp	00107$
      0002C2                       1875 00132$:
                           0002C2  1876 	C$Lab2.c$219$1$88 ==.
                           0002C2  1877 	XG$Flash_LEDs$0$0 ==.
      0002C2 22               [24] 1878 	ret
                                   1879 ;------------------------------------------------------------
                                   1880 ;Allocation info for local variables in function 'Mode_One'
                                   1881 ;------------------------------------------------------------
                                   1882 ;random_Result             Allocated to registers r4 
                                   1883 ;game_Time                 Allocated to registers r1 r2 
                                   1884 ;total_Score               Allocated to registers r6 r7 
                                   1885 ;round_Score               Allocated to registers r3 r4 
                                   1886 ;rounds                    Allocated to registers 
                                   1887 ;ADC_final                 Allocated to registers r3 
                                   1888 ;------------------------------------------------------------
                           0002C3  1889 	G$Mode_One$0$0 ==.
                           0002C3  1890 	C$Lab2.c$223$1$88 ==.
                                   1891 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:223: void Mode_One(void)
                                   1892 ;	-----------------------------------------
                                   1893 ;	 function Mode_One
                                   1894 ;	-----------------------------------------
      0002C3                       1895 _Mode_One:
                           0002C3  1896 	C$Lab2.c$231$1$90 ==.
                                   1897 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:231: printf("\n\n\rThe first mode generates a random number from 0 to 4.\n\rThe generated number lights up none to all 4 LEDs in a line.\n\rThe LEDs stay on 0.5 s, then turn off and a timer is started.\n\rThe player then turns a potentiometer whose voltage value is used to turn on\n\rthe LEDs in sequence until the same pattern appears.\n\rThe pushbutton is then pressed to stop the timer and record the LED pattern,\n\rwhich is then compared to that generated by the random number.\n\rScoring is based on correctness and speed of entry.\n\rThe whole process is repeated 5 times and the\n\rfinal score is displayed on the terminal.\n\rThe lower the score the better you did.");
      0002C3 74r42            [12] 1898 	mov	a,#___str_5
      0002C5 C0 E0            [24] 1899 	push	acc
      0002C7 74s01            [12] 1900 	mov	a,#(___str_5 >> 8)
      0002C9 C0 E0            [24] 1901 	push	acc
      0002CB 74 80            [12] 1902 	mov	a,#0x80
      0002CD C0 E0            [24] 1903 	push	acc
      0002CF 12r00r00         [24] 1904 	lcall	_printf
      0002D2 15 81            [12] 1905 	dec	sp
      0002D4 15 81            [12] 1906 	dec	sp
      0002D6 15 81            [12] 1907 	dec	sp
                           0002D8  1908 	C$Lab2.c$232$1$90 ==.
                                   1909 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:232: total_Score = 0; //reset score
      0002D8 7E 00            [12] 1910 	mov	r6,#0x00
      0002DA 7F 00            [12] 1911 	mov	r7,#0x00
                           0002DC  1912 	C$Lab2.c$233$1$90 ==.
                                   1913 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:233: SetAllLEDs(1);	//turn off all LEDs
      0002DC 75 82 01         [24] 1914 	mov	dpl,#0x01
      0002DF C0 07            [24] 1915 	push	ar7
      0002E1 C0 06            [24] 1916 	push	ar6
      0002E3 12r09r49         [24] 1917 	lcall	_SetAllLEDs
                           0002E6  1918 	C$Lab2.c$234$1$90 ==.
                                   1919 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:234: SetBILED('r'); // turn BILED red
      0002E6 75 82 72         [24] 1920 	mov	dpl,#0x72
      0002E9 12r0Ar54         [24] 1921 	lcall	_SetBILED
      0002EC D0 06            [24] 1922 	pop	ar6
      0002EE D0 07            [24] 1923 	pop	ar7
                           0002F0  1924 	C$Lab2.c$235$1$90 ==.
                                   1925 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:235: while (DebounceButton() == 0); //wait for pushbutton to be pressed
      0002F0                       1926 00101$:
      0002F0 C0 07            [24] 1927 	push	ar7
      0002F2 C0 06            [24] 1928 	push	ar6
      0002F4 12r0Ar79         [24] 1929 	lcall	_DebounceButton
      0002F7 E5 82            [12] 1930 	mov	a,dpl
      0002F9 D0 06            [24] 1931 	pop	ar6
      0002FB D0 07            [24] 1932 	pop	ar7
      0002FD 60 F1            [24] 1933 	jz	00101$
                           0002FF  1934 	C$Lab2.c$236$1$90 ==.
                                   1935 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:236: printf("\r\nStart");
      0002FF C0 07            [24] 1936 	push	ar7
      000301 C0 06            [24] 1937 	push	ar6
      000303 74rC2            [12] 1938 	mov	a,#___str_6
      000305 C0 E0            [24] 1939 	push	acc
      000307 74s03            [12] 1940 	mov	a,#(___str_6 >> 8)
      000309 C0 E0            [24] 1941 	push	acc
      00030B 74 80            [12] 1942 	mov	a,#0x80
      00030D C0 E0            [24] 1943 	push	acc
      00030F 12r00r00         [24] 1944 	lcall	_printf
      000312 15 81            [12] 1945 	dec	sp
      000314 15 81            [12] 1946 	dec	sp
      000316 15 81            [12] 1947 	dec	sp
      000318 D0 06            [24] 1948 	pop	ar6
      00031A D0 07            [24] 1949 	pop	ar7
                           00031C  1950 	C$Lab2.c$237$1$90 ==.
                                   1951 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:237: for (rounds = 0; rounds < 5; rounds++ )
      00031C 7D 00            [12] 1952 	mov	r5,#0x00
      00031E                       1953 00119$:
                           00031E  1954 	C$Lab2.c$239$2$91 ==.
                                   1955 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:239: SetBILED('o'); //turn off BILED
      00031E 75 82 6F         [24] 1956 	mov	dpl,#0x6f
      000321 C0 07            [24] 1957 	push	ar7
      000323 C0 06            [24] 1958 	push	ar6
      000325 C0 05            [24] 1959 	push	ar5
      000327 12r0Ar54         [24] 1960 	lcall	_SetBILED
                           00032A  1961 	C$Lab2.c$240$2$91 ==.
                                   1962 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:240: random_Result = random();
      00032A 12r09r3C         [24] 1963 	lcall	_random
      00032D AC 82            [24] 1964 	mov	r4,dpl
                           00032F  1965 	C$Lab2.c$241$2$91 ==.
                                   1966 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:241: ClearTimer0();
      00032F C0 04            [24] 1967 	push	ar4
      000331 12r0Ar48         [24] 1968 	lcall	_ClearTimer0
      000334 D0 04            [24] 1969 	pop	ar4
                           000336  1970 	C$Lab2.c$242$2$91 ==.
                                   1971 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:242: TR0 = 1; //start timer
      000336 D2 8C            [12] 1972 	setb	_TR0
                           000338  1973 	C$Lab2.c$243$2$91 ==.
                                   1974 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:243: LightNumLEDs(random_Result);
      000338 8C 82            [24] 1975 	mov	dpl,r4
      00033A C0 04            [24] 1976 	push	ar4
      00033C 12r0Ar1F         [24] 1977 	lcall	_LightNumLEDs
      00033F D0 04            [24] 1978 	pop	ar4
      000341 D0 05            [24] 1979 	pop	ar5
      000343 D0 06            [24] 1980 	pop	ar6
      000345 D0 07            [24] 1981 	pop	ar7
                           000347  1982 	C$Lab2.c$244$2$91 ==.
                                   1983 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:244: while (counts != 338); //Lights 0-4 LEDs for 1.0 seconds
      000347                       1984 00104$:
      000347 74 52            [12] 1985 	mov	a,#0x52
      000349 B5*00 FB         [24] 1986 	cjne	a,_counts,00104$
      00034C 74 01            [12] 1987 	mov	a,#0x01
      00034E B5*01 F6         [24] 1988 	cjne	a,(_counts + 1),00104$
                           000351  1989 	C$Lab2.c$245$2$91 ==.
                                   1990 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:245: ClearTimer0();
      000351 C0 07            [24] 1991 	push	ar7
      000353 C0 06            [24] 1992 	push	ar6
      000355 C0 05            [24] 1993 	push	ar5
      000357 C0 04            [24] 1994 	push	ar4
      000359 12r0Ar48         [24] 1995 	lcall	_ClearTimer0
                           00035C  1996 	C$Lab2.c$246$2$91 ==.
                                   1997 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:246: Flash_LEDs();
      00035C 12r02r84         [24] 1998 	lcall	_Flash_LEDs
      00035F D0 04            [24] 1999 	pop	ar4
      000361 D0 05            [24] 2000 	pop	ar5
      000363 D0 06            [24] 2001 	pop	ar6
      000365 D0 07            [24] 2002 	pop	ar7
                           000367  2003 	C$Lab2.c$247$2$91 ==.
                                   2004 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:247: TR0=1;
      000367 D2 8C            [12] 2005 	setb	_TR0
                           000369  2006 	C$Lab2.c$248$2$91 ==.
                                   2007 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:248: while (DebounceButton() == 0) //maps ADC to 0-4 and lights LEDs continuously
      000369                       2008 00107$:
      000369 C0 07            [24] 2009 	push	ar7
      00036B C0 06            [24] 2010 	push	ar6
      00036D C0 05            [24] 2011 	push	ar5
      00036F C0 04            [24] 2012 	push	ar4
      000371 12r0Ar79         [24] 2013 	lcall	_DebounceButton
      000374 E5 82            [12] 2014 	mov	a,dpl
      000376 D0 04            [24] 2015 	pop	ar4
      000378 D0 05            [24] 2016 	pop	ar5
      00037A D0 06            [24] 2017 	pop	ar6
      00037C D0 07            [24] 2018 	pop	ar7
      00037E 70 42            [24] 2019 	jnz	00109$
                           000380  2020 	C$Lab2.c$250$3$92 ==.
                                   2021 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:250: ADC_value = read_AD_input();
      000380 C0 07            [24] 2022 	push	ar7
      000382 C0 06            [24] 2023 	push	ar6
      000384 C0 05            [24] 2024 	push	ar5
      000386 C0 04            [24] 2025 	push	ar4
      000388 12r01r99         [24] 2026 	lcall	_read_AD_input
      00038B AB 82            [24] 2027 	mov	r3,dpl
      00038D 8B*0A            [24] 2028 	mov	_ADC_value,r3
      00038F 75*0B 00         [24] 2029 	mov	(_ADC_value + 1),#0x00
                           000392  2030 	C$Lab2.c$251$1$90 ==.
                                   2031 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:251: ADC_mapped = MapADC(ADC_value,0,4);
      000392 85*0A 82         [24] 2032 	mov	dpl,_ADC_value
      000395 85*0B 83         [24] 2033 	mov	dph,(_ADC_value + 1)
      000398 12r00r00         [24] 2034 	lcall	___uint2fs
      00039B A8 82            [24] 2035 	mov	r0,dpl
      00039D A9 83            [24] 2036 	mov	r1,dph
      00039F AA F0            [24] 2037 	mov	r2,b
      0003A1 FB               [12] 2038 	mov	r3,a
      0003A2 75*28 00         [24] 2039 	mov	_MapADC_PARM_2,#0x00
      0003A5 75*29 04         [24] 2040 	mov	_MapADC_PARM_3,#0x04
      0003A8 88 82            [24] 2041 	mov	dpl,r0
      0003AA 89 83            [24] 2042 	mov	dph,r1
      0003AC 8A F0            [24] 2043 	mov	b,r2
      0003AE EB               [12] 2044 	mov	a,r3
      0003AF 12r09r68         [24] 2045 	lcall	_MapADC
                           0003B2  2046 	C$Lab2.c$252$3$92 ==.
                                   2047 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:252: LightNumLEDs(ADC_mapped);
      0003B2 85 82*22         [24] 2048 	mov  _ADC_mapped,dpl
      0003B5 12r0Ar1F         [24] 2049 	lcall	_LightNumLEDs
      0003B8 D0 04            [24] 2050 	pop	ar4
      0003BA D0 05            [24] 2051 	pop	ar5
      0003BC D0 06            [24] 2052 	pop	ar6
      0003BE D0 07            [24] 2053 	pop	ar7
      0003C0 80 A7            [24] 2054 	sjmp	00107$
      0003C2                       2055 00109$:
                           0003C2  2056 	C$Lab2.c$254$2$91 ==.
                                   2057 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:254: ADC_final = ADC_mapped; // saves pot value
      0003C2 AB*22            [24] 2058 	mov	r3,_ADC_mapped
                           0003C4  2059 	C$Lab2.c$255$2$91 ==.
                                   2060 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:255: game_Time = counts; // counting time in game
      0003C4 A9*00            [24] 2061 	mov	r1,_counts
      0003C6 AA*01            [24] 2062 	mov	r2,(_counts + 1)
                           0003C8  2063 	C$Lab2.c$256$2$91 ==.
                                   2064 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:256: Flash_LEDs();
      0003C8 C0 07            [24] 2065 	push	ar7
      0003CA C0 06            [24] 2066 	push	ar6
      0003CC C0 05            [24] 2067 	push	ar5
      0003CE C0 04            [24] 2068 	push	ar4
      0003D0 C0 03            [24] 2069 	push	ar3
      0003D2 C0 02            [24] 2070 	push	ar2
      0003D4 C0 01            [24] 2071 	push	ar1
      0003D6 12r02r84         [24] 2072 	lcall	_Flash_LEDs
      0003D9 D0 01            [24] 2073 	pop	ar1
      0003DB D0 02            [24] 2074 	pop	ar2
      0003DD D0 03            [24] 2075 	pop	ar3
      0003DF D0 04            [24] 2076 	pop	ar4
                           0003E1  2077 	C$Lab2.c$257$2$91 ==.
                                   2078 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:257: CompareVals(ADC_final, random_Result); //compares the input and expected result and lights BILED apropriately
      0003E1 8C*2A            [24] 2079 	mov	_CompareVals_PARM_2,r4
      0003E3 8B 82            [24] 2080 	mov	dpl,r3
      0003E5 C0 04            [24] 2081 	push	ar4
      0003E7 C0 03            [24] 2082 	push	ar3
      0003E9 C0 02            [24] 2083 	push	ar2
      0003EB C0 01            [24] 2084 	push	ar1
      0003ED 12r0ArC1         [24] 2085 	lcall	_CompareVals
      0003F0 D0 01            [24] 2086 	pop	ar1
      0003F2 D0 02            [24] 2087 	pop	ar2
      0003F4 D0 03            [24] 2088 	pop	ar3
      0003F6 D0 04            [24] 2089 	pop	ar4
      0003F8 D0 05            [24] 2090 	pop	ar5
      0003FA D0 06            [24] 2091 	pop	ar6
      0003FC D0 07            [24] 2092 	pop	ar7
                           0003FE  2093 	C$Lab2.c$258$2$91 ==.
                                   2094 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:258: if (ADC_final == random_Result) // determines whether or not the correct input was given
      0003FE EB               [12] 2095 	mov	a,r3
      0003FF B5 04 07         [24] 2096 	cjne	a,ar4,00111$
                           000402  2097 	C$Lab2.c$260$3$93 ==.
                                   2098 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:260: error = 0;
      000402 E4               [12] 2099 	clr	a
      000403 F5*0C            [12] 2100 	mov	_error,a
      000405 F5*0D            [12] 2101 	mov	(_error + 1),a
      000407 80 06            [24] 2102 	sjmp	00112$
      000409                       2103 00111$:
                           000409  2104 	C$Lab2.c$264$3$94 ==.
                                   2105 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:264: error = 1;
      000409 75*0C 01         [24] 2106 	mov	_error,#0x01
      00040C 75*0D 00         [24] 2107 	mov	(_error + 1),#0x00
      00040F                       2108 00112$:
                           00040F  2109 	C$Lab2.c$266$2$91 ==.
                                   2110 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:266: round_Score = (game_Time - 169)/169; //The first half second does not count
      00040F E9               [12] 2111 	mov	a,r1
      000410 24 57            [12] 2112 	add	a,#0x57
      000412 F5 82            [12] 2113 	mov	dpl,a
      000414 EA               [12] 2114 	mov	a,r2
      000415 34 FF            [12] 2115 	addc	a,#0xff
      000417 F5 83            [12] 2116 	mov	dph,a
      000419 75*00 A9         [24] 2117 	mov	__divuint_PARM_2,#0xa9
      00041C 75*01 00         [24] 2118 	mov	(__divuint_PARM_2 + 1),#0x00
      00041F C0 07            [24] 2119 	push	ar7
      000421 C0 06            [24] 2120 	push	ar6
      000423 C0 05            [24] 2121 	push	ar5
      000425 12r00r00         [24] 2122 	lcall	__divuint
      000428 AB 82            [24] 2123 	mov	r3,dpl
      00042A AC 83            [24] 2124 	mov	r4,dph
      00042C D0 05            [24] 2125 	pop	ar5
      00042E D0 06            [24] 2126 	pop	ar6
      000430 D0 07            [24] 2127 	pop	ar7
                           000432  2128 	C$Lab2.c$267$2$91 ==.
                                   2129 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:267: if (error == 1)
      000432 74 01            [12] 2130 	mov	a,#0x01
      000434 B5*0C 06         [24] 2131 	cjne	a,_error,00166$
      000437 14               [12] 2132 	dec	a
      000438 B5*0D 02         [24] 2133 	cjne	a,(_error + 1),00166$
      00043B 80 02            [24] 2134 	sjmp	00167$
      00043D                       2135 00166$:
      00043D 80 07            [24] 2136 	sjmp	00114$
      00043F                       2137 00167$:
                           00043F  2138 	C$Lab2.c$269$3$95 ==.
                                   2139 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:269: round_Score = round_Score + 10;
      00043F 74 0A            [12] 2140 	mov	a,#0x0a
      000441 2B               [12] 2141 	add	a,r3
      000442 FB               [12] 2142 	mov	r3,a
      000443 E4               [12] 2143 	clr	a
      000444 3C               [12] 2144 	addc	a,r4
      000445 FC               [12] 2145 	mov	r4,a
      000446                       2146 00114$:
                           000446  2147 	C$Lab2.c$271$2$91 ==.
                                   2148 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:271: total_Score = total_Score + round_Score;
      000446 EB               [12] 2149 	mov	a,r3
      000447 2E               [12] 2150 	add	a,r6
      000448 FE               [12] 2151 	mov	r6,a
      000449 EC               [12] 2152 	mov	a,r4
      00044A 3F               [12] 2153 	addc	a,r7
      00044B FF               [12] 2154 	mov	r7,a
                           00044C  2155 	C$Lab2.c$272$2$91 ==.
                                   2156 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:272: printf("\r\nRound Score: %d",round_Score);
      00044C C0 07            [24] 2157 	push	ar7
      00044E C0 06            [24] 2158 	push	ar6
      000450 C0 05            [24] 2159 	push	ar5
      000452 C0 03            [24] 2160 	push	ar3
      000454 C0 04            [24] 2161 	push	ar4
      000456 74rCA            [12] 2162 	mov	a,#___str_7
      000458 C0 E0            [24] 2163 	push	acc
      00045A 74s03            [12] 2164 	mov	a,#(___str_7 >> 8)
      00045C C0 E0            [24] 2165 	push	acc
      00045E 74 80            [12] 2166 	mov	a,#0x80
      000460 C0 E0            [24] 2167 	push	acc
      000462 12r00r00         [24] 2168 	lcall	_printf
      000465 E5 81            [12] 2169 	mov	a,sp
      000467 24 FB            [12] 2170 	add	a,#0xfb
      000469 F5 81            [12] 2171 	mov	sp,a
      00046B D0 05            [24] 2172 	pop	ar5
      00046D D0 06            [24] 2173 	pop	ar6
      00046F D0 07            [24] 2174 	pop	ar7
                           000471  2175 	C$Lab2.c$273$2$91 ==.
                                   2176 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:273: printf("\r\nTotal Score: %d",total_Score);
      000471 C0 07            [24] 2177 	push	ar7
      000473 C0 06            [24] 2178 	push	ar6
      000475 C0 05            [24] 2179 	push	ar5
      000477 C0 06            [24] 2180 	push	ar6
      000479 C0 07            [24] 2181 	push	ar7
      00047B 74rDC            [12] 2182 	mov	a,#___str_8
      00047D C0 E0            [24] 2183 	push	acc
      00047F 74s03            [12] 2184 	mov	a,#(___str_8 >> 8)
      000481 C0 E0            [24] 2185 	push	acc
      000483 74 80            [12] 2186 	mov	a,#0x80
      000485 C0 E0            [24] 2187 	push	acc
      000487 12r00r00         [24] 2188 	lcall	_printf
      00048A E5 81            [12] 2189 	mov	a,sp
      00048C 24 FB            [12] 2190 	add	a,#0xfb
      00048E F5 81            [12] 2191 	mov	sp,a
      000490 D0 05            [24] 2192 	pop	ar5
      000492 D0 06            [24] 2193 	pop	ar6
      000494 D0 07            [24] 2194 	pop	ar7
                           000496  2195 	C$Lab2.c$276$2$91 ==.
                                   2196 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:276: TR0 = 1; //start timer
      000496 D2 8C            [12] 2197 	setb	_TR0
                           000498  2198 	C$Lab2.c$277$2$91 ==.
                                   2199 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:277: while (counts <= 169); //wait for half a second before moving on to the next value
      000498                       2200 00115$:
      000498 C3               [12] 2201 	clr	c
      000499 74 A9            [12] 2202 	mov	a,#0xa9
      00049B 95*00            [12] 2203 	subb	a,_counts
      00049D E4               [12] 2204 	clr	a
      00049E 95*01            [12] 2205 	subb	a,(_counts + 1)
      0004A0 50 F6            [24] 2206 	jnc	00115$
                           0004A2  2207 	C$Lab2.c$278$2$91 ==.
                                   2208 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:278: ClearTimer0();
      0004A2 C0 07            [24] 2209 	push	ar7
      0004A4 C0 06            [24] 2210 	push	ar6
      0004A6 C0 05            [24] 2211 	push	ar5
      0004A8 12r0Ar48         [24] 2212 	lcall	_ClearTimer0
      0004AB D0 05            [24] 2213 	pop	ar5
      0004AD D0 06            [24] 2214 	pop	ar6
      0004AF D0 07            [24] 2215 	pop	ar7
                           0004B1  2216 	C$Lab2.c$237$1$90 ==.
                                   2217 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:237: for (rounds = 0; rounds < 5; rounds++ )
      0004B1 0D               [12] 2218 	inc	r5
      0004B2 BD 05 00         [24] 2219 	cjne	r5,#0x05,00169$
      0004B5                       2220 00169$:
      0004B5 50 03            [24] 2221 	jnc	00170$
      0004B7 02r03r1E         [24] 2222 	ljmp	00119$
      0004BA                       2223 00170$:
                           0004BA  2224 	C$Lab2.c$280$1$90 ==.
                                   2225 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:280: printf("\n\n\rFinal Score: %d",total_Score);
      0004BA C0 06            [24] 2226 	push	ar6
      0004BC C0 07            [24] 2227 	push	ar7
      0004BE 74rEE            [12] 2228 	mov	a,#___str_9
      0004C0 C0 E0            [24] 2229 	push	acc
      0004C2 74s03            [12] 2230 	mov	a,#(___str_9 >> 8)
      0004C4 C0 E0            [24] 2231 	push	acc
      0004C6 74 80            [12] 2232 	mov	a,#0x80
      0004C8 C0 E0            [24] 2233 	push	acc
      0004CA 12r00r00         [24] 2234 	lcall	_printf
      0004CD E5 81            [12] 2235 	mov	a,sp
      0004CF 24 FB            [12] 2236 	add	a,#0xfb
      0004D1 F5 81            [12] 2237 	mov	sp,a
                           0004D3  2238 	C$Lab2.c$281$1$90 ==.
                                   2239 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:281: Flash_Biled();
      0004D3 12r01rAB         [24] 2240 	lcall	_Flash_Biled
                           0004D6  2241 	C$Lab2.c$282$1$90 ==.
                           0004D6  2242 	XG$Mode_One$0$0 ==.
      0004D6 22               [24] 2243 	ret
                                   2244 ;------------------------------------------------------------
                                   2245 ;Allocation info for local variables in function 'Mode_Two'
                                   2246 ;------------------------------------------------------------
                           0004D7  2247 	G$Mode_Two$0$0 ==.
                           0004D7  2248 	C$Lab2.c$285$1$90 ==.
                                   2249 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:285: void Mode_Two(void)
                                   2250 ;	-----------------------------------------
                                   2251 ;	 function Mode_Two
                                   2252 ;	-----------------------------------------
      0004D7                       2253 _Mode_Two:
                           0004D7  2254 	C$Lab2.c$287$1$97 ==.
                                   2255 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:287: printf("\r\n\nPlayer 1 will have 1 second to adjust the potentionmeter to light up LEDs.\r\nPlayer 2 must then push the button for each LED that was lit within 1.5s\r\n"); // Instructions 
      0004D7 74r01            [12] 2256 	mov	a,#___str_10
      0004D9 C0 E0            [24] 2257 	push	acc
      0004DB 74s04            [12] 2258 	mov	a,#(___str_10 >> 8)
      0004DD C0 E0            [24] 2259 	push	acc
      0004DF 74 80            [12] 2260 	mov	a,#0x80
      0004E1 C0 E0            [24] 2261 	push	acc
      0004E3 12r00r00         [24] 2262 	lcall	_printf
      0004E6 15 81            [12] 2263 	dec	sp
      0004E8 15 81            [12] 2264 	dec	sp
      0004EA 15 81            [12] 2265 	dec	sp
                           0004EC  2266 	C$Lab2.c$289$1$97 ==.
                                   2267 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:289: score = 0; // keeps track of the score
      0004EC E4               [12] 2268 	clr	a
      0004ED F5*0E            [12] 2269 	mov	_score,a
      0004EF F5*0F            [12] 2270 	mov	(_score + 1),a
                           0004F1  2271 	C$Lab2.c$290$1$97 ==.
                                   2272 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:290: SetAllLEDs(1); // Turn off all LEDs 
      0004F1 75 82 01         [24] 2273 	mov	dpl,#0x01
      0004F4 12r09r49         [24] 2274 	lcall	_SetAllLEDs
                           0004F7  2275 	C$Lab2.c$291$1$97 ==.
                                   2276 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:291: buttonPresses = 0; // Keeps track of button presses
      0004F7 E4               [12] 2277 	clr	a
      0004F8 F5*10            [12] 2278 	mov	_buttonPresses,a
      0004FA F5*11            [12] 2279 	mov	(_buttonPresses + 1),a
                           0004FC  2280 	C$Lab2.c$292$1$97 ==.
                                   2281 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:292: numLEDs = 0; // Counts the number of LEDs lit
      0004FC F5*1E            [12] 2282 	mov	_numLEDs,a
      0004FE F5*1F            [12] 2283 	mov	(_numLEDs + 1),a
                           000500  2284 	C$Lab2.c$294$1$97 ==.
                                   2285 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:294: for (tries = 0; tries < 5; tries++)
      000500 F5*20            [12] 2286 	mov	_tries,a
      000502 F5*21            [12] 2287 	mov	(_tries + 1),a
      000504                       2288 00136$:
                           000504  2289 	C$Lab2.c$296$2$98 ==.
                                   2290 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:296: buttonPresses = 0; // Clear number of button presses
      000504 E4               [12] 2291 	clr	a
      000505 F5*10            [12] 2292 	mov	_buttonPresses,a
      000507 F5*11            [12] 2293 	mov	(_buttonPresses + 1),a
                           000509  2294 	C$Lab2.c$297$2$98 ==.
                                   2295 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:297: ClearTimer0(); // Stop and clear Timer0 and overflows
      000509 12r0Ar48         [24] 2296 	lcall	_ClearTimer0
                           00050C  2297 	C$Lab2.c$298$2$98 ==.
                                   2298 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:298: SetBILED('r'); // Turn BILED red
      00050C 75 82 72         [24] 2299 	mov	dpl,#0x72
      00050F 12r0Ar54         [24] 2300 	lcall	_SetBILED
                           000512  2301 	C$Lab2.c$299$2$98 ==.
                                   2302 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:299: TR0 = 1; // Start Timer0
      000512 D2 8C            [12] 2303 	setb	_TR0
                           000514  2304 	C$Lab2.c$301$2$98 ==.
                                   2305 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:301: while ( counts < 338) // Wait 1 second for player 1 to set pot
      000514                       2306 00101$:
      000514 C3               [12] 2307 	clr	c
      000515 E5*00            [12] 2308 	mov	a,_counts
      000517 94 52            [12] 2309 	subb	a,#0x52
      000519 E5*01            [12] 2310 	mov	a,(_counts + 1)
      00051B 94 01            [12] 2311 	subb	a,#0x01
      00051D 50 22            [24] 2312 	jnc	00103$
                           00051F  2313 	C$Lab2.c$303$3$99 ==.
                                   2314 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:303: LightNumLEDs(MapADC(read_AD_input(),0,4)); // Light the corresponding number of LEDs relative to the value of the potentionmeter. (Dosn't need to be here)
      00051F 12r01r99         [24] 2315 	lcall	_read_AD_input
      000522 12r00r00         [24] 2316 	lcall	___uchar2fs
      000525 AC 82            [24] 2317 	mov	r4,dpl
      000527 AD 83            [24] 2318 	mov	r5,dph
      000529 AE F0            [24] 2319 	mov	r6,b
      00052B FF               [12] 2320 	mov	r7,a
      00052C 75*28 00         [24] 2321 	mov	_MapADC_PARM_2,#0x00
      00052F 75*29 04         [24] 2322 	mov	_MapADC_PARM_3,#0x04
      000532 8C 82            [24] 2323 	mov	dpl,r4
      000534 8D 83            [24] 2324 	mov	dph,r5
      000536 8E F0            [24] 2325 	mov	b,r6
      000538 EF               [12] 2326 	mov	a,r7
      000539 12r09r68         [24] 2327 	lcall	_MapADC
      00053C 12r0Ar1F         [24] 2328 	lcall	_LightNumLEDs
      00053F 80 D3            [24] 2329 	sjmp	00101$
      000541                       2330 00103$:
                           000541  2331 	C$Lab2.c$306$2$98 ==.
                                   2332 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:306: SetBILED('o'); // Turn off BILED
      000541 75 82 6F         [24] 2333 	mov	dpl,#0x6f
      000544 12r0Ar54         [24] 2334 	lcall	_SetBILED
                           000547  2335 	C$Lab2.c$307$2$98 ==.
                                   2336 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:307: numLEDs = MapADC(read_AD_input(),0,4); // Read the corresponding number of LEDs relative to the value of the potentionmeter
      000547 12r01r99         [24] 2337 	lcall	_read_AD_input
      00054A 12r00r00         [24] 2338 	lcall	___uchar2fs
      00054D AC 82            [24] 2339 	mov	r4,dpl
      00054F AD 83            [24] 2340 	mov	r5,dph
      000551 AE F0            [24] 2341 	mov	r6,b
      000553 FF               [12] 2342 	mov	r7,a
      000554 75*28 00         [24] 2343 	mov	_MapADC_PARM_2,#0x00
      000557 75*29 04         [24] 2344 	mov	_MapADC_PARM_3,#0x04
      00055A 8C 82            [24] 2345 	mov	dpl,r4
      00055C 8D 83            [24] 2346 	mov	dph,r5
      00055E 8E F0            [24] 2347 	mov	b,r6
      000560 EF               [12] 2348 	mov	a,r7
      000561 12r09r68         [24] 2349 	lcall	_MapADC
      000564 AF 82            [24] 2350 	mov	r7,dpl
      000566 8F*1E            [24] 2351 	mov	_numLEDs,r7
      000568 75*1F 00         [24] 2352 	mov	(_numLEDs + 1),#0x00
                           00056B  2353 	C$Lab2.c$308$2$98 ==.
                                   2354 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:308: LightNumLEDs(numLEDs); // Light the corresponding number of LEDs
      00056B 85*1E 82         [24] 2355 	mov	dpl,_numLEDs
      00056E 12r0Ar1F         [24] 2356 	lcall	_LightNumLEDs
                           000571  2357 	C$Lab2.c$309$2$98 ==.
                                   2358 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:309: ClearTimer0(); // Clear timer and overflows
      000571 12r0Ar48         [24] 2359 	lcall	_ClearTimer0
                           000574  2360 	C$Lab2.c$310$2$98 ==.
                                   2361 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:310: TR0 = 1; // Start timer0
      000574 D2 8C            [12] 2362 	setb	_TR0
                           000576  2363 	C$Lab2.c$311$2$98 ==.
                                   2364 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:311: while (counts < overflows[tries]) // Wait for round timer to end
      000576                       2365 00106$:
      000576 E5*20            [12] 2366 	mov	a,_tries
      000578 25*20            [12] 2367 	add	a,_tries
      00057A FE               [12] 2368 	mov	r6,a
      00057B E5*21            [12] 2369 	mov	a,(_tries + 1)
      00057D 33               [12] 2370 	rlc	a
      00057E EE               [12] 2371 	mov	a,r6
      00057F 24r14            [12] 2372 	add	a,#_overflows
      000581 F9               [12] 2373 	mov	r1,a
      000582 87 06            [24] 2374 	mov	ar6,@r1
      000584 09               [12] 2375 	inc	r1
      000585 87 07            [24] 2376 	mov	ar7,@r1
      000587 19               [12] 2377 	dec	r1
      000588 C3               [12] 2378 	clr	c
      000589 E5*00            [12] 2379 	mov	a,_counts
      00058B 9E               [12] 2380 	subb	a,r6
      00058C E5*01            [12] 2381 	mov	a,(_counts + 1)
      00058E 9F               [12] 2382 	subb	a,r7
      00058F 50 12            [24] 2383 	jnc	00108$
                           000591  2384 	C$Lab2.c$313$3$100 ==.
                                   2385 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:313: if(DebounceButton()==1) // If the button was pressed
      000591 12r0Ar79         [24] 2386 	lcall	_DebounceButton
      000594 AF 82            [24] 2387 	mov	r7,dpl
      000596 BF 01 DD         [24] 2388 	cjne	r7,#0x01,00106$
                           000599  2389 	C$Lab2.c$315$4$101 ==.
                                   2390 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:315: buttonPresses++; // Increment number of presses
      000599 05*10            [12] 2391 	inc	_buttonPresses
      00059B E4               [12] 2392 	clr	a
      00059C B5*10 D7         [24] 2393 	cjne	a,_buttonPresses,00106$
      00059F 05*11            [12] 2394 	inc	(_buttonPresses + 1)
      0005A1 80 D3            [24] 2395 	sjmp	00106$
      0005A3                       2396 00108$:
                           0005A3  2397 	C$Lab2.c$319$2$98 ==.
                                   2398 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:319: if (buttonPresses == numLEDs) // If they got the correct number of presses
      0005A3 E5*1E            [12] 2399 	mov	a,_numLEDs
      0005A5 B5*10 10         [24] 2400 	cjne	a,_buttonPresses,00110$
      0005A8 E5*1F            [12] 2401 	mov	a,(_numLEDs + 1)
      0005AA B5*11 0B         [24] 2402 	cjne	a,(_buttonPresses + 1),00110$
                           0005AD  2403 	C$Lab2.c$321$3$102 ==.
                                   2404 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:321: score += 10; // gain 10 points
      0005AD 74 0A            [12] 2405 	mov	a,#0x0a
      0005AF 25*0E            [12] 2406 	add	a,_score
      0005B1 F5*0E            [12] 2407 	mov	_score,a
      0005B3 E4               [12] 2408 	clr	a
      0005B4 35*0F            [12] 2409 	addc	a,(_score + 1)
      0005B6 F5*0F            [12] 2410 	mov	(_score + 1),a
      0005B8                       2411 00110$:
                           0005B8  2412 	C$Lab2.c$324$2$98 ==.
                                   2413 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:324: ClearTimer0(); // Clear Timer0 and overflows
      0005B8 12r0Ar48         [24] 2414 	lcall	_ClearTimer0
                           0005BB  2415 	C$Lab2.c$325$2$98 ==.
                                   2416 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:325: TR0 = 1; // Start the timer
      0005BB D2 8C            [12] 2417 	setb	_TR0
                           0005BD  2418 	C$Lab2.c$327$2$98 ==.
                                   2419 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:327: SetAllLEDs(1); // Turn off all LEDs
      0005BD 75 82 01         [24] 2420 	mov	dpl,#0x01
      0005C0 12r09r49         [24] 2421 	lcall	_SetAllLEDs
                           0005C3  2422 	C$Lab2.c$328$2$98 ==.
                                   2423 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:328: while (counts < 7); // wait 20ms
      0005C3                       2424 00111$:
      0005C3 C3               [12] 2425 	clr	c
      0005C4 E5*00            [12] 2426 	mov	a,_counts
      0005C6 94 07            [12] 2427 	subb	a,#0x07
      0005C8 E5*01            [12] 2428 	mov	a,(_counts + 1)
      0005CA 94 00            [12] 2429 	subb	a,#0x00
      0005CC 40 F5            [24] 2430 	jc	00111$
                           0005CE  2431 	C$Lab2.c$329$2$98 ==.
                                   2432 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:329: SetAllLEDs(0); // Turn on all LEDs
      0005CE 75 82 00         [24] 2433 	mov	dpl,#0x00
      0005D1 12r09r49         [24] 2434 	lcall	_SetAllLEDs
                           0005D4  2435 	C$Lab2.c$330$2$98 ==.
                                   2436 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:330: ClearTimer0(); // Clear Timer0 and overflows
      0005D4 12r0Ar48         [24] 2437 	lcall	_ClearTimer0
                           0005D7  2438 	C$Lab2.c$331$2$98 ==.
                                   2439 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:331: TR0 = 1; // Start the timer
      0005D7 D2 8C            [12] 2440 	setb	_TR0
                           0005D9  2441 	C$Lab2.c$332$2$98 ==.
                                   2442 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:332: while (counts < 7); // wait 20ms
      0005D9                       2443 00114$:
      0005D9 C3               [12] 2444 	clr	c
      0005DA E5*00            [12] 2445 	mov	a,_counts
      0005DC 94 07            [12] 2446 	subb	a,#0x07
      0005DE E5*01            [12] 2447 	mov	a,(_counts + 1)
      0005E0 94 00            [12] 2448 	subb	a,#0x00
      0005E2 40 F5            [24] 2449 	jc	00114$
                           0005E4  2450 	C$Lab2.c$333$2$98 ==.
                                   2451 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:333: SetAllLEDs(1); // Turn off all LEDs
      0005E4 75 82 01         [24] 2452 	mov	dpl,#0x01
      0005E7 12r09r49         [24] 2453 	lcall	_SetAllLEDs
                           0005EA  2454 	C$Lab2.c$335$2$98 ==.
                                   2455 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:335: CompareVals(buttonPresses, numLEDs); // Turn BILED red or green if it was low or high
      0005EA 85*10 82         [24] 2456 	mov	dpl,_buttonPresses
      0005ED 85*1E*2A         [24] 2457 	mov	_CompareVals_PARM_2,_numLEDs
      0005F0 12r0ArC1         [24] 2458 	lcall	_CompareVals
                           0005F3  2459 	C$Lab2.c$337$2$98 ==.
                                   2460 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:337: if (buttonPresses == numLEDs) // If they got it correct
      0005F3 E5*1E            [12] 2461 	mov	a,_numLEDs
      0005F5 B5*10 1C         [24] 2462 	cjne	a,_buttonPresses,00118$
      0005F8 E5*1F            [12] 2463 	mov	a,(_numLEDs + 1)
      0005FA B5*11 17         [24] 2464 	cjne	a,(_buttonPresses + 1),00118$
                           0005FD  2465 	C$Lab2.c$339$3$103 ==.
                                   2466 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:339: printf("\r\n10 points gained!"); // Show that they gained 10 points
      0005FD 74r9B            [12] 2467 	mov	a,#___str_11
      0005FF C0 E0            [24] 2468 	push	acc
      000601 74s04            [12] 2469 	mov	a,#(___str_11 >> 8)
      000603 C0 E0            [24] 2470 	push	acc
      000605 74 80            [12] 2471 	mov	a,#0x80
      000607 C0 E0            [24] 2472 	push	acc
      000609 12r00r00         [24] 2473 	lcall	_printf
      00060C 15 81            [12] 2474 	dec	sp
      00060E 15 81            [12] 2475 	dec	sp
      000610 15 81            [12] 2476 	dec	sp
      000612 80 15            [24] 2477 	sjmp	00119$
      000614                       2478 00118$:
                           000614  2479 	C$Lab2.c$343$3$104 ==.
                                   2480 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:343: printf("\r\n0 points gained!"); // Show they gained 0 points
      000614 74rAF            [12] 2481 	mov	a,#___str_12
      000616 C0 E0            [24] 2482 	push	acc
      000618 74s04            [12] 2483 	mov	a,#(___str_12 >> 8)
      00061A C0 E0            [24] 2484 	push	acc
      00061C 74 80            [12] 2485 	mov	a,#0x80
      00061E C0 E0            [24] 2486 	push	acc
      000620 12r00r00         [24] 2487 	lcall	_printf
      000623 15 81            [12] 2488 	dec	sp
      000625 15 81            [12] 2489 	dec	sp
      000627 15 81            [12] 2490 	dec	sp
      000629                       2491 00119$:
                           000629  2492 	C$Lab2.c$346$2$98 ==.
                                   2493 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:346: printf("\r\nTotal score: %d",score); // print the total score
      000629 C0*0E            [24] 2494 	push	_score
      00062B C0*0F            [24] 2495 	push	(_score + 1)
      00062D 74rC2            [12] 2496 	mov	a,#___str_13
      00062F C0 E0            [24] 2497 	push	acc
      000631 74s04            [12] 2498 	mov	a,#(___str_13 >> 8)
      000633 C0 E0            [24] 2499 	push	acc
      000635 74 80            [12] 2500 	mov	a,#0x80
      000637 C0 E0            [24] 2501 	push	acc
      000639 12r00r00         [24] 2502 	lcall	_printf
      00063C E5 81            [12] 2503 	mov	a,sp
      00063E 24 FB            [12] 2504 	add	a,#0xfb
      000640 F5 81            [12] 2505 	mov	sp,a
                           000642  2506 	C$Lab2.c$348$2$98 ==.
                                   2507 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:348: ClearTimer0(); // Clear Timer0 and overflows
      000642 12r0Ar48         [24] 2508 	lcall	_ClearTimer0
                           000645  2509 	C$Lab2.c$349$2$98 ==.
                                   2510 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:349: TR0 = 1; // Start the timer
      000645 D2 8C            [12] 2511 	setb	_TR0
                           000647  2512 	C$Lab2.c$351$2$98 ==.
                                   2513 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:351: while (counts < 338) // Wait 1 second
      000647                       2514 00120$:
      000647 C3               [12] 2515 	clr	c
      000648 E5*00            [12] 2516 	mov	a,_counts
      00064A 94 52            [12] 2517 	subb	a,#0x52
      00064C E5*01            [12] 2518 	mov	a,(_counts + 1)
      00064E 94 01            [12] 2519 	subb	a,#0x01
      000650 50 04            [24] 2520 	jnc	00122$
                           000652  2521 	C$Lab2.c$353$3$105 ==.
                                   2522 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:353: TR0 = 1; // Do something to get more accurate time
      000652 D2 8C            [12] 2523 	setb	_TR0
      000654 80 F1            [24] 2524 	sjmp	00120$
      000656                       2525 00122$:
                           000656  2526 	C$Lab2.c$355$2$98 ==.
                                   2527 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:355: SetBILED('o'); // Turn off BILED
      000656 75 82 6F         [24] 2528 	mov	dpl,#0x6f
      000659 12r0Ar54         [24] 2529 	lcall	_SetBILED
                           00065C  2530 	C$Lab2.c$356$2$98 ==.
                                   2531 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:356: ClearTimer0(); // Clear Timer0 and overflows
      00065C 12r0Ar48         [24] 2532 	lcall	_ClearTimer0
                           00065F  2533 	C$Lab2.c$357$2$98 ==.
                                   2534 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:357: TR0 = 1; // Start the timer
      00065F D2 8C            [12] 2535 	setb	_TR0
                           000661  2536 	C$Lab2.c$358$2$98 ==.
                                   2537 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:358: while (counts < 169); // Wait 0.5s
      000661                       2538 00123$:
      000661 C3               [12] 2539 	clr	c
      000662 E5*00            [12] 2540 	mov	a,_counts
      000664 94 A9            [12] 2541 	subb	a,#0xa9
      000666 E5*01            [12] 2542 	mov	a,(_counts + 1)
      000668 94 00            [12] 2543 	subb	a,#0x00
      00066A 40 F5            [24] 2544 	jc	00123$
                           00066C  2545 	C$Lab2.c$294$1$97 ==.
                                   2546 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:294: for (tries = 0; tries < 5; tries++)
      00066C 05*20            [12] 2547 	inc	_tries
      00066E E4               [12] 2548 	clr	a
      00066F B5*20 02         [24] 2549 	cjne	a,_tries,00222$
      000672 05*21            [12] 2550 	inc	(_tries + 1)
      000674                       2551 00222$:
      000674 C3               [12] 2552 	clr	c
      000675 E5*20            [12] 2553 	mov	a,_tries
      000677 94 05            [12] 2554 	subb	a,#0x05
      000679 E5*21            [12] 2555 	mov	a,(_tries + 1)
      00067B 64 80            [12] 2556 	xrl	a,#0x80
      00067D 94 80            [12] 2557 	subb	a,#0x80
      00067F 50 03            [24] 2558 	jnc	00223$
      000681 02r05r04         [24] 2559 	ljmp	00136$
      000684                       2560 00223$:
                           000684  2561 	C$Lab2.c$361$1$97 ==.
                                   2562 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:361: printf("\r\nFinal score: %d", score); // Print the final score
      000684 C0*0E            [24] 2563 	push	_score
      000686 C0*0F            [24] 2564 	push	(_score + 1)
      000688 74rD4            [12] 2565 	mov	a,#___str_14
      00068A C0 E0            [24] 2566 	push	acc
      00068C 74s04            [12] 2567 	mov	a,#(___str_14 >> 8)
      00068E C0 E0            [24] 2568 	push	acc
      000690 74 80            [12] 2569 	mov	a,#0x80
      000692 C0 E0            [24] 2570 	push	acc
      000694 12r00r00         [24] 2571 	lcall	_printf
      000697 E5 81            [12] 2572 	mov	a,sp
      000699 24 FB            [12] 2573 	add	a,#0xfb
      00069B F5 81            [12] 2574 	mov	sp,a
                           00069D  2575 	C$Lab2.c$363$1$97 ==.
                                   2576 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:363: ClearTimer0(); // Clear Timer0 and overflows
      00069D 12r0Ar48         [24] 2577 	lcall	_ClearTimer0
                           0006A0  2578 	C$Lab2.c$364$1$97 ==.
                                   2579 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:364: TR0 = 1; // Start the timer	
      0006A0 D2 8C            [12] 2580 	setb	_TR0
                           0006A2  2581 	C$Lab2.c$365$1$97 ==.
                                   2582 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:365: tmpCount = 0; // Create temp value
      0006A2 E4               [12] 2583 	clr	a
      0006A3 F5*12            [12] 2584 	mov	_tmpCount,a
      0006A5 F5*13            [12] 2585 	mov	(_tmpCount + 1),a
                           0006A7  2586 	C$Lab2.c$367$1$97 ==.
                                   2587 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:367: while (counts < 338) // For 1 second
      0006A7                       2588 00133$:
      0006A7 C3               [12] 2589 	clr	c
      0006A8 E5*00            [12] 2590 	mov	a,_counts
      0006AA 94 52            [12] 2591 	subb	a,#0x52
      0006AC E5*01            [12] 2592 	mov	a,(_counts + 1)
      0006AE 94 01            [12] 2593 	subb	a,#0x01
      0006B0 50 3E            [24] 2594 	jnc	00135$
                           0006B2  2595 	C$Lab2.c$369$2$106 ==.
                                   2596 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:369: SetBILED('r'); // Turn BILED red
      0006B2 75 82 72         [24] 2597 	mov	dpl,#0x72
      0006B5 12r0Ar54         [24] 2598 	lcall	_SetBILED
                           0006B8  2599 	C$Lab2.c$370$2$106 ==.
                                   2600 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:370: tmpCount = counts; // Save current counts
      0006B8 85*00*12         [24] 2601 	mov	_tmpCount,_counts
      0006BB 85*01*13         [24] 2602 	mov	(_tmpCount + 1),(_counts + 1)
                           0006BE  2603 	C$Lab2.c$371$2$106 ==.
                                   2604 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:371: while(counts < (tmpCount + 7)); // wait 20ms
      0006BE                       2605 00127$:
      0006BE 74 07            [12] 2606 	mov	a,#0x07
      0006C0 25*12            [12] 2607 	add	a,_tmpCount
      0006C2 FE               [12] 2608 	mov	r6,a
      0006C3 E4               [12] 2609 	clr	a
      0006C4 35*13            [12] 2610 	addc	a,(_tmpCount + 1)
      0006C6 FF               [12] 2611 	mov	r7,a
      0006C7 C3               [12] 2612 	clr	c
      0006C8 E5*00            [12] 2613 	mov	a,_counts
      0006CA 9E               [12] 2614 	subb	a,r6
      0006CB E5*01            [12] 2615 	mov	a,(_counts + 1)
      0006CD 9F               [12] 2616 	subb	a,r7
      0006CE 40 EE            [24] 2617 	jc	00127$
                           0006D0  2618 	C$Lab2.c$372$2$106 ==.
                                   2619 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:372: SetBILED('g'); // Turn BILED green
      0006D0 75 82 67         [24] 2620 	mov	dpl,#0x67
      0006D3 12r0Ar54         [24] 2621 	lcall	_SetBILED
                           0006D6  2622 	C$Lab2.c$373$2$106 ==.
                                   2623 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:373: tmpCount = counts; // Save current counts
      0006D6 85*00*12         [24] 2624 	mov	_tmpCount,_counts
      0006D9 85*01*13         [24] 2625 	mov	(_tmpCount + 1),(_counts + 1)
                           0006DC  2626 	C$Lab2.c$374$2$106 ==.
                                   2627 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:374: while(counts < (tmpCount + 7)); // wait 20ms
      0006DC                       2628 00130$:
      0006DC 74 07            [12] 2629 	mov	a,#0x07
      0006DE 25*12            [12] 2630 	add	a,_tmpCount
      0006E0 FE               [12] 2631 	mov	r6,a
      0006E1 E4               [12] 2632 	clr	a
      0006E2 35*13            [12] 2633 	addc	a,(_tmpCount + 1)
      0006E4 FF               [12] 2634 	mov	r7,a
      0006E5 C3               [12] 2635 	clr	c
      0006E6 E5*00            [12] 2636 	mov	a,_counts
      0006E8 9E               [12] 2637 	subb	a,r6
      0006E9 E5*01            [12] 2638 	mov	a,(_counts + 1)
      0006EB 9F               [12] 2639 	subb	a,r7
      0006EC 50 B9            [24] 2640 	jnc	00133$
      0006EE 80 EC            [24] 2641 	sjmp	00130$
      0006F0                       2642 00135$:
                           0006F0  2643 	C$Lab2.c$377$1$97 ==.
                                   2644 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:377: SetBILED('o'); // Turn off BILED
      0006F0 75 82 6F         [24] 2645 	mov	dpl,#0x6f
      0006F3 12r0Ar54         [24] 2646 	lcall	_SetBILED
                           0006F6  2647 	C$Lab2.c$378$1$97 ==.
                           0006F6  2648 	XG$Mode_Two$0$0 ==.
      0006F6 22               [24] 2649 	ret
                                   2650 ;------------------------------------------------------------
                                   2651 ;Allocation info for local variables in function 'Mode_Three'
                                   2652 ;------------------------------------------------------------
                                   2653 ;round                     Allocated to registers 
                                   2654 ;------------------------------------------------------------
                           0006F7  2655 	G$Mode_Three$0$0 ==.
                           0006F7  2656 	C$Lab2.c$382$1$97 ==.
                                   2657 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:382: void Mode_Three(void)
                                   2658 ;	-----------------------------------------
                                   2659 ;	 function Mode_Three
                                   2660 ;	-----------------------------------------
      0006F7                       2661 _Mode_Three:
                           0006F7  2662 	C$Lab2.c$386$1$108 ==.
                                   2663 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:386: printf("\n\n\rUse the potentiometer to draw a bar graph on the terminal.\n\rIts length should be a percentage of the maximum length as specified by the number of LEDs lit.\n\n\rNo lit LEDs indicate that the bar should be empty, 1 lit LED indicates a bar 1/4 of the maximum length,\n\r2 lit LEDs indicate 1/2, 3 lit LEDs indicate 3/4, and 4 lit LEDs indicate a full bar.\n\n\rYou have one second to draw the appropriate graph. If the graph is longer than the desired value, the BILED will turn red.\n\rIf the graph is shorter than the desired value, the BILED will turn green.\n\n\rA maximum of 10 points are awarded for each correct answer.\n\rTwo points are deducted for each character position off. There are 5 rounds.\n\n\rPress the pushbutton to start.");
      0006F7 74rE6            [12] 2664 	mov	a,#___str_15
      0006F9 C0 E0            [24] 2665 	push	acc
      0006FB 74s04            [12] 2666 	mov	a,#(___str_15 >> 8)
      0006FD C0 E0            [24] 2667 	push	acc
      0006FF 74 80            [12] 2668 	mov	a,#0x80
      000701 C0 E0            [24] 2669 	push	acc
      000703 12r00r00         [24] 2670 	lcall	_printf
      000706 15 81            [12] 2671 	dec	sp
      000708 15 81            [12] 2672 	dec	sp
      00070A 15 81            [12] 2673 	dec	sp
                           00070C  2674 	C$Lab2.c$388$1$108 ==.
                                   2675 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:388: while(DebounceButton()==0);
      00070C                       2676 00101$:
      00070C 12r0Ar79         [24] 2677 	lcall	_DebounceButton
      00070F E5 82            [12] 2678 	mov	a,dpl
      000711 60 F9            [24] 2679 	jz	00101$
                           000713  2680 	C$Lab2.c$390$1$108 ==.
                                   2681 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:390: printf("\n\n\rSTART");
      000713 74rBC            [12] 2682 	mov	a,#___str_16
      000715 C0 E0            [24] 2683 	push	acc
      000717 74s07            [12] 2684 	mov	a,#(___str_16 >> 8)
      000719 C0 E0            [24] 2685 	push	acc
      00071B 74 80            [12] 2686 	mov	a,#0x80
      00071D C0 E0            [24] 2687 	push	acc
      00071F 12r00r00         [24] 2688 	lcall	_printf
      000722 15 81            [12] 2689 	dec	sp
      000724 15 81            [12] 2690 	dec	sp
      000726 15 81            [12] 2691 	dec	sp
                           000728  2692 	C$Lab2.c$392$1$108 ==.
                                   2693 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:392: score = 0;	// sets score to 0
      000728 E4               [12] 2694 	clr	a
      000729 F5*0E            [12] 2695 	mov	_score,a
      00072B F5*0F            [12] 2696 	mov	(_score + 1),a
                           00072D  2697 	C$Lab2.c$393$1$108 ==.
                                   2698 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:393: totalPoints = 0; // sets total points to 0
      00072D F5*05            [12] 2699 	mov	_totalPoints,a
      00072F F5*06            [12] 2700 	mov	(_totalPoints + 1),a
                           000731  2701 	C$Lab2.c$394$1$108 ==.
                                   2702 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:394: SetAllLEDs(1);	// Turns off all LEDs
      000731 75 82 01         [24] 2703 	mov	dpl,#0x01
      000734 12r09r49         [24] 2704 	lcall	_SetAllLEDs
                           000737  2705 	C$Lab2.c$395$1$108 ==.
                                   2706 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:395: SetBILED('r');	//	turns BILED red
      000737 75 82 72         [24] 2707 	mov	dpl,#0x72
      00073A 12r0Ar54         [24] 2708 	lcall	_SetBILED
                           00073D  2709 	C$Lab2.c$397$1$108 ==.
                                   2710 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:397: for (round = 0; round<=5; round++) {
      00073D 7F 00            [12] 2711 	mov	r7,#0x00
      00073F                       2712 00126$:
                           00073F  2713 	C$Lab2.c$399$2$109 ==.
                                   2714 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:399: score = 0;
      00073F E4               [12] 2715 	clr	a
      000740 F5*0E            [12] 2716 	mov	_score,a
      000742 F5*0F            [12] 2717 	mov	(_score + 1),a
                           000744  2718 	C$Lab2.c$401$2$109 ==.
                                   2719 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:401: randomNumber = random();
      000744 C0 07            [24] 2720 	push	ar7
      000746 12r09r3C         [24] 2721 	lcall	_random
      000749 AE 82            [24] 2722 	mov	r6,dpl
      00074B 8E*07            [24] 2723 	mov	_randomNumber,r6
      00074D 75*08 00         [24] 2724 	mov	(_randomNumber + 1),#0x00
                           000750  2725 	C$Lab2.c$402$2$109 ==.
                                   2726 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:402: LightNumLEDs(randomNumber);
      000750 85*07 82         [24] 2727 	mov	dpl,_randomNumber
      000753 12r0Ar1F         [24] 2728 	lcall	_LightNumLEDs
                           000756  2729 	C$Lab2.c$404$2$109 ==.
                                   2730 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:404: SetBILED('o'); // turns off BILED
      000756 75 82 6F         [24] 2731 	mov	dpl,#0x6f
      000759 12r0Ar54         [24] 2732 	lcall	_SetBILED
                           00075C  2733 	C$Lab2.c$406$2$109 ==.
                                   2734 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:406: ClearTimer0();
      00075C 12r0Ar48         [24] 2735 	lcall	_ClearTimer0
      00075F D0 07            [24] 2736 	pop	ar7
                           000761  2737 	C$Lab2.c$407$2$109 ==.
                                   2738 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:407: TR0 = 1; // starts timer
      000761 D2 8C            [12] 2739 	setb	_TR0
                           000763  2740 	C$Lab2.c$409$2$109 ==.
                                   2741 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:409: while (counts<338) {
      000763                       2742 00104$:
      000763 C3               [12] 2743 	clr	c
      000764 E5*00            [12] 2744 	mov	a,_counts
      000766 94 52            [12] 2745 	subb	a,#0x52
      000768 E5*01            [12] 2746 	mov	a,(_counts + 1)
      00076A 94 01            [12] 2747 	subb	a,#0x01
      00076C 50 0C            [24] 2748 	jnc	00106$
                           00076E  2749 	C$Lab2.c$410$3$110 ==.
                                   2750 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:410: Draw_Bar(read_AD_input());	// continuously reads pot AD value and passes value to Draw_Bar()
      00076E C0 07            [24] 2751 	push	ar7
      000770 12r01r99         [24] 2752 	lcall	_read_AD_input
      000773 12r08rE0         [24] 2753 	lcall	_Draw_Bar
      000776 D0 07            [24] 2754 	pop	ar7
      000778 80 E9            [24] 2755 	sjmp	00104$
      00077A                       2756 00106$:
                           00077A  2757 	C$Lab2.c$413$2$109 ==.
                                   2758 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:413: ADC_value = read_AD_input();	// saves current ADC value
      00077A C0 07            [24] 2759 	push	ar7
      00077C 12r01r99         [24] 2760 	lcall	_read_AD_input
      00077F AE 82            [24] 2761 	mov	r6,dpl
      000781 8E*0A            [24] 2762 	mov	_ADC_value,r6
      000783 75*0B 00         [24] 2763 	mov	(_ADC_value + 1),#0x00
                           000786  2764 	C$Lab2.c$415$2$109 ==.
                                   2765 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:415: Flash_LEDs();
      000786 12r02r84         [24] 2766 	lcall	_Flash_LEDs
      000789 D0 07            [24] 2767 	pop	ar7
                           00078B  2768 	C$Lab2.c$417$2$109 ==.
                                   2769 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:417: if (randomNumber == 0) 
      00078B E5*07            [12] 2770 	mov	a,_randomNumber
      00078D 45*08            [12] 2771 	orl	a,(_randomNumber + 1)
                           00078F  2772 	C$Lab2.c$418$2$109 ==.
                                   2773 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:418: desiredValue = 0;
      00078F 70 06            [24] 2774 	jnz	00117$
      000791 F5*23            [12] 2775 	mov	_desiredValue,a
      000793 F5*24            [12] 2776 	mov	(_desiredValue + 1),a
      000795 80 45            [24] 2777 	sjmp	00118$
      000797                       2778 00117$:
                           000797  2779 	C$Lab2.c$419$2$109 ==.
                                   2780 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:419: else if (randomNumber == 1)
      000797 74 01            [12] 2781 	mov	a,#0x01
      000799 B5*07 06         [24] 2782 	cjne	a,_randomNumber,00173$
      00079C 14               [12] 2783 	dec	a
      00079D B5*08 02         [24] 2784 	cjne	a,(_randomNumber + 1),00173$
      0007A0 80 02            [24] 2785 	sjmp	00174$
      0007A2                       2786 00173$:
      0007A2 80 08            [24] 2787 	sjmp	00114$
      0007A4                       2788 00174$:
                           0007A4  2789 	C$Lab2.c$420$2$109 ==.
                                   2790 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:420: desiredValue = 16;
      0007A4 75*23 10         [24] 2791 	mov	_desiredValue,#0x10
      0007A7 75*24 00         [24] 2792 	mov	(_desiredValue + 1),#0x00
      0007AA 80 30            [24] 2793 	sjmp	00118$
      0007AC                       2794 00114$:
                           0007AC  2795 	C$Lab2.c$421$2$109 ==.
                                   2796 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:421: else if (randomNumber == 2)
      0007AC 74 02            [12] 2797 	mov	a,#0x02
      0007AE B5*07 06         [24] 2798 	cjne	a,_randomNumber,00175$
      0007B1 E4               [12] 2799 	clr	a
      0007B2 B5*08 02         [24] 2800 	cjne	a,(_randomNumber + 1),00175$
      0007B5 80 02            [24] 2801 	sjmp	00176$
      0007B7                       2802 00175$:
      0007B7 80 08            [24] 2803 	sjmp	00111$
      0007B9                       2804 00176$:
                           0007B9  2805 	C$Lab2.c$422$2$109 ==.
                                   2806 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:422: desiredValue = 32;
      0007B9 75*23 20         [24] 2807 	mov	_desiredValue,#0x20
      0007BC 75*24 00         [24] 2808 	mov	(_desiredValue + 1),#0x00
      0007BF 80 1B            [24] 2809 	sjmp	00118$
      0007C1                       2810 00111$:
                           0007C1  2811 	C$Lab2.c$423$2$109 ==.
                                   2812 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:423: else if (randomNumber == 3)
      0007C1 74 03            [12] 2813 	mov	a,#0x03
      0007C3 B5*07 06         [24] 2814 	cjne	a,_randomNumber,00177$
      0007C6 E4               [12] 2815 	clr	a
      0007C7 B5*08 02         [24] 2816 	cjne	a,(_randomNumber + 1),00177$
      0007CA 80 02            [24] 2817 	sjmp	00178$
      0007CC                       2818 00177$:
      0007CC 80 08            [24] 2819 	sjmp	00108$
      0007CE                       2820 00178$:
                           0007CE  2821 	C$Lab2.c$424$2$109 ==.
                                   2822 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:424: desiredValue = 48;
      0007CE 75*23 30         [24] 2823 	mov	_desiredValue,#0x30
      0007D1 75*24 00         [24] 2824 	mov	(_desiredValue + 1),#0x00
      0007D4 80 06            [24] 2825 	sjmp	00118$
      0007D6                       2826 00108$:
                           0007D6  2827 	C$Lab2.c$426$2$109 ==.
                                   2828 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:426: desiredValue = 63;
      0007D6 75*23 3F         [24] 2829 	mov	_desiredValue,#0x3f
      0007D9 75*24 00         [24] 2830 	mov	(_desiredValue + 1),#0x00
      0007DC                       2831 00118$:
                           0007DC  2832 	C$Lab2.c$428$1$108 ==.
                                   2833 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:428: CompareVals(MapADC(ADC_value, 0, 63), desiredValue);
      0007DC 85*0A 82         [24] 2834 	mov	dpl,_ADC_value
      0007DF 85*0B 83         [24] 2835 	mov	dph,(_ADC_value + 1)
      0007E2 C0 07            [24] 2836 	push	ar7
      0007E4 12r00r00         [24] 2837 	lcall	___uint2fs
      0007E7 AB 82            [24] 2838 	mov	r3,dpl
      0007E9 AC 83            [24] 2839 	mov	r4,dph
      0007EB AD F0            [24] 2840 	mov	r5,b
      0007ED FE               [12] 2841 	mov	r6,a
      0007EE 75*28 00         [24] 2842 	mov	_MapADC_PARM_2,#0x00
      0007F1 75*29 3F         [24] 2843 	mov	_MapADC_PARM_3,#0x3f
      0007F4 8B 82            [24] 2844 	mov	dpl,r3
      0007F6 8C 83            [24] 2845 	mov	dph,r4
      0007F8 8D F0            [24] 2846 	mov	b,r5
      0007FA EE               [12] 2847 	mov	a,r6
      0007FB 12r09r68         [24] 2848 	lcall	_MapADC
      0007FE 85*23*2A         [24] 2849 	mov	_CompareVals_PARM_2,_desiredValue
      000801 12r0ArC1         [24] 2850 	lcall	_CompareVals
                           000804  2851 	C$Lab2.c$430$1$108 ==.
                                   2852 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:430: error = (abs(desiredValue - MapADC(ADC_value, 0, 63))*2);	// calculates error
      000804 85*0A 82         [24] 2853 	mov	dpl,_ADC_value
      000807 85*0B 83         [24] 2854 	mov	dph,(_ADC_value + 1)
      00080A 12r00r00         [24] 2855 	lcall	___uint2fs
      00080D AB 82            [24] 2856 	mov	r3,dpl
      00080F AC 83            [24] 2857 	mov	r4,dph
      000811 AD F0            [24] 2858 	mov	r5,b
      000813 FE               [12] 2859 	mov	r6,a
      000814 75*28 00         [24] 2860 	mov	_MapADC_PARM_2,#0x00
      000817 75*29 3F         [24] 2861 	mov	_MapADC_PARM_3,#0x3f
      00081A 8B 82            [24] 2862 	mov	dpl,r3
      00081C 8C 83            [24] 2863 	mov	dph,r4
      00081E 8D F0            [24] 2864 	mov	b,r5
      000820 EE               [12] 2865 	mov	a,r6
      000821 12r09r68         [24] 2866 	lcall	_MapADC
      000824 AE 82            [24] 2867 	mov	r6,dpl
      000826 7D 00            [12] 2868 	mov	r5,#0x00
      000828 E5*23            [12] 2869 	mov	a,_desiredValue
      00082A C3               [12] 2870 	clr	c
      00082B 9E               [12] 2871 	subb	a,r6
      00082C F5 82            [12] 2872 	mov	dpl,a
      00082E E5*24            [12] 2873 	mov	a,(_desiredValue + 1)
      000830 9D               [12] 2874 	subb	a,r5
      000831 F5 83            [12] 2875 	mov	dph,a
      000833 12r00r00         [24] 2876 	lcall	_abs
      000836 AD 82            [24] 2877 	mov	r5,dpl
      000838 AE 83            [24] 2878 	mov	r6,dph
      00083A D0 07            [24] 2879 	pop	ar7
      00083C 8D*0C            [24] 2880 	mov	_error,r5
      00083E EE               [12] 2881 	mov	a,r6
      00083F C5*0C            [12] 2882 	xch	a,_error
      000841 25 E0            [12] 2883 	add	a,acc
      000843 C5*0C            [12] 2884 	xch	a,_error
      000845 33               [12] 2885 	rlc	a
      000846 F5*0D            [12] 2886 	mov	(_error + 1),a
                           000848  2887 	C$Lab2.c$433$2$109 ==.
                                   2888 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:433: if (error<10) {					// calculates score for round
      000848 C3               [12] 2889 	clr	c
      000849 E5*0C            [12] 2890 	mov	a,_error
      00084B 94 0A            [12] 2891 	subb	a,#0x0a
      00084D E5*0D            [12] 2892 	mov	a,(_error + 1)
      00084F 94 00            [12] 2893 	subb	a,#0x00
      000851 50 0E            [24] 2894 	jnc	00120$
                           000853  2895 	C$Lab2.c$434$3$111 ==.
                                   2896 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:434: score = (10 - error);
      000853 74 0A            [12] 2897 	mov	a,#0x0a
      000855 C3               [12] 2898 	clr	c
      000856 95*0C            [12] 2899 	subb	a,_error
      000858 F5*0E            [12] 2900 	mov	_score,a
      00085A E4               [12] 2901 	clr	a
      00085B 95*0D            [12] 2902 	subb	a,(_error + 1)
      00085D F5*0F            [12] 2903 	mov	(_score + 1),a
      00085F 80 05            [24] 2904 	sjmp	00121$
      000861                       2905 00120$:
                           000861  2906 	C$Lab2.c$437$3$112 ==.
                                   2907 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:437: score = 0;
      000861 E4               [12] 2908 	clr	a
      000862 F5*0E            [12] 2909 	mov	_score,a
      000864 F5*0F            [12] 2910 	mov	(_score + 1),a
      000866                       2911 00121$:
                           000866  2912 	C$Lab2.c$440$2$109 ==.
                                   2913 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:440: totalPoints = totalPoints + score;		// calculates total score
      000866 E5*0E            [12] 2914 	mov	a,_score
      000868 25*05            [12] 2915 	add	a,_totalPoints
      00086A F5*05            [12] 2916 	mov	_totalPoints,a
      00086C E5*0F            [12] 2917 	mov	a,(_score + 1)
      00086E 35*06            [12] 2918 	addc	a,(_totalPoints + 1)
      000870 F5*06            [12] 2919 	mov	(_totalPoints + 1),a
                           000872  2920 	C$Lab2.c$442$2$109 ==.
                                   2921 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:442: printf("\n\n\rScore for this round: %d", score);
      000872 C0 07            [24] 2922 	push	ar7
      000874 C0*0E            [24] 2923 	push	_score
      000876 C0*0F            [24] 2924 	push	(_score + 1)
      000878 74rC5            [12] 2925 	mov	a,#___str_17
      00087A C0 E0            [24] 2926 	push	acc
      00087C 74s07            [12] 2927 	mov	a,#(___str_17 >> 8)
      00087E C0 E0            [24] 2928 	push	acc
      000880 74 80            [12] 2929 	mov	a,#0x80
      000882 C0 E0            [24] 2930 	push	acc
      000884 12r00r00         [24] 2931 	lcall	_printf
      000887 E5 81            [12] 2932 	mov	a,sp
      000889 24 FB            [12] 2933 	add	a,#0xfb
      00088B F5 81            [12] 2934 	mov	sp,a
                           00088D  2935 	C$Lab2.c$443$2$109 ==.
                                   2936 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:443: printf("\n\rTotal score: %d\n\n\r", totalPoints);	// display score for round and cumulative score
      00088D C0*05            [24] 2937 	push	_totalPoints
      00088F C0*06            [24] 2938 	push	(_totalPoints + 1)
      000891 74rE1            [12] 2939 	mov	a,#___str_18
      000893 C0 E0            [24] 2940 	push	acc
      000895 74s07            [12] 2941 	mov	a,#(___str_18 >> 8)
      000897 C0 E0            [24] 2942 	push	acc
      000899 74 80            [12] 2943 	mov	a,#0x80
      00089B C0 E0            [24] 2944 	push	acc
      00089D 12r00r00         [24] 2945 	lcall	_printf
      0008A0 E5 81            [12] 2946 	mov	a,sp
      0008A2 24 FB            [12] 2947 	add	a,#0xfb
      0008A4 F5 81            [12] 2948 	mov	sp,a
                           0008A6  2949 	C$Lab2.c$445$2$109 ==.
                                   2950 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:445: ClearTimer0();
      0008A6 12r0Ar48         [24] 2951 	lcall	_ClearTimer0
      0008A9 D0 07            [24] 2952 	pop	ar7
                           0008AB  2953 	C$Lab2.c$446$2$109 ==.
                                   2954 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:446: TR0 = 1;		// starts timer
      0008AB D2 8C            [12] 2955 	setb	_TR0
                           0008AD  2956 	C$Lab2.c$448$2$109 ==.
                                   2957 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:448: while (counts!=169);		// delay for .5s
      0008AD                       2958 00122$:
      0008AD 74 A9            [12] 2959 	mov	a,#0xa9
      0008AF B5*00 06         [24] 2960 	cjne	a,_counts,00180$
      0008B2 E4               [12] 2961 	clr	a
      0008B3 B5*01 02         [24] 2962 	cjne	a,(_counts + 1),00180$
      0008B6 80 02            [24] 2963 	sjmp	00181$
      0008B8                       2964 00180$:
      0008B8 80 F3            [24] 2965 	sjmp	00122$
      0008BA                       2966 00181$:
                           0008BA  2967 	C$Lab2.c$397$1$108 ==.
                                   2968 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:397: for (round = 0; round<=5; round++) {
      0008BA 0F               [12] 2969 	inc	r7
      0008BB EF               [12] 2970 	mov	a,r7
      0008BC 24 FA            [12] 2971 	add	a,#0xff - 0x05
      0008BE 40 03            [24] 2972 	jc	00182$
      0008C0 02r07r3F         [24] 2973 	ljmp	00126$
      0008C3                       2974 00182$:
                           0008C3  2975 	C$Lab2.c$452$1$108 ==.
                                   2976 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:452: printf("\n\n\rFinal score: %d", totalPoints);	// print final score
      0008C3 C0*05            [24] 2977 	push	_totalPoints
      0008C5 C0*06            [24] 2978 	push	(_totalPoints + 1)
      0008C7 74rF6            [12] 2979 	mov	a,#___str_19
      0008C9 C0 E0            [24] 2980 	push	acc
      0008CB 74s07            [12] 2981 	mov	a,#(___str_19 >> 8)
      0008CD C0 E0            [24] 2982 	push	acc
      0008CF 74 80            [12] 2983 	mov	a,#0x80
      0008D1 C0 E0            [24] 2984 	push	acc
      0008D3 12r00r00         [24] 2985 	lcall	_printf
      0008D6 E5 81            [12] 2986 	mov	a,sp
      0008D8 24 FB            [12] 2987 	add	a,#0xfb
      0008DA F5 81            [12] 2988 	mov	sp,a
                           0008DC  2989 	C$Lab2.c$454$1$108 ==.
                                   2990 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:454: Flash_Biled();		// flash BILED red and green for 1s
      0008DC 12r01rAB         [24] 2991 	lcall	_Flash_Biled
                           0008DF  2992 	C$Lab2.c$455$1$108 ==.
                           0008DF  2993 	XG$Mode_Three$0$0 ==.
      0008DF 22               [24] 2994 	ret
                                   2995 ;------------------------------------------------------------
                                   2996 ;Allocation info for local variables in function 'Draw_Bar'
                                   2997 ;------------------------------------------------------------
                                   2998 ;length                    Allocated to registers r7 
                                   2999 ;i                         Allocated to registers r6 
                                   3000 ;------------------------------------------------------------
                           0008E0  3001 	G$Draw_Bar$0$0 ==.
                           0008E0  3002 	C$Lab2.c$462$1$108 ==.
                                   3003 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:462: void Draw_Bar(unsigned char length)		
                                   3004 ;	-----------------------------------------
                                   3005 ;	 function Draw_Bar
                                   3006 ;	-----------------------------------------
      0008E0                       3007 _Draw_Bar:
                           0008E0  3008 	C$Lab2.c$466$1$114 ==.
                                   3009 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:466: length = length/4;
      0008E0 E5 82            [12] 3010 	mov	a,dpl
      0008E2 03               [12] 3011 	rr	a
      0008E3 03               [12] 3012 	rr	a
      0008E4 54 3F            [12] 3013 	anl	a,#0x3f
      0008E6 FF               [12] 3014 	mov	r7,a
                           0008E7  3015 	C$Lab2.c$468$1$114 ==.
                                   3016 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:468: for (i=0; i<length; i++) putchar('#');				// prints '#'
      0008E7 7E 00            [12] 3017 	mov	r6,#0x00
      0008E9                       3018 00104$:
      0008E9 C3               [12] 3019 	clr	c
      0008EA EE               [12] 3020 	mov	a,r6
      0008EB 9F               [12] 3021 	subb	a,r7
      0008EC 50 11            [24] 3022 	jnc	00101$
      0008EE 75 82 23         [24] 3023 	mov	dpl,#0x23
      0008F1 C0 07            [24] 3024 	push	ar7
      0008F3 C0 06            [24] 3025 	push	ar6
      0008F5 12r00r4A         [24] 3026 	lcall	_putchar
      0008F8 D0 06            [24] 3027 	pop	ar6
      0008FA D0 07            [24] 3028 	pop	ar7
      0008FC 0E               [12] 3029 	inc	r6
      0008FD 80 EA            [24] 3030 	sjmp	00104$
      0008FF                       3031 00101$:
                           0008FF  3032 	C$Lab2.c$469$1$114 ==.
                                   3033 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:469: length = 63 - length;			// clears the rest of the line
      0008FF 74 3F            [12] 3034 	mov	a,#0x3f
      000901 C3               [12] 3035 	clr	c
      000902 9F               [12] 3036 	subb	a,r7
      000903 FF               [12] 3037 	mov	r7,a
                           000904  3038 	C$Lab2.c$470$1$114 ==.
                                   3039 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:470: for (i=0; i<length; i++) putchar(' ');				// prints (63-length) spaces
      000904 7E 00            [12] 3040 	mov	r6,#0x00
      000906                       3041 00107$:
      000906 C3               [12] 3042 	clr	c
      000907 EE               [12] 3043 	mov	a,r6
      000908 9F               [12] 3044 	subb	a,r7
      000909 50 11            [24] 3045 	jnc	00102$
      00090B 75 82 20         [24] 3046 	mov	dpl,#0x20
      00090E C0 07            [24] 3047 	push	ar7
      000910 C0 06            [24] 3048 	push	ar6
      000912 12r00r4A         [24] 3049 	lcall	_putchar
      000915 D0 06            [24] 3050 	pop	ar6
      000917 D0 07            [24] 3051 	pop	ar7
      000919 0E               [12] 3052 	inc	r6
      00091A 80 EA            [24] 3053 	sjmp	00107$
      00091C                       3054 00102$:
                           00091C  3055 	C$Lab2.c$471$1$114 ==.
                                   3056 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:471: putchar('|');					// prints end of bar '|'
      00091C 75 82 7C         [24] 3057 	mov	dpl,#0x7c
      00091F 12r00r4A         [24] 3058 	lcall	_putchar
                           000922  3059 	C$Lab2.c$473$1$114 ==.
                                   3060 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:473: putchar('\r');					// return to beginning of line
      000922 75 82 0D         [24] 3061 	mov	dpl,#0x0d
      000925 12r00r4A         [24] 3062 	lcall	_putchar
                           000928  3063 	C$Lab2.c$474$1$114 ==.
                           000928  3064 	XG$Draw_Bar$0$0 ==.
      000928 22               [24] 3065 	ret
                                   3066 ;------------------------------------------------------------
                                   3067 ;Allocation info for local variables in function 'Timer0_ISR'
                                   3068 ;------------------------------------------------------------
                           000929  3069 	G$Timer0_ISR$0$0 ==.
                           000929  3070 	C$Lab2.c$477$1$114 ==.
                                   3071 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:477: void Timer0_ISR(void) __interrupt 1
                                   3072 ;	-----------------------------------------
                                   3073 ;	 function Timer0_ISR
                                   3074 ;	-----------------------------------------
      000929                       3075 _Timer0_ISR:
      000929 C0 E0            [24] 3076 	push	acc
      00092B C0 D0            [24] 3077 	push	psw
                           00092D  3078 	C$Lab2.c$479$1$116 ==.
                                   3079 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:479: TF0 = 0;
      00092D C2 8D            [12] 3080 	clr	_TF0
                           00092F  3081 	C$Lab2.c$480$1$116 ==.
                                   3082 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:480: counts++;	// increments the global variable 'counts'
      00092F 05*00            [12] 3083 	inc	_counts
      000931 E4               [12] 3084 	clr	a
      000932 B5*00 02         [24] 3085 	cjne	a,_counts,00103$
      000935 05*01            [12] 3086 	inc	(_counts + 1)
      000937                       3087 00103$:
      000937 D0 D0            [24] 3088 	pop	psw
      000939 D0 E0            [24] 3089 	pop	acc
                           00093B  3090 	C$Lab2.c$481$1$116 ==.
                           00093B  3091 	XG$Timer0_ISR$0$0 ==.
      00093B 32               [24] 3092 	reti
                                   3093 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   3094 ;	eliminated unneeded push/pop dpl
                                   3095 ;	eliminated unneeded push/pop dph
                                   3096 ;	eliminated unneeded push/pop b
                                   3097 ;------------------------------------------------------------
                                   3098 ;Allocation info for local variables in function 'random'
                                   3099 ;------------------------------------------------------------
                           00093C  3100 	G$random$0$0 ==.
                           00093C  3101 	C$Lab2.c$485$1$116 ==.
                                   3102 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:485: unsigned char random(void)
                                   3103 ;	-----------------------------------------
                                   3104 ;	 function random
                                   3105 ;	-----------------------------------------
      00093C                       3106 _random:
                           00093C  3107 	C$Lab2.c$487$1$118 ==.
                                   3108 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:487: return (rand()%5);  // rand returns a random number between 0 and 32767.
      00093C 12r00r00         [24] 3109 	lcall	_rand
      00093F 75*00 05         [24] 3110 	mov	__modsint_PARM_2,#0x05
      000942 75*01 00         [24] 3111 	mov	(__modsint_PARM_2 + 1),#0x00
      000945 12r00r00         [24] 3112 	lcall	__modsint
                           000948  3113 	C$Lab2.c$491$1$118 ==.
                           000948  3114 	XG$random$0$0 ==.
      000948 22               [24] 3115 	ret
                                   3116 ;------------------------------------------------------------
                                   3117 ;Allocation info for local variables in function 'SetAllLEDs'
                                   3118 ;------------------------------------------------------------
                                   3119 ;sloc0                     Allocated with name '_SetAllLEDs_sloc0_1_0'
                                   3120 ;num                       Allocated to registers r7 
                                   3121 ;------------------------------------------------------------
                           000949  3122 	G$SetAllLEDs$0$0 ==.
                           000949  3123 	C$Lab2.c$494$1$118 ==.
                                   3124 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:494: void SetAllLEDs(char num) // Sets the output of all LEDs
                                   3125 ;	-----------------------------------------
                                   3126 ;	 function SetAllLEDs
                                   3127 ;	-----------------------------------------
      000949                       3128 _SetAllLEDs:
                           000949  3129 	C$Lab2.c$496$1$120 ==.
                                   3130 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:496: LED0 = num;
      000949 E5 82            [12] 3131 	mov	a,dpl
      00094B 24 FF            [12] 3132 	add	a,#0xff
      00094D E4               [12] 3133 	clr	a
      00094E 33               [12] 3134 	rlc	a
      00094F F5*27            [12] 3135 	mov	_SetAllLEDs_sloc0_1_0,a
      000951 24 FF            [12] 3136 	add	a,#0xff
      000953 92 B6            [24] 3137 	mov	_LED0,c
                           000955  3138 	C$Lab2.c$497$1$120 ==.
                                   3139 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:497: LED1 = num;
      000955 E5*27            [12] 3140 	mov	a,_SetAllLEDs_sloc0_1_0
      000957 24 FF            [12] 3141 	add	a,#0xff
      000959 92 B5            [24] 3142 	mov	_LED1,c
                           00095B  3143 	C$Lab2.c$498$1$120 ==.
                                   3144 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:498: LED2 = num;
      00095B E5*27            [12] 3145 	mov	a,_SetAllLEDs_sloc0_1_0
      00095D 24 FF            [12] 3146 	add	a,#0xff
      00095F 92 B7            [24] 3147 	mov	_LED2,c
                           000961  3148 	C$Lab2.c$499$1$120 ==.
                                   3149 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:499: LED3 = num;	
      000961 E5*27            [12] 3150 	mov	a,_SetAllLEDs_sloc0_1_0
      000963 24 FF            [12] 3151 	add	a,#0xff
      000965 92 B2            [24] 3152 	mov	_LED3,c
                           000967  3153 	C$Lab2.c$500$1$120 ==.
                           000967  3154 	XG$SetAllLEDs$0$0 ==.
      000967 22               [24] 3155 	ret
                                   3156 ;------------------------------------------------------------
                                   3157 ;Allocation info for local variables in function 'MapADC'
                                   3158 ;------------------------------------------------------------
                                   3159 ;low                       Allocated with name '_MapADC_PARM_2'
                                   3160 ;high                      Allocated with name '_MapADC_PARM_3'
                                   3161 ;val                       Allocated to registers r4 r5 r6 r7 
                                   3162 ;------------------------------------------------------------
                           000968  3163 	G$MapADC$0$0 ==.
                           000968  3164 	C$Lab2.c$503$1$120 ==.
                                   3165 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:503: unsigned char MapADC(float val,unsigned char low, unsigned char high)
                                   3166 ;	-----------------------------------------
                                   3167 ;	 function MapADC
                                   3168 ;	-----------------------------------------
      000968                       3169 _MapADC:
      000968 AC 82            [24] 3170 	mov	r4,dpl
      00096A AD 83            [24] 3171 	mov	r5,dph
      00096C AE F0            [24] 3172 	mov	r6,b
      00096E FF               [12] 3173 	mov	r7,a
                           00096F  3174 	C$Lab2.c$517$1$122 ==.
                                   3175 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:517: return ((high - low)*((val/255.0)) + low); // return mapped value
      00096F E5*29            [12] 3176 	mov	a,_MapADC_PARM_3
      000971 C3               [12] 3177 	clr	c
      000972 95*28            [12] 3178 	subb	a,_MapADC_PARM_2
      000974 FB               [12] 3179 	mov	r3,a
      000975 C0 03            [24] 3180 	push	ar3
      000977 E4               [12] 3181 	clr	a
      000978 C0 E0            [24] 3182 	push	acc
      00097A C0 E0            [24] 3183 	push	acc
      00097C 74 7F            [12] 3184 	mov	a,#0x7f
      00097E C0 E0            [24] 3185 	push	acc
      000980 74 43            [12] 3186 	mov	a,#0x43
      000982 C0 E0            [24] 3187 	push	acc
      000984 8C 82            [24] 3188 	mov	dpl,r4
      000986 8D 83            [24] 3189 	mov	dph,r5
      000988 8E F0            [24] 3190 	mov	b,r6
      00098A EF               [12] 3191 	mov	a,r7
      00098B 12r00r00         [24] 3192 	lcall	___fsdiv
      00098E AC 82            [24] 3193 	mov	r4,dpl
      000990 AD 83            [24] 3194 	mov	r5,dph
      000992 AE F0            [24] 3195 	mov	r6,b
      000994 FF               [12] 3196 	mov	r7,a
      000995 E5 81            [12] 3197 	mov	a,sp
      000997 24 FC            [12] 3198 	add	a,#0xfc
      000999 F5 81            [12] 3199 	mov	sp,a
      00099B D0 03            [24] 3200 	pop	ar3
      00099D 8B 82            [24] 3201 	mov	dpl,r3
      00099F C0 07            [24] 3202 	push	ar7
      0009A1 C0 06            [24] 3203 	push	ar6
      0009A3 C0 05            [24] 3204 	push	ar5
      0009A5 C0 04            [24] 3205 	push	ar4
      0009A7 12r00r00         [24] 3206 	lcall	___uchar2fs
      0009AA A8 82            [24] 3207 	mov	r0,dpl
      0009AC A9 83            [24] 3208 	mov	r1,dph
      0009AE AA F0            [24] 3209 	mov	r2,b
      0009B0 FB               [12] 3210 	mov	r3,a
      0009B1 D0 04            [24] 3211 	pop	ar4
      0009B3 D0 05            [24] 3212 	pop	ar5
      0009B5 D0 06            [24] 3213 	pop	ar6
      0009B7 D0 07            [24] 3214 	pop	ar7
      0009B9 C0 04            [24] 3215 	push	ar4
      0009BB C0 05            [24] 3216 	push	ar5
      0009BD C0 06            [24] 3217 	push	ar6
      0009BF C0 07            [24] 3218 	push	ar7
      0009C1 88 82            [24] 3219 	mov	dpl,r0
      0009C3 89 83            [24] 3220 	mov	dph,r1
      0009C5 8A F0            [24] 3221 	mov	b,r2
      0009C7 EB               [12] 3222 	mov	a,r3
      0009C8 12r00r00         [24] 3223 	lcall	___fsmul
      0009CB AC 82            [24] 3224 	mov	r4,dpl
      0009CD AD 83            [24] 3225 	mov	r5,dph
      0009CF AE F0            [24] 3226 	mov	r6,b
      0009D1 FF               [12] 3227 	mov	r7,a
      0009D2 E5 81            [12] 3228 	mov	a,sp
      0009D4 24 FC            [12] 3229 	add	a,#0xfc
      0009D6 F5 81            [12] 3230 	mov	sp,a
      0009D8 85*28 82         [24] 3231 	mov	dpl,_MapADC_PARM_2
      0009DB C0 07            [24] 3232 	push	ar7
      0009DD C0 06            [24] 3233 	push	ar6
      0009DF C0 05            [24] 3234 	push	ar5
      0009E1 C0 04            [24] 3235 	push	ar4
      0009E3 12r00r00         [24] 3236 	lcall	___uchar2fs
      0009E6 A8 82            [24] 3237 	mov	r0,dpl
      0009E8 A9 83            [24] 3238 	mov	r1,dph
      0009EA AA F0            [24] 3239 	mov	r2,b
      0009EC FB               [12] 3240 	mov	r3,a
      0009ED D0 04            [24] 3241 	pop	ar4
      0009EF D0 05            [24] 3242 	pop	ar5
      0009F1 D0 06            [24] 3243 	pop	ar6
      0009F3 D0 07            [24] 3244 	pop	ar7
      0009F5 C0 00            [24] 3245 	push	ar0
      0009F7 C0 01            [24] 3246 	push	ar1
      0009F9 C0 02            [24] 3247 	push	ar2
      0009FB C0 03            [24] 3248 	push	ar3
      0009FD 8C 82            [24] 3249 	mov	dpl,r4
      0009FF 8D 83            [24] 3250 	mov	dph,r5
      000A01 8E F0            [24] 3251 	mov	b,r6
      000A03 EF               [12] 3252 	mov	a,r7
      000A04 12r00r00         [24] 3253 	lcall	___fsadd
      000A07 AC 82            [24] 3254 	mov	r4,dpl
      000A09 AD 83            [24] 3255 	mov	r5,dph
      000A0B AE F0            [24] 3256 	mov	r6,b
      000A0D FF               [12] 3257 	mov	r7,a
      000A0E E5 81            [12] 3258 	mov	a,sp
      000A10 24 FC            [12] 3259 	add	a,#0xfc
      000A12 F5 81            [12] 3260 	mov	sp,a
      000A14 8C 82            [24] 3261 	mov	dpl,r4
      000A16 8D 83            [24] 3262 	mov	dph,r5
      000A18 8E F0            [24] 3263 	mov	b,r6
      000A1A EF               [12] 3264 	mov	a,r7
      000A1B 12r00r00         [24] 3265 	lcall	___fs2uchar
                           000A1E  3266 	C$Lab2.c$518$1$122 ==.
                           000A1E  3267 	XG$MapADC$0$0 ==.
      000A1E 22               [24] 3268 	ret
                                   3269 ;------------------------------------------------------------
                                   3270 ;Allocation info for local variables in function 'LightNumLEDs'
                                   3271 ;------------------------------------------------------------
                                   3272 ;num                       Allocated to registers r7 
                                   3273 ;------------------------------------------------------------
                           000A1F  3274 	G$LightNumLEDs$0$0 ==.
                           000A1F  3275 	C$Lab2.c$521$1$122 ==.
                                   3276 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:521: void LightNumLEDs(unsigned char num) // Lights LEDs in order from 0 to 4
                                   3277 ;	-----------------------------------------
                                   3278 ;	 function LightNumLEDs
                                   3279 ;	-----------------------------------------
      000A1F                       3280 _LightNumLEDs:
      000A1F AF 82            [24] 3281 	mov	r7,dpl
                           000A21  3282 	C$Lab2.c$523$1$124 ==.
                                   3283 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:523: SetAllLEDs(1); // turn off all LEDs
      000A21 75 82 01         [24] 3284 	mov	dpl,#0x01
      000A24 C0 07            [24] 3285 	push	ar7
      000A26 12r09r49         [24] 3286 	lcall	_SetAllLEDs
      000A29 D0 07            [24] 3287 	pop	ar7
                           000A2B  3288 	C$Lab2.c$525$1$124 ==.
                                   3289 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:525: if (num >= 1) // Turn on LED0 if the number is >= 1
      000A2B BF 01 00         [24] 3290 	cjne	r7,#0x01,00123$
      000A2E                       3291 00123$:
      000A2E 40 02            [24] 3292 	jc	00102$
                           000A30  3293 	C$Lab2.c$527$2$125 ==.
                                   3294 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:527: LED0 = 0;
      000A30 C2 B6            [12] 3295 	clr	_LED0
      000A32                       3296 00102$:
                           000A32  3297 	C$Lab2.c$529$1$124 ==.
                                   3298 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:529: if (num >= 2) // Turn on LED1 if the number is >= 2
      000A32 BF 02 00         [24] 3299 	cjne	r7,#0x02,00125$
      000A35                       3300 00125$:
      000A35 40 02            [24] 3301 	jc	00104$
                           000A37  3302 	C$Lab2.c$531$2$126 ==.
                                   3303 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:531: LED1 = 0;
      000A37 C2 B5            [12] 3304 	clr	_LED1
      000A39                       3305 00104$:
                           000A39  3306 	C$Lab2.c$533$1$124 ==.
                                   3307 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:533: if (num >= 3) // Turn on LED2 if the number is >= 3
      000A39 BF 03 00         [24] 3308 	cjne	r7,#0x03,00127$
      000A3C                       3309 00127$:
      000A3C 40 02            [24] 3310 	jc	00106$
                           000A3E  3311 	C$Lab2.c$535$2$127 ==.
                                   3312 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:535: LED2 = 0;
      000A3E C2 B7            [12] 3313 	clr	_LED2
      000A40                       3314 00106$:
                           000A40  3315 	C$Lab2.c$537$1$124 ==.
                                   3316 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:537: if (num >= 4) // Turn on LED03 if the number is >= 4
      000A40 BF 04 00         [24] 3317 	cjne	r7,#0x04,00129$
      000A43                       3318 00129$:
      000A43 40 02            [24] 3319 	jc	00109$
                           000A45  3320 	C$Lab2.c$539$2$128 ==.
                                   3321 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:539: LED3 = 0;
      000A45 C2 B2            [12] 3322 	clr	_LED3
      000A47                       3323 00109$:
                           000A47  3324 	C$Lab2.c$541$1$124 ==.
                           000A47  3325 	XG$LightNumLEDs$0$0 ==.
      000A47 22               [24] 3326 	ret
                                   3327 ;------------------------------------------------------------
                                   3328 ;Allocation info for local variables in function 'ClearTimer0'
                                   3329 ;------------------------------------------------------------
                           000A48  3330 	G$ClearTimer0$0$0 ==.
                           000A48  3331 	C$Lab2.c$544$1$124 ==.
                                   3332 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:544: void ClearTimer0(void) // Pauses and clears Timer0
                                   3333 ;	-----------------------------------------
                                   3334 ;	 function ClearTimer0
                                   3335 ;	-----------------------------------------
      000A48                       3336 _ClearTimer0:
                           000A48  3337 	C$Lab2.c$546$1$130 ==.
                                   3338 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:546: TR0 = 0; // Stop Timer0
      000A48 C2 8C            [12] 3339 	clr	_TR0
                           000A4A  3340 	C$Lab2.c$547$1$130 ==.
                                   3341 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:547: TMR0 = 0; // Clear Timer0
      000A4A E4               [12] 3342 	clr	a
      000A4B F5 8A            [12] 3343 	mov	((_TMR0 >> 0) & 0xFF),a
      000A4D F5 8C            [12] 3344 	mov	((_TMR0 >> 8) & 0xFF),a
                           000A4F  3345 	C$Lab2.c$548$1$130 ==.
                                   3346 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:548: counts = 0; // Clear overflows
      000A4F F5*00            [12] 3347 	mov	_counts,a
      000A51 F5*01            [12] 3348 	mov	(_counts + 1),a
                           000A53  3349 	C$Lab2.c$549$1$130 ==.
                           000A53  3350 	XG$ClearTimer0$0$0 ==.
      000A53 22               [24] 3351 	ret
                                   3352 ;------------------------------------------------------------
                                   3353 ;Allocation info for local variables in function 'SetBILED'
                                   3354 ;------------------------------------------------------------
                                   3355 ;state                     Allocated to registers r7 
                                   3356 ;------------------------------------------------------------
                           000A54  3357 	G$SetBILED$0$0 ==.
                           000A54  3358 	C$Lab2.c$552$1$130 ==.
                                   3359 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:552: void SetBILED(unsigned char state) // Sets the BILED color
                                   3360 ;	-----------------------------------------
                                   3361 ;	 function SetBILED
                                   3362 ;	-----------------------------------------
      000A54                       3363 _SetBILED:
      000A54 AF 82            [24] 3364 	mov	r7,dpl
                           000A56  3365 	C$Lab2.c$554$1$132 ==.
                                   3366 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:554: switch (state)
      000A56 BF 47 02         [24] 3367 	cjne	r7,#0x47,00118$
      000A59 80 13            [24] 3368 	sjmp	00104$
      000A5B                       3369 00118$:
      000A5B BF 52 02         [24] 3370 	cjne	r7,#0x52,00119$
      000A5E 80 08            [24] 3371 	sjmp	00102$
      000A60                       3372 00119$:
      000A60 BF 67 02         [24] 3373 	cjne	r7,#0x67,00120$
      000A63 80 09            [24] 3374 	sjmp	00104$
      000A65                       3375 00120$:
      000A65 BF 72 0C         [24] 3376 	cjne	r7,#0x72,00105$
                           000A68  3377 	C$Lab2.c$557$2$133 ==.
                                   3378 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:557: case 'R':
      000A68                       3379 00102$:
                           000A68  3380 	C$Lab2.c$558$2$133 ==.
                                   3381 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:558: BILED0 = 0;
      000A68 C2 B3            [12] 3382 	clr	_BILED0
                           000A6A  3383 	C$Lab2.c$559$2$133 ==.
                                   3384 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:559: BILED1 = 1;
      000A6A D2 B4            [12] 3385 	setb	_BILED1
                           000A6C  3386 	C$Lab2.c$560$2$133 ==.
                                   3387 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:560: break;
                           000A6C  3388 	C$Lab2.c$562$2$133 ==.
                                   3389 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:562: case 'G':
      000A6C 80 0A            [24] 3390 	sjmp	00107$
      000A6E                       3391 00104$:
                           000A6E  3392 	C$Lab2.c$563$2$133 ==.
                                   3393 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:563: BILED0 = 1;
      000A6E D2 B3            [12] 3394 	setb	_BILED0
                           000A70  3395 	C$Lab2.c$564$2$133 ==.
                                   3396 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:564: BILED1 = 0;
      000A70 C2 B4            [12] 3397 	clr	_BILED1
                           000A72  3398 	C$Lab2.c$565$2$133 ==.
                                   3399 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:565: break;
                           000A72  3400 	C$Lab2.c$566$2$133 ==.
                                   3401 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:566: default:  // Turn BILED OFF
      000A72 80 04            [24] 3402 	sjmp	00107$
      000A74                       3403 00105$:
                           000A74  3404 	C$Lab2.c$567$2$133 ==.
                                   3405 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:567: BILED0 = 0;
      000A74 C2 B3            [12] 3406 	clr	_BILED0
                           000A76  3407 	C$Lab2.c$568$2$133 ==.
                                   3408 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:568: BILED1 = 0;
      000A76 C2 B4            [12] 3409 	clr	_BILED1
                           000A78  3410 	C$Lab2.c$570$1$132 ==.
                                   3411 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:570: }
      000A78                       3412 00107$:
                           000A78  3413 	C$Lab2.c$571$1$132 ==.
                           000A78  3414 	XG$SetBILED$0$0 ==.
      000A78 22               [24] 3415 	ret
                                   3416 ;------------------------------------------------------------
                                   3417 ;Allocation info for local variables in function 'DebounceButton'
                                   3418 ;------------------------------------------------------------
                                   3419 ;pressed                   Allocated to registers r7 
                                   3420 ;------------------------------------------------------------
                           000A79  3421 	G$DebounceButton$0$0 ==.
                           000A79  3422 	C$Lab2.c$574$1$132 ==.
                                   3423 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:574: char DebounceButton(void) // Debounces a button by waiting 20ms after a press
                                   3424 ;	-----------------------------------------
                                   3425 ;	 function DebounceButton
                                   3426 ;	-----------------------------------------
      000A79                       3427 _DebounceButton:
                           000A79  3428 	C$Lab2.c$576$1$132 ==.
                                   3429 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:576: char pressed = 0;
      000A79 7F 00            [12] 3430 	mov	r7,#0x00
                           000A7B  3431 	C$Lab2.c$578$1$135 ==.
                                   3432 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:578: TR0 = 1;
      000A7B D2 8C            [12] 3433 	setb	_TR0
                           000A7D  3434 	C$Lab2.c$580$1$135 ==.
                                   3435 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:580: tmpCount = 0; // Create temp value
      000A7D E4               [12] 3436 	clr	a
      000A7E F5*12            [12] 3437 	mov	_tmpCount,a
      000A80 F5*13            [12] 3438 	mov	(_tmpCount + 1),a
                           000A82  3439 	C$Lab2.c$581$1$135 ==.
                                   3440 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:581: if (!PB0) // If the button was pressed
      000A82 20 B0 39         [24] 3441 	jb	_PB0,00109$
                           000A85  3442 	C$Lab2.c$583$2$136 ==.
                                   3443 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:583: tmpCount = counts; // record current count
      000A85 85*00*12         [24] 3444 	mov	_tmpCount,_counts
      000A88 85*01*13         [24] 3445 	mov	(_tmpCount + 1),(_counts + 1)
                           000A8B  3446 	C$Lab2.c$584$2$136 ==.
                                   3447 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:584: while (counts < (tmpCount + 7)) {
      000A8B                       3448 00102$:
      000A8B 74 07            [12] 3449 	mov	a,#0x07
      000A8D 25*12            [12] 3450 	add	a,_tmpCount
      000A8F FD               [12] 3451 	mov	r5,a
      000A90 E4               [12] 3452 	clr	a
      000A91 35*13            [12] 3453 	addc	a,(_tmpCount + 1)
      000A93 FE               [12] 3454 	mov	r6,a
      000A94 C3               [12] 3455 	clr	c
      000A95 E5*00            [12] 3456 	mov	a,_counts
      000A97 9D               [12] 3457 	subb	a,r5
      000A98 E5*01            [12] 3458 	mov	a,(_counts + 1)
      000A9A 9E               [12] 3459 	subb	a,r6
      000A9B 50 1C            [24] 3460 	jnc	00105$
                           000A9D  3461 	C$Lab2.c$585$3$137 ==.
                                   3462 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:585: for (var=0;var<100;var++); // Wait ~20ms
      000A9D 75*02 64         [24] 3463 	mov	_var,#0x64
      000AA0 75*03 00         [24] 3464 	mov	(_var + 1),#0x00
      000AA3                       3465 00112$:
      000AA3 15*02            [12] 3466 	dec	_var
      000AA5 74 FF            [12] 3467 	mov	a,#0xff
      000AA7 B5*02 02         [24] 3468 	cjne	a,_var,00138$
      000AAA 15*03            [12] 3469 	dec	(_var + 1)
      000AAC                       3470 00138$:
      000AAC E5*02            [12] 3471 	mov	a,_var
      000AAE 45*03            [12] 3472 	orl	a,(_var + 1)
      000AB0 70 F1            [24] 3473 	jnz	00112$
      000AB2 75*02 64         [24] 3474 	mov	_var,#0x64
      000AB5 F5*03            [12] 3475 	mov	(_var + 1),a
                           000AB7  3476 	C$Lab2.c$587$2$136 ==.
                                   3477 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:587: while (!PB0); // wait for button release
      000AB7 80 D2            [24] 3478 	sjmp	00102$
      000AB9                       3479 00105$:
      000AB9 30 B0 FD         [24] 3480 	jnb	_PB0,00105$
                           000ABC  3481 	C$Lab2.c$588$2$136 ==.
                                   3482 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:588: pressed = 1;
      000ABC 7F 01            [12] 3483 	mov	r7,#0x01
      000ABE                       3484 00109$:
                           000ABE  3485 	C$Lab2.c$591$1$135 ==.
                                   3486 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:591: return pressed;
      000ABE 8F 82            [24] 3487 	mov	dpl,r7
                           000AC0  3488 	C$Lab2.c$592$1$135 ==.
                           000AC0  3489 	XG$DebounceButton$0$0 ==.
      000AC0 22               [24] 3490 	ret
                                   3491 ;------------------------------------------------------------
                                   3492 ;Allocation info for local variables in function 'CompareVals'
                                   3493 ;------------------------------------------------------------
                                   3494 ;expected                  Allocated with name '_CompareVals_PARM_2'
                                   3495 ;input                     Allocated to registers r7 
                                   3496 ;------------------------------------------------------------
                           000AC1  3497 	G$CompareVals$0$0 ==.
                           000AC1  3498 	C$Lab2.c$595$1$135 ==.
                                   3499 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:595: void CompareVals(char input, char expected) // Sets the BILED depending on if the value was lower or higher
                                   3500 ;	-----------------------------------------
                                   3501 ;	 function CompareVals
                                   3502 ;	-----------------------------------------
      000AC1                       3503 _CompareVals:
      000AC1 AF 82            [24] 3504 	mov	r7,dpl
                           000AC3  3505 	C$Lab2.c$597$1$139 ==.
                                   3506 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:597: if(input < expected) // If the value was lower
      000AC3 C3               [12] 3507 	clr	c
      000AC4 EF               [12] 3508 	mov	a,r7
      000AC5 95*2A            [12] 3509 	subb	a,_CompareVals_PARM_2
      000AC7 50 08            [24] 3510 	jnc	00105$
                           000AC9  3511 	C$Lab2.c$599$2$140 ==.
                                   3512 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:599: SetBILED('r'); // Turn the BILED red
      000AC9 75 82 72         [24] 3513 	mov	dpl,#0x72
      000ACC 12r0Ar54         [24] 3514 	lcall	_SetBILED
      000ACF 80 14            [24] 3515 	sjmp	00107$
      000AD1                       3516 00105$:
                           000AD1  3517 	C$Lab2.c$601$1$139 ==.
                                   3518 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:601: else if(input > expected) // If the value was higher
      000AD1 C3               [12] 3519 	clr	c
      000AD2 E5*2A            [12] 3520 	mov	a,_CompareVals_PARM_2
      000AD4 9F               [12] 3521 	subb	a,r7
      000AD5 50 08            [24] 3522 	jnc	00102$
                           000AD7  3523 	C$Lab2.c$603$2$141 ==.
                                   3524 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:603: SetBILED('g'); // Turn the BILED green
      000AD7 75 82 67         [24] 3525 	mov	dpl,#0x67
      000ADA 12r0Ar54         [24] 3526 	lcall	_SetBILED
      000ADD 80 06            [24] 3527 	sjmp	00107$
      000ADF                       3528 00102$:
                           000ADF  3529 	C$Lab2.c$607$2$142 ==.
                                   3530 ;	C:\Users\conroj2\Documents\RPI\Embedded Control\Git\Assignments\Lab2_3\Lab2.c:607: SetBILED('o'); // Turn the BILED off
      000ADF 75 82 6F         [24] 3531 	mov	dpl,#0x6f
      000AE2 12r0Ar54         [24] 3532 	lcall	_SetBILED
      000AE5                       3533 00107$:
                           000AE5  3534 	C$Lab2.c$609$1$139 ==.
                           000AE5  3535 	XG$CompareVals$0$0 ==.
      000AE5 22               [24] 3536 	ret
                                   3537 	.area CSEG    (CODE)
                                   3538 	.area CONST   (CODE)
                           000000  3539 FLab2$__str_0$0$0 == .
      000000                       3540 ___str_0:
      000000 0D                    3541 	.db 0x0d
      000001 0A                    3542 	.db 0x0a
      000002 0A                    3543 	.db 0x0a
      000003 53 65 6C 65 63 74 20  3544 	.ascii "Select a mode using the slide switches."
             61 20 6D 6F 64 65 20
             75 73 69 6E 67 20 74
             68 65 20 73 6C 69 64
             65 20 73 77 69 74 63
             68 65 73 2E
      00002A 0D                    3545 	.db 0x0d
      00002B 0A                    3546 	.db 0x0a
      00002C 50 72 65 73 73 20 74  3547 	.ascii "Press the pushbu"
             68 65 20 70 75 73 68
             62 75
      00003C 74 74 6F 6E 20 74 6F  3548 	.ascii "tton to select a mode, push it again to confirm."
             20 73 65 6C 65 63 74
             20 61 20 6D 6F 64 65
             2C 20 70 75 73 68 20
             69 74 20 61 67 61 69
             6E 20 74 6F 20 63 6F
             6E 66 69 72 6D 2E
      00006C 00                    3549 	.db 0x00
                           00006D  3550 FLab2$__str_1$0$0 == .
      00006D                       3551 ___str_1:
      00006D 0D                    3552 	.db 0x0d
      00006E 0A                    3553 	.db 0x0a
      00006F 4D 6F 64 65 20 31 3A  3554 	.ascii "Mode 1: Slide switch 1 is ON, slide switch 2 is OFF"
             20 53 6C 69 64 65 20
             73 77 69 74 63 68 20
             31 20 69 73 20 4F 4E
             2C 20 73 6C 69 64 65
             20 73 77 69 74 63 68
             20 32 20 69 73 20 4F
             46 46
      0000A2 00                    3555 	.db 0x00
                           0000A3  3556 FLab2$__str_2$0$0 == .
      0000A3                       3557 ___str_2:
      0000A3 0D                    3558 	.db 0x0d
      0000A4 0A                    3559 	.db 0x0a
      0000A5 4D 6F 64 65 20 32 3A  3560 	.ascii "Mode 2: Slide switch 1 is OFF, slide switch 2 is ON"
             20 53 6C 69 64 65 20
             73 77 69 74 63 68 20
             31 20 69 73 20 4F 46
             46 2C 20 73 6C 69 64
             65 20 73 77 69 74 63
             68 20 32 20 69 73 20
             4F 4E
      0000D8 00                    3561 	.db 0x00
                           0000D9  3562 FLab2$__str_3$0$0 == .
      0000D9                       3563 ___str_3:
      0000D9 0D                    3564 	.db 0x0d
      0000DA 0A                    3565 	.db 0x0a
      0000DB 4D 6F 64 65 20 33 3A  3566 	.ascii "Mode 3: Slide switch 1 is ON, slide switch 2 is ON"
             20 53 6C 69 64 65 20
             73 77 69 74 63 68 20
             31 20 69 73 20 4F 4E
             2C 20 73 6C 69 64 65
             20 73 77 69 74 63 68
             20 32 20 69 73 20 4F
             4E
      00010D 00                    3567 	.db 0x00
                           00010E  3568 FLab2$__str_4$0$0 == .
      00010E                       3569 ___str_4:
      00010E 0D                    3570 	.db 0x0d
      00010F 0A                    3571 	.db 0x0a
      000110 4F 46 46 3A 20 53 6C  3572 	.ascii "OFF: Slide switch 1 is OFF, slide switch 2 is OFF"
             69 64 65 20 73 77 69
             74 63 68 20 31 20 69
             73 20 4F 46 46 2C 20
             73 6C 69 64 65 20 73
             77 69 74 63 68 20 32
             20 69 73 20 4F 46 46
      000141 00                    3573 	.db 0x00
                           000142  3574 FLab2$__str_5$0$0 == .
      000142                       3575 ___str_5:
      000142 0A                    3576 	.db 0x0a
      000143 0A                    3577 	.db 0x0a
      000144 0D                    3578 	.db 0x0d
      000145 54 68 65 20 66 69 72  3579 	.ascii "The first mode generates a random number from 0 to 4."
             73 74 20 6D 6F 64 65
             20 67 65 6E 65 72 61
             74 65 73 20 61 20 72
             61 6E 64 6F 6D 20 6E
             75 6D 62 65 72 20 66
             72 6F 6D 20 30 20 74
             6F 20 34 2E
      00017A 0A                    3580 	.db 0x0a
      00017B 0D                    3581 	.db 0x0d
      00017C 54 68                 3582 	.ascii "Th"
      00017E 65 20 67 65 6E 65 72  3583 	.ascii "e generated number lights up none to all 4 LEDs in a line."
             61 74 65 64 20 6E 75
             6D 62 65 72 20 6C 69
             67 68 74 73 20 75 70
             20 6E 6F 6E 65 20 74
             6F 20 61 6C 6C 20 34
             20 4C 45 44 73 20 69
             6E 20 61 20 6C 69 6E
             65 2E
      0001B8 0A                    3584 	.db 0x0a
      0001B9 0D                    3585 	.db 0x0d
      0001BA 54 68 65 20 4C 45 44  3586 	.ascii "The LEDs stay on 0.5 s, then turn off and a timer is started"
             73 20 73 74 61 79 20
             6F 6E 20 30 2E 35 20
             73 2C 20 74 68 65 6E
             20 74 75 72 6E 20 6F
             66 66 20 61 6E 64 20
             61 20 74 69 6D 65 72
             20 69 73 20 73 74 61
             72 74 65 64
      0001F6 2E                    3587 	.ascii "."
      0001F7 0A                    3588 	.db 0x0a
      0001F8 0D                    3589 	.db 0x0d
      0001F9 54 68 65 20 70 6C 61  3590 	.ascii "The player then turns a potentiometer whose voltage value"
             79 65 72 20 74 68 65
             6E 20 74 75 72 6E 73
             20 61 20 70 6F 74 65
             6E 74 69 6F 6D 65 74
             65 72 20 77 68 6F 73
             65 20 76 6F 6C 74 61
             67 65 20 76 61 6C 75
             65
      000232 20 69 73 20 75 73 65  3591 	.ascii " is used to turn on"
             64 20 74 6F 20 74 75
             72 6E 20 6F 6E
      000245 0A                    3592 	.db 0x0a
      000246 0D                    3593 	.db 0x0d
      000247 74 68 65 20 4C 45 44  3594 	.ascii "the LEDs in sequence until the same pat"
             73 20 69 6E 20 73 65
             71 75 65 6E 63 65 20
             75 6E 74 69 6C 20 74
             68 65 20 73 61 6D 65
             20 70 61 74
      00026E 74 65 72 6E 20 61 70  3595 	.ascii "tern appears."
             70 65 61 72 73 2E
      00027B 0A                    3596 	.db 0x0a
      00027C 0D                    3597 	.db 0x0d
      00027D 54 68 65 20 70 75 73  3598 	.ascii "The pushbutton is then pressed to stop the ti"
             68 62 75 74 74 6F 6E
             20 69 73 20 74 68 65
             6E 20 70 72 65 73 73
             65 64 20 74 6F 20 73
             74 6F 70 20 74 68 65
             20 74 69
      0002AA 6D 65 72 20 61 6E 64  3599 	.ascii "mer and record the LED pattern,"
             20 72 65 63 6F 72 64
             20 74 68 65 20 4C 45
             44 20 70 61 74 74 65
             72 6E 2C
      0002C9 0A                    3600 	.db 0x0a
      0002CA 0D                    3601 	.db 0x0d
      0002CB 77 68 69 63 68 20 69  3602 	.ascii "which is then compared to t"
             73 20 74 68 65 6E 20
             63 6F 6D 70 61 72 65
             64 20 74 6F 20 74
      0002E6 68 61 74 20 67 65 6E  3603 	.ascii "hat generated by the random number."
             65 72 61 74 65 64 20
             62 79 20 74 68 65 20
             72 61 6E 64 6F 6D 20
             6E 75 6D 62 65 72 2E
      000309 0A                    3604 	.db 0x0a
      00030A 0D                    3605 	.db 0x0d
      00030B 53 63 6F 72 69 6E 67  3606 	.ascii "Scoring is based on cor"
             20 69 73 20 62 61 73
             65 64 20 6F 6E 20 63
             6F 72
      000322 72 65 63 74 6E 65 73  3607 	.ascii "rectness and speed of entry."
             73 20 61 6E 64 20 73
             70 65 65 64 20 6F 66
             20 65 6E 74 72 79 2E
      00033E 0A                    3608 	.db 0x0a
      00033F 0D                    3609 	.db 0x0d
      000340 54 68 65 20 77 68 6F  3610 	.ascii "The whole process is repeated "
             6C 65 20 70 72 6F 63
             65 73 73 20 69 73 20
             72 65 70 65 61 74 65
             64 20
      00035E 35 20 74 69 6D 65 73  3611 	.ascii "5 times and the"
             20 61 6E 64 20 74 68
             65
      00036D 0A                    3612 	.db 0x0a
      00036E 0D                    3613 	.db 0x0d
      00036F 66 69 6E 61 6C 20 73  3614 	.ascii "final score is displayed on the terminal."
             63 6F 72 65 20 69 73
             20 64 69 73 70 6C 61
             79 65 64 20 6F 6E 20
             74 68 65 20 74 65 72
             6D 69 6E 61 6C 2E
      000398 0A                    3615 	.db 0x0a
      000399 0D                    3616 	.db 0x0d
      00039A 54 68 65 20 6C 6F 77  3617 	.ascii "The lower the score the better you did."
             65 72 20 74 68 65 20
             73 63 6F 72 65 20 74
             68 65 20 62 65 74 74
             65 72 20 79 6F 75 20
             64 69 64 2E
      0003C1 00                    3618 	.db 0x00
                           0003C2  3619 FLab2$__str_6$0$0 == .
      0003C2                       3620 ___str_6:
      0003C2 0D                    3621 	.db 0x0d
      0003C3 0A                    3622 	.db 0x0a
      0003C4 53 74 61 72 74        3623 	.ascii "Start"
      0003C9 00                    3624 	.db 0x00
                           0003CA  3625 FLab2$__str_7$0$0 == .
      0003CA                       3626 ___str_7:
      0003CA 0D                    3627 	.db 0x0d
      0003CB 0A                    3628 	.db 0x0a
      0003CC 52 6F 75 6E 64 20 53  3629 	.ascii "Round Score: %d"
             63 6F 72 65 3A 20 25
             64
      0003DB 00                    3630 	.db 0x00
                           0003DC  3631 FLab2$__str_8$0$0 == .
      0003DC                       3632 ___str_8:
      0003DC 0D                    3633 	.db 0x0d
      0003DD 0A                    3634 	.db 0x0a
      0003DE 54 6F 74 61 6C 20 53  3635 	.ascii "Total Score: %d"
             63 6F 72 65 3A 20 25
             64
      0003ED 00                    3636 	.db 0x00
                           0003EE  3637 FLab2$__str_9$0$0 == .
      0003EE                       3638 ___str_9:
      0003EE 0A                    3639 	.db 0x0a
      0003EF 0A                    3640 	.db 0x0a
      0003F0 0D                    3641 	.db 0x0d
      0003F1 46 69 6E 61 6C 20 53  3642 	.ascii "Final Score: %d"
             63 6F 72 65 3A 20 25
             64
      000400 00                    3643 	.db 0x00
                           000401  3644 FLab2$__str_10$0$0 == .
      000401                       3645 ___str_10:
      000401 0D                    3646 	.db 0x0d
      000402 0A                    3647 	.db 0x0a
      000403 0A                    3648 	.db 0x0a
      000404 50 6C 61 79 65 72 20  3649 	.ascii "Player 1 will have 1 second to adjust the potentionmeter "
             31 20 77 69 6C 6C 20
             68 61 76 65 20 31 20
             73 65 63 6F 6E 64 20
             74 6F 20 61 64 6A 75
             73 74 20 74 68 65 20
             70 6F 74 65 6E 74 69
             6F 6E 6D 65 74 65 72
             20
      00043D 74 6F 20 6C 69 67 68  3650 	.ascii "to light up LEDs."
             74 20 75 70 20 4C 45
             44 73 2E
      00044E 0D                    3651 	.db 0x0d
      00044F 0A                    3652 	.db 0x0a
      000450 50 6C 61 79 65 72 20  3653 	.ascii "Player 2 must then push the button for ea"
             32 20 6D 75 73 74 20
             74 68 65 6E 20 70 75
             73 68 20 74 68 65 20
             62 75 74 74 6F 6E 20
             66 6F 72 20 65 61
      000479 63 68 20 4C 45 44 20  3654 	.ascii "ch LED that was lit within 1.5s"
             74 68 61 74 20 77 61
             73 20 6C 69 74 20 77
             69 74 68 69 6E 20 31
             2E 35 73
      000498 0D                    3655 	.db 0x0d
      000499 0A                    3656 	.db 0x0a
      00049A 00                    3657 	.db 0x00
                           00049B  3658 FLab2$__str_11$0$0 == .
      00049B                       3659 ___str_11:
      00049B 0D                    3660 	.db 0x0d
      00049C 0A                    3661 	.db 0x0a
      00049D 31 30 20 70 6F 69 6E  3662 	.ascii "10 points gained!"
             74 73 20 67 61 69 6E
             65 64 21
      0004AE 00                    3663 	.db 0x00
                           0004AF  3664 FLab2$__str_12$0$0 == .
      0004AF                       3665 ___str_12:
      0004AF 0D                    3666 	.db 0x0d
      0004B0 0A                    3667 	.db 0x0a
      0004B1 30 20 70 6F 69 6E 74  3668 	.ascii "0 points gained!"
             73 20 67 61 69 6E 65
             64 21
      0004C1 00                    3669 	.db 0x00
                           0004C2  3670 FLab2$__str_13$0$0 == .
      0004C2                       3671 ___str_13:
      0004C2 0D                    3672 	.db 0x0d
      0004C3 0A                    3673 	.db 0x0a
      0004C4 54 6F 74 61 6C 20 73  3674 	.ascii "Total score: %d"
             63 6F 72 65 3A 20 25
             64
      0004D3 00                    3675 	.db 0x00
                           0004D4  3676 FLab2$__str_14$0$0 == .
      0004D4                       3677 ___str_14:
      0004D4 0D                    3678 	.db 0x0d
      0004D5 0A                    3679 	.db 0x0a
      0004D6 46 69 6E 61 6C 20 73  3680 	.ascii "Final score: %d"
             63 6F 72 65 3A 20 25
             64
      0004E5 00                    3681 	.db 0x00
                           0004E6  3682 FLab2$__str_15$0$0 == .
      0004E6                       3683 ___str_15:
      0004E6 0A                    3684 	.db 0x0a
      0004E7 0A                    3685 	.db 0x0a
      0004E8 0D                    3686 	.db 0x0d
      0004E9 55 73 65 20 74 68 65  3687 	.ascii "Use the potentiometer to draw a bar graph on the terminal"
             20 70 6F 74 65 6E 74
             69 6F 6D 65 74 65 72
             20 74 6F 20 64 72 61
             77 20 61 20 62 61 72
             20 67 72 61 70 68 20
             6F 6E 20 74 68 65 20
             74 65 72 6D 69 6E 61
             6C
      000522 2E                    3688 	.ascii "."
      000523 0A                    3689 	.db 0x0a
      000524 0D                    3690 	.db 0x0d
      000525 49 74 73 20 6C 65 6E  3691 	.ascii "Its length should be a percentage of the maximum length a"
             67 74 68 20 73 68 6F
             75 6C 64 20 62 65 20
             61 20 70 65 72 63 65
             6E 74 61 67 65 20 6F
             66 20 74 68 65 20 6D
             61 78 69 6D 75 6D 20
             6C 65 6E 67 74 68 20
             61
      00055E 73 20 73 70 65 63 69  3692 	.ascii "s specified by the number of LEDs lit."
             66 69 65 64 20 62 79
             20 74 68 65 20 6E 75
             6D 62 65 72 20 6F 66
             20 4C 45 44 73 20 6C
             69 74 2E
      000584 0A                    3693 	.db 0x0a
      000585 0A                    3694 	.db 0x0a
      000586 0D                    3695 	.db 0x0d
      000587 4E 6F 20 6C 69 74 20  3696 	.ascii "No lit LEDs indicat"
             4C 45 44 73 20 69 6E
             64 69 63 61 74
      00059A 65 20 74 68 61 74 20  3697 	.ascii "e that the bar should be empty, 1 lit LED indicates a bar 1/"
             74 68 65 20 62 61 72
             20 73 68 6F 75 6C 64
             20 62 65 20 65 6D 70
             74 79 2C 20 31 20 6C
             69 74 20 4C 45 44 20
             69 6E 64 69 63 61 74
             65 73 20 61 20 62 61
             72 20 31 2F
      0005D6 34 20 6F 66 20 74 68  3698 	.ascii "4 of the maximum length,"
             65 20 6D 61 78 69 6D
             75 6D 20 6C 65 6E 67
             74 68 2C
      0005EE 0A                    3699 	.db 0x0a
      0005EF 0D                    3700 	.db 0x0d
      0005F0 32 20 6C 69 74 20 4C  3701 	.ascii "2 lit LEDs indicate 1/2, 3 lit LED"
             45 44 73 20 69 6E 64
             69 63 61 74 65 20 31
             2F 32 2C 20 33 20 6C
             69 74 20 4C 45 44
      000612 73 20 69 6E 64 69 63  3702 	.ascii "s indicate 3/4, and 4 lit LEDs indicate a full bar."
             61 74 65 20 33 2F 34
             2C 20 61 6E 64 20 34
             20 6C 69 74 20 4C 45
             44 73 20 69 6E 64 69
             63 61 74 65 20 61 20
             66 75 6C 6C 20 62 61
             72 2E
      000645 0A                    3703 	.db 0x0a
      000646 0A                    3704 	.db 0x0a
      000647 0D                    3705 	.db 0x0d
      000648 59 6F 75 20 68 61     3706 	.ascii "You ha"
      00064E 76 65 20 6F 6E 65 20  3707 	.ascii "ve one second to draw the appropriate graph. If the graph is"
             73 65 63 6F 6E 64 20
             74 6F 20 64 72 61 77
             20 74 68 65 20 61 70
             70 72 6F 70 72 69 61
             74 65 20 67 72 61 70
             68 2E 20 49 66 20 74
             68 65 20 67 72 61 70
             68 20 69 73
      00068A 20 6C 6F 6E 67 65 72  3708 	.ascii " longer than the desired value, the BILED will turn red."
             20 74 68 61 6E 20 74
             68 65 20 64 65 73 69
             72 65 64 20 76 61 6C
             75 65 2C 20 74 68 65
             20 42 49 4C 45 44 20
             77 69 6C 6C 20 74 75
             72 6E 20 72 65 64 2E
      0006C2 0A                    3709 	.db 0x0a
      0006C3 0D                    3710 	.db 0x0d
      0006C4 49 66                 3711 	.ascii "If"
      0006C6 20 74 68 65 20 67 72  3712 	.ascii " the graph is shorter than the desired value, the BILED will"
             61 70 68 20 69 73 20
             73 68 6F 72 74 65 72
             20 74 68 61 6E 20 74
             68 65 20 64 65 73 69
             72 65 64 20 76 61 6C
             75 65 2C 20 74 68 65
             20 42 49 4C 45 44 20
             77 69 6C 6C
      000702 20 74 75 72 6E 20 67  3713 	.ascii " turn green."
             72 65 65 6E 2E
      00070E 0A                    3714 	.db 0x0a
      00070F 0A                    3715 	.db 0x0a
      000710 0D                    3716 	.db 0x0d
      000711 41 20 6D 61 78 69 6D  3717 	.ascii "A maximum of 10 points are awarded for each c"
             75 6D 20 6F 66 20 31
             30 20 70 6F 69 6E 74
             73 20 61 72 65 20 61
             77 61 72 64 65 64 20
             66 6F 72 20 65 61 63
             68 20 63
      00073E 6F 72 72 65 63 74 20  3718 	.ascii "orrect answer."
             61 6E 73 77 65 72 2E
      00074C 0A                    3719 	.db 0x0a
      00074D 0D                    3720 	.db 0x0d
      00074E 54 77 6F 20 70 6F 69  3721 	.ascii "Two points are deducted for each character p"
             6E 74 73 20 61 72 65
             20 64 65 64 75 63 74
             65 64 20 66 6F 72 20
             65 61 63 68 20 63 68
             61 72 61 63 74 65 72
             20 70
      00077A 6F 73 69 74 69 6F 6E  3722 	.ascii "osition off. There are 5 rounds."
             20 6F 66 66 2E 20 54
             68 65 72 65 20 61 72
             65 20 35 20 72 6F 75
             6E 64 73 2E
      00079A 0A                    3723 	.db 0x0a
      00079B 0A                    3724 	.db 0x0a
      00079C 0D                    3725 	.db 0x0d
      00079D 50 72 65 73 73 20 74  3726 	.ascii "Press the pushbutton to s"
             68 65 20 70 75 73 68
             62 75 74 74 6F 6E 20
             74 6F 20 73
      0007B6 74 61 72 74 2E        3727 	.ascii "tart."
      0007BB 00                    3728 	.db 0x00
                           0007BC  3729 FLab2$__str_16$0$0 == .
      0007BC                       3730 ___str_16:
      0007BC 0A                    3731 	.db 0x0a
      0007BD 0A                    3732 	.db 0x0a
      0007BE 0D                    3733 	.db 0x0d
      0007BF 53 54 41 52 54        3734 	.ascii "START"
      0007C4 00                    3735 	.db 0x00
                           0007C5  3736 FLab2$__str_17$0$0 == .
      0007C5                       3737 ___str_17:
      0007C5 0A                    3738 	.db 0x0a
      0007C6 0A                    3739 	.db 0x0a
      0007C7 0D                    3740 	.db 0x0d
      0007C8 53 63 6F 72 65 20 66  3741 	.ascii "Score for this round: %d"
             6F 72 20 74 68 69 73
             20 72 6F 75 6E 64 3A
             20 25 64
      0007E0 00                    3742 	.db 0x00
                           0007E1  3743 FLab2$__str_18$0$0 == .
      0007E1                       3744 ___str_18:
      0007E1 0A                    3745 	.db 0x0a
      0007E2 0D                    3746 	.db 0x0d
      0007E3 54 6F 74 61 6C 20 73  3747 	.ascii "Total score: %d"
             63 6F 72 65 3A 20 25
             64
      0007F2 0A                    3748 	.db 0x0a
      0007F3 0A                    3749 	.db 0x0a
      0007F4 0D                    3750 	.db 0x0d
      0007F5 00                    3751 	.db 0x00
                           0007F6  3752 FLab2$__str_19$0$0 == .
      0007F6                       3753 ___str_19:
      0007F6 0A                    3754 	.db 0x0a
      0007F7 0A                    3755 	.db 0x0a
      0007F8 0D                    3756 	.db 0x0d
      0007F9 46 69 6E 61 6C 20 73  3757 	.ascii "Final score: %d"
             63 6F 72 65 3A 20 25
             64
      000808 00                    3758 	.db 0x00
                                   3759 	.area XINIT   (CODE)
                                   3760 	.area CABS    (ABS,CODE)
