                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lab3_1
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _Steering_Servo
                                     12 	.globl _main
                                     13 	.globl _putchar
                                     14 	.globl _getchar
                                     15 	.globl _printf
                                     16 	.globl _getchar_nw
                                     17 	.globl _Sys_Init
                                     18 	.globl _UART0_Init
                                     19 	.globl _SYSCLK_Init
                                     20 	.globl _SPIF
                                     21 	.globl _WCOL
                                     22 	.globl _MODF
                                     23 	.globl _RXOVRN
                                     24 	.globl _TXBSY
                                     25 	.globl _SLVSEL
                                     26 	.globl _MSTEN
                                     27 	.globl _SPIEN
                                     28 	.globl _AD0EN
                                     29 	.globl _ADCEN
                                     30 	.globl _AD0TM
                                     31 	.globl _ADCTM
                                     32 	.globl _AD0INT
                                     33 	.globl _ADCINT
                                     34 	.globl _AD0BUSY
                                     35 	.globl _ADBUSY
                                     36 	.globl _AD0CM1
                                     37 	.globl _ADSTM1
                                     38 	.globl _AD0CM0
                                     39 	.globl _ADSTM0
                                     40 	.globl _AD0WINT
                                     41 	.globl _ADWINT
                                     42 	.globl _AD0LJST
                                     43 	.globl _ADLJST
                                     44 	.globl _CF
                                     45 	.globl _CR
                                     46 	.globl _CCF4
                                     47 	.globl _CCF3
                                     48 	.globl _CCF2
                                     49 	.globl _CCF1
                                     50 	.globl _CCF0
                                     51 	.globl _CY
                                     52 	.globl _AC
                                     53 	.globl _F0
                                     54 	.globl _RS1
                                     55 	.globl _RS0
                                     56 	.globl _OV
                                     57 	.globl _F1
                                     58 	.globl _P
                                     59 	.globl _TF2
                                     60 	.globl _EXF2
                                     61 	.globl _RCLK
                                     62 	.globl _TCLK
                                     63 	.globl _EXEN2
                                     64 	.globl _TR2
                                     65 	.globl _CT2
                                     66 	.globl _CPRL2
                                     67 	.globl _BUSY
                                     68 	.globl _ENSMB
                                     69 	.globl _STA
                                     70 	.globl _STO
                                     71 	.globl _SI
                                     72 	.globl _AA
                                     73 	.globl _SMBFTE
                                     74 	.globl _SMBTOE
                                     75 	.globl _PT2
                                     76 	.globl _PS
                                     77 	.globl _PS0
                                     78 	.globl _PT1
                                     79 	.globl _PX1
                                     80 	.globl _PT0
                                     81 	.globl _PX0
                                     82 	.globl _P3_7
                                     83 	.globl _P3_6
                                     84 	.globl _P3_5
                                     85 	.globl _P3_4
                                     86 	.globl _P3_3
                                     87 	.globl _P3_2
                                     88 	.globl _P3_1
                                     89 	.globl _P3_0
                                     90 	.globl _EA
                                     91 	.globl _ET2
                                     92 	.globl _ES
                                     93 	.globl _ES0
                                     94 	.globl _ET1
                                     95 	.globl _EX1
                                     96 	.globl _ET0
                                     97 	.globl _EX0
                                     98 	.globl _P2_7
                                     99 	.globl _P2_6
                                    100 	.globl _P2_5
                                    101 	.globl _P2_4
                                    102 	.globl _P2_3
                                    103 	.globl _P2_2
                                    104 	.globl _P2_1
                                    105 	.globl _P2_0
                                    106 	.globl _S0MODE
                                    107 	.globl _SM00
                                    108 	.globl _SM0
                                    109 	.globl _SM10
                                    110 	.globl _SM1
                                    111 	.globl _MCE0
                                    112 	.globl _SM20
                                    113 	.globl _SM2
                                    114 	.globl _REN0
                                    115 	.globl _REN
                                    116 	.globl _TB80
                                    117 	.globl _TB8
                                    118 	.globl _RB80
                                    119 	.globl _RB8
                                    120 	.globl _TI0
                                    121 	.globl _TI
                                    122 	.globl _RI0
                                    123 	.globl _RI
                                    124 	.globl _P1_7
                                    125 	.globl _P1_6
                                    126 	.globl _P1_5
                                    127 	.globl _P1_4
                                    128 	.globl _P1_3
                                    129 	.globl _P1_2
                                    130 	.globl _P1_1
                                    131 	.globl _P1_0
                                    132 	.globl _TF1
                                    133 	.globl _TR1
                                    134 	.globl _TF0
                                    135 	.globl _TR0
                                    136 	.globl _IE1
                                    137 	.globl _IT1
                                    138 	.globl _IE0
                                    139 	.globl _IT0
                                    140 	.globl _P0_7
                                    141 	.globl _P0_6
                                    142 	.globl _P0_5
                                    143 	.globl _P0_4
                                    144 	.globl _P0_3
                                    145 	.globl _P0_2
                                    146 	.globl _P0_1
                                    147 	.globl _P0_0
                                    148 	.globl _PCA0CP4
                                    149 	.globl _PCA0CP3
                                    150 	.globl _PCA0CP2
                                    151 	.globl _PCA0CP1
                                    152 	.globl _PCA0CP0
                                    153 	.globl _PCA0
                                    154 	.globl _DAC1
                                    155 	.globl _DAC0
                                    156 	.globl _ADC0LT
                                    157 	.globl _ADC0GT
                                    158 	.globl _ADC0
                                    159 	.globl _RCAP4
                                    160 	.globl _TMR4
                                    161 	.globl _TMR3RL
                                    162 	.globl _TMR3
                                    163 	.globl _RCAP2
                                    164 	.globl _TMR2
                                    165 	.globl _TMR1
                                    166 	.globl _TMR0
                                    167 	.globl _WDTCN
                                    168 	.globl _PCA0CPH4
                                    169 	.globl _PCA0CPH3
                                    170 	.globl _PCA0CPH2
                                    171 	.globl _PCA0CPH1
                                    172 	.globl _PCA0CPH0
                                    173 	.globl _PCA0H
                                    174 	.globl _SPI0CN
                                    175 	.globl _EIP2
                                    176 	.globl _EIP1
                                    177 	.globl _TH4
                                    178 	.globl _TL4
                                    179 	.globl _SADDR1
                                    180 	.globl _SBUF1
                                    181 	.globl _SCON1
                                    182 	.globl _B
                                    183 	.globl _RSTSRC
                                    184 	.globl _PCA0CPL4
                                    185 	.globl _PCA0CPL3
                                    186 	.globl _PCA0CPL2
                                    187 	.globl _PCA0CPL1
                                    188 	.globl _PCA0CPL0
                                    189 	.globl _PCA0L
                                    190 	.globl _ADC0CN
                                    191 	.globl _EIE2
                                    192 	.globl _EIE1
                                    193 	.globl _RCAP4H
                                    194 	.globl _RCAP4L
                                    195 	.globl _XBR2
                                    196 	.globl _XBR1
                                    197 	.globl _XBR0
                                    198 	.globl _ACC
                                    199 	.globl _PCA0CPM4
                                    200 	.globl _PCA0CPM3
                                    201 	.globl _PCA0CPM2
                                    202 	.globl _PCA0CPM1
                                    203 	.globl _PCA0CPM0
                                    204 	.globl _PCA0MD
                                    205 	.globl _PCA0CN
                                    206 	.globl _DAC1CN
                                    207 	.globl _DAC1H
                                    208 	.globl _DAC1L
                                    209 	.globl _DAC0CN
                                    210 	.globl _DAC0H
                                    211 	.globl _DAC0L
                                    212 	.globl _REF0CN
                                    213 	.globl _PSW
                                    214 	.globl _SMB0CR
                                    215 	.globl _TH2
                                    216 	.globl _TL2
                                    217 	.globl _RCAP2H
                                    218 	.globl _RCAP2L
                                    219 	.globl _T4CON
                                    220 	.globl _T2CON
                                    221 	.globl _ADC0LTH
                                    222 	.globl _ADC0LTL
                                    223 	.globl _ADC0GTH
                                    224 	.globl _ADC0GTL
                                    225 	.globl _SMB0ADR
                                    226 	.globl _SMB0DAT
                                    227 	.globl _SMB0STA
                                    228 	.globl _SMB0CN
                                    229 	.globl _ADC0H
                                    230 	.globl _ADC0L
                                    231 	.globl _P1MDIN
                                    232 	.globl _ADC0CF
                                    233 	.globl _AMX0SL
                                    234 	.globl _AMX0CF
                                    235 	.globl _SADEN0
                                    236 	.globl _IP
                                    237 	.globl _FLACL
                                    238 	.globl _FLSCL
                                    239 	.globl _P74OUT
                                    240 	.globl _OSCICN
                                    241 	.globl _OSCXCN
                                    242 	.globl _P3
                                    243 	.globl __XPAGE
                                    244 	.globl _EMI0CN
                                    245 	.globl _SADEN1
                                    246 	.globl _P3IF
                                    247 	.globl _AMX1SL
                                    248 	.globl _ADC1CF
                                    249 	.globl _ADC1CN
                                    250 	.globl _SADDR0
                                    251 	.globl _IE
                                    252 	.globl _P3MDOUT
                                    253 	.globl _PRT3CF
                                    254 	.globl _P2MDOUT
                                    255 	.globl _PRT2CF
                                    256 	.globl _P1MDOUT
                                    257 	.globl _PRT1CF
                                    258 	.globl _P0MDOUT
                                    259 	.globl _PRT0CF
                                    260 	.globl _EMI0CF
                                    261 	.globl _EMI0TC
                                    262 	.globl _P2
                                    263 	.globl _CPT1CN
                                    264 	.globl _CPT0CN
                                    265 	.globl _SPI0CKR
                                    266 	.globl _ADC1
                                    267 	.globl _SPI0DAT
                                    268 	.globl _SPI0CFG
                                    269 	.globl _SBUF0
                                    270 	.globl _SBUF
                                    271 	.globl _SCON0
                                    272 	.globl _SCON
                                    273 	.globl _P7
                                    274 	.globl _TMR3H
                                    275 	.globl _TMR3L
                                    276 	.globl _TMR3RLH
                                    277 	.globl _TMR3RLL
                                    278 	.globl _TMR3CN
                                    279 	.globl _P1
                                    280 	.globl _PSCTL
                                    281 	.globl _CKCON
                                    282 	.globl _TH1
                                    283 	.globl _TH0
                                    284 	.globl _TL1
                                    285 	.globl _TL0
                                    286 	.globl _TMOD
                                    287 	.globl _TCON
                                    288 	.globl _PCON
                                    289 	.globl _P6
                                    290 	.globl _P5
                                    291 	.globl _P4
                                    292 	.globl _DPH
                                    293 	.globl _DPL
                                    294 	.globl _SP
                                    295 	.globl _P0
                                    296 	.globl _aligned_alloc_PARM_2
                                    297 	.globl _SERVO_PW
                                    298 	.globl _SERVO_PW_LEFT
                                    299 	.globl _SERVO_PW_RIGHT
                                    300 	.globl _SERVO_PW_CENTER
                                    301 	.globl _Port_Init
                                    302 	.globl _XBR0_Init
                                    303 	.globl _PCA_Init
                                    304 	.globl _PCA_ISR
                                    305 	.globl _Set_Pulsewidth
                                    306 ;--------------------------------------------------------
                                    307 ; special function registers
                                    308 ;--------------------------------------------------------
                                    309 	.area RSEG    (ABS,DATA)
      000000                        310 	.org 0x0000
                           000080   311 G$P0$0$0 == 0x0080
                           000080   312 _P0	=	0x0080
                           000081   313 G$SP$0$0 == 0x0081
                           000081   314 _SP	=	0x0081
                           000082   315 G$DPL$0$0 == 0x0082
                           000082   316 _DPL	=	0x0082
                           000083   317 G$DPH$0$0 == 0x0083
                           000083   318 _DPH	=	0x0083
                           000084   319 G$P4$0$0 == 0x0084
                           000084   320 _P4	=	0x0084
                           000085   321 G$P5$0$0 == 0x0085
                           000085   322 _P5	=	0x0085
                           000086   323 G$P6$0$0 == 0x0086
                           000086   324 _P6	=	0x0086
                           000087   325 G$PCON$0$0 == 0x0087
                           000087   326 _PCON	=	0x0087
                           000088   327 G$TCON$0$0 == 0x0088
                           000088   328 _TCON	=	0x0088
                           000089   329 G$TMOD$0$0 == 0x0089
                           000089   330 _TMOD	=	0x0089
                           00008A   331 G$TL0$0$0 == 0x008a
                           00008A   332 _TL0	=	0x008a
                           00008B   333 G$TL1$0$0 == 0x008b
                           00008B   334 _TL1	=	0x008b
                           00008C   335 G$TH0$0$0 == 0x008c
                           00008C   336 _TH0	=	0x008c
                           00008D   337 G$TH1$0$0 == 0x008d
                           00008D   338 _TH1	=	0x008d
                           00008E   339 G$CKCON$0$0 == 0x008e
                           00008E   340 _CKCON	=	0x008e
                           00008F   341 G$PSCTL$0$0 == 0x008f
                           00008F   342 _PSCTL	=	0x008f
                           000090   343 G$P1$0$0 == 0x0090
                           000090   344 _P1	=	0x0090
                           000091   345 G$TMR3CN$0$0 == 0x0091
                           000091   346 _TMR3CN	=	0x0091
                           000092   347 G$TMR3RLL$0$0 == 0x0092
                           000092   348 _TMR3RLL	=	0x0092
                           000093   349 G$TMR3RLH$0$0 == 0x0093
                           000093   350 _TMR3RLH	=	0x0093
                           000094   351 G$TMR3L$0$0 == 0x0094
                           000094   352 _TMR3L	=	0x0094
                           000095   353 G$TMR3H$0$0 == 0x0095
                           000095   354 _TMR3H	=	0x0095
                           000096   355 G$P7$0$0 == 0x0096
                           000096   356 _P7	=	0x0096
                           000098   357 G$SCON$0$0 == 0x0098
                           000098   358 _SCON	=	0x0098
                           000098   359 G$SCON0$0$0 == 0x0098
                           000098   360 _SCON0	=	0x0098
                           000099   361 G$SBUF$0$0 == 0x0099
                           000099   362 _SBUF	=	0x0099
                           000099   363 G$SBUF0$0$0 == 0x0099
                           000099   364 _SBUF0	=	0x0099
                           00009A   365 G$SPI0CFG$0$0 == 0x009a
                           00009A   366 _SPI0CFG	=	0x009a
                           00009B   367 G$SPI0DAT$0$0 == 0x009b
                           00009B   368 _SPI0DAT	=	0x009b
                           00009C   369 G$ADC1$0$0 == 0x009c
                           00009C   370 _ADC1	=	0x009c
                           00009D   371 G$SPI0CKR$0$0 == 0x009d
                           00009D   372 _SPI0CKR	=	0x009d
                           00009E   373 G$CPT0CN$0$0 == 0x009e
                           00009E   374 _CPT0CN	=	0x009e
                           00009F   375 G$CPT1CN$0$0 == 0x009f
                           00009F   376 _CPT1CN	=	0x009f
                           0000A0   377 G$P2$0$0 == 0x00a0
                           0000A0   378 _P2	=	0x00a0
                           0000A1   379 G$EMI0TC$0$0 == 0x00a1
                           0000A1   380 _EMI0TC	=	0x00a1
                           0000A3   381 G$EMI0CF$0$0 == 0x00a3
                           0000A3   382 _EMI0CF	=	0x00a3
                           0000A4   383 G$PRT0CF$0$0 == 0x00a4
                           0000A4   384 _PRT0CF	=	0x00a4
                           0000A4   385 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   386 _P0MDOUT	=	0x00a4
                           0000A5   387 G$PRT1CF$0$0 == 0x00a5
                           0000A5   388 _PRT1CF	=	0x00a5
                           0000A5   389 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   390 _P1MDOUT	=	0x00a5
                           0000A6   391 G$PRT2CF$0$0 == 0x00a6
                           0000A6   392 _PRT2CF	=	0x00a6
                           0000A6   393 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   394 _P2MDOUT	=	0x00a6
                           0000A7   395 G$PRT3CF$0$0 == 0x00a7
                           0000A7   396 _PRT3CF	=	0x00a7
                           0000A7   397 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   398 _P3MDOUT	=	0x00a7
                           0000A8   399 G$IE$0$0 == 0x00a8
                           0000A8   400 _IE	=	0x00a8
                           0000A9   401 G$SADDR0$0$0 == 0x00a9
                           0000A9   402 _SADDR0	=	0x00a9
                           0000AA   403 G$ADC1CN$0$0 == 0x00aa
                           0000AA   404 _ADC1CN	=	0x00aa
                           0000AB   405 G$ADC1CF$0$0 == 0x00ab
                           0000AB   406 _ADC1CF	=	0x00ab
                           0000AC   407 G$AMX1SL$0$0 == 0x00ac
                           0000AC   408 _AMX1SL	=	0x00ac
                           0000AD   409 G$P3IF$0$0 == 0x00ad
                           0000AD   410 _P3IF	=	0x00ad
                           0000AE   411 G$SADEN1$0$0 == 0x00ae
                           0000AE   412 _SADEN1	=	0x00ae
                           0000AF   413 G$EMI0CN$0$0 == 0x00af
                           0000AF   414 _EMI0CN	=	0x00af
                           0000AF   415 G$_XPAGE$0$0 == 0x00af
                           0000AF   416 __XPAGE	=	0x00af
                           0000B0   417 G$P3$0$0 == 0x00b0
                           0000B0   418 _P3	=	0x00b0
                           0000B1   419 G$OSCXCN$0$0 == 0x00b1
                           0000B1   420 _OSCXCN	=	0x00b1
                           0000B2   421 G$OSCICN$0$0 == 0x00b2
                           0000B2   422 _OSCICN	=	0x00b2
                           0000B5   423 G$P74OUT$0$0 == 0x00b5
                           0000B5   424 _P74OUT	=	0x00b5
                           0000B6   425 G$FLSCL$0$0 == 0x00b6
                           0000B6   426 _FLSCL	=	0x00b6
                           0000B7   427 G$FLACL$0$0 == 0x00b7
                           0000B7   428 _FLACL	=	0x00b7
                           0000B8   429 G$IP$0$0 == 0x00b8
                           0000B8   430 _IP	=	0x00b8
                           0000B9   431 G$SADEN0$0$0 == 0x00b9
                           0000B9   432 _SADEN0	=	0x00b9
                           0000BA   433 G$AMX0CF$0$0 == 0x00ba
                           0000BA   434 _AMX0CF	=	0x00ba
                           0000BB   435 G$AMX0SL$0$0 == 0x00bb
                           0000BB   436 _AMX0SL	=	0x00bb
                           0000BC   437 G$ADC0CF$0$0 == 0x00bc
                           0000BC   438 _ADC0CF	=	0x00bc
                           0000BD   439 G$P1MDIN$0$0 == 0x00bd
                           0000BD   440 _P1MDIN	=	0x00bd
                           0000BE   441 G$ADC0L$0$0 == 0x00be
                           0000BE   442 _ADC0L	=	0x00be
                           0000BF   443 G$ADC0H$0$0 == 0x00bf
                           0000BF   444 _ADC0H	=	0x00bf
                           0000C0   445 G$SMB0CN$0$0 == 0x00c0
                           0000C0   446 _SMB0CN	=	0x00c0
                           0000C1   447 G$SMB0STA$0$0 == 0x00c1
                           0000C1   448 _SMB0STA	=	0x00c1
                           0000C2   449 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   450 _SMB0DAT	=	0x00c2
                           0000C3   451 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   452 _SMB0ADR	=	0x00c3
                           0000C4   453 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   454 _ADC0GTL	=	0x00c4
                           0000C5   455 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   456 _ADC0GTH	=	0x00c5
                           0000C6   457 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   458 _ADC0LTL	=	0x00c6
                           0000C7   459 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   460 _ADC0LTH	=	0x00c7
                           0000C8   461 G$T2CON$0$0 == 0x00c8
                           0000C8   462 _T2CON	=	0x00c8
                           0000C9   463 G$T4CON$0$0 == 0x00c9
                           0000C9   464 _T4CON	=	0x00c9
                           0000CA   465 G$RCAP2L$0$0 == 0x00ca
                           0000CA   466 _RCAP2L	=	0x00ca
                           0000CB   467 G$RCAP2H$0$0 == 0x00cb
                           0000CB   468 _RCAP2H	=	0x00cb
                           0000CC   469 G$TL2$0$0 == 0x00cc
                           0000CC   470 _TL2	=	0x00cc
                           0000CD   471 G$TH2$0$0 == 0x00cd
                           0000CD   472 _TH2	=	0x00cd
                           0000CF   473 G$SMB0CR$0$0 == 0x00cf
                           0000CF   474 _SMB0CR	=	0x00cf
                           0000D0   475 G$PSW$0$0 == 0x00d0
                           0000D0   476 _PSW	=	0x00d0
                           0000D1   477 G$REF0CN$0$0 == 0x00d1
                           0000D1   478 _REF0CN	=	0x00d1
                           0000D2   479 G$DAC0L$0$0 == 0x00d2
                           0000D2   480 _DAC0L	=	0x00d2
                           0000D3   481 G$DAC0H$0$0 == 0x00d3
                           0000D3   482 _DAC0H	=	0x00d3
                           0000D4   483 G$DAC0CN$0$0 == 0x00d4
                           0000D4   484 _DAC0CN	=	0x00d4
                           0000D5   485 G$DAC1L$0$0 == 0x00d5
                           0000D5   486 _DAC1L	=	0x00d5
                           0000D6   487 G$DAC1H$0$0 == 0x00d6
                           0000D6   488 _DAC1H	=	0x00d6
                           0000D7   489 G$DAC1CN$0$0 == 0x00d7
                           0000D7   490 _DAC1CN	=	0x00d7
                           0000D8   491 G$PCA0CN$0$0 == 0x00d8
                           0000D8   492 _PCA0CN	=	0x00d8
                           0000D9   493 G$PCA0MD$0$0 == 0x00d9
                           0000D9   494 _PCA0MD	=	0x00d9
                           0000DA   495 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   496 _PCA0CPM0	=	0x00da
                           0000DB   497 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   498 _PCA0CPM1	=	0x00db
                           0000DC   499 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   500 _PCA0CPM2	=	0x00dc
                           0000DD   501 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   502 _PCA0CPM3	=	0x00dd
                           0000DE   503 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   504 _PCA0CPM4	=	0x00de
                           0000E0   505 G$ACC$0$0 == 0x00e0
                           0000E0   506 _ACC	=	0x00e0
                           0000E1   507 G$XBR0$0$0 == 0x00e1
                           0000E1   508 _XBR0	=	0x00e1
                           0000E2   509 G$XBR1$0$0 == 0x00e2
                           0000E2   510 _XBR1	=	0x00e2
                           0000E3   511 G$XBR2$0$0 == 0x00e3
                           0000E3   512 _XBR2	=	0x00e3
                           0000E4   513 G$RCAP4L$0$0 == 0x00e4
                           0000E4   514 _RCAP4L	=	0x00e4
                           0000E5   515 G$RCAP4H$0$0 == 0x00e5
                           0000E5   516 _RCAP4H	=	0x00e5
                           0000E6   517 G$EIE1$0$0 == 0x00e6
                           0000E6   518 _EIE1	=	0x00e6
                           0000E7   519 G$EIE2$0$0 == 0x00e7
                           0000E7   520 _EIE2	=	0x00e7
                           0000E8   521 G$ADC0CN$0$0 == 0x00e8
                           0000E8   522 _ADC0CN	=	0x00e8
                           0000E9   523 G$PCA0L$0$0 == 0x00e9
                           0000E9   524 _PCA0L	=	0x00e9
                           0000EA   525 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   526 _PCA0CPL0	=	0x00ea
                           0000EB   527 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   528 _PCA0CPL1	=	0x00eb
                           0000EC   529 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   530 _PCA0CPL2	=	0x00ec
                           0000ED   531 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   532 _PCA0CPL3	=	0x00ed
                           0000EE   533 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   534 _PCA0CPL4	=	0x00ee
                           0000EF   535 G$RSTSRC$0$0 == 0x00ef
                           0000EF   536 _RSTSRC	=	0x00ef
                           0000F0   537 G$B$0$0 == 0x00f0
                           0000F0   538 _B	=	0x00f0
                           0000F1   539 G$SCON1$0$0 == 0x00f1
                           0000F1   540 _SCON1	=	0x00f1
                           0000F2   541 G$SBUF1$0$0 == 0x00f2
                           0000F2   542 _SBUF1	=	0x00f2
                           0000F3   543 G$SADDR1$0$0 == 0x00f3
                           0000F3   544 _SADDR1	=	0x00f3
                           0000F4   545 G$TL4$0$0 == 0x00f4
                           0000F4   546 _TL4	=	0x00f4
                           0000F5   547 G$TH4$0$0 == 0x00f5
                           0000F5   548 _TH4	=	0x00f5
                           0000F6   549 G$EIP1$0$0 == 0x00f6
                           0000F6   550 _EIP1	=	0x00f6
                           0000F7   551 G$EIP2$0$0 == 0x00f7
                           0000F7   552 _EIP2	=	0x00f7
                           0000F8   553 G$SPI0CN$0$0 == 0x00f8
                           0000F8   554 _SPI0CN	=	0x00f8
                           0000F9   555 G$PCA0H$0$0 == 0x00f9
                           0000F9   556 _PCA0H	=	0x00f9
                           0000FA   557 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   558 _PCA0CPH0	=	0x00fa
                           0000FB   559 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   560 _PCA0CPH1	=	0x00fb
                           0000FC   561 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   562 _PCA0CPH2	=	0x00fc
                           0000FD   563 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   564 _PCA0CPH3	=	0x00fd
                           0000FE   565 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   566 _PCA0CPH4	=	0x00fe
                           0000FF   567 G$WDTCN$0$0 == 0x00ff
                           0000FF   568 _WDTCN	=	0x00ff
                           008C8A   569 G$TMR0$0$0 == 0x8c8a
                           008C8A   570 _TMR0	=	0x8c8a
                           008D8B   571 G$TMR1$0$0 == 0x8d8b
                           008D8B   572 _TMR1	=	0x8d8b
                           00CDCC   573 G$TMR2$0$0 == 0xcdcc
                           00CDCC   574 _TMR2	=	0xcdcc
                           00CBCA   575 G$RCAP2$0$0 == 0xcbca
                           00CBCA   576 _RCAP2	=	0xcbca
                           009594   577 G$TMR3$0$0 == 0x9594
                           009594   578 _TMR3	=	0x9594
                           009392   579 G$TMR3RL$0$0 == 0x9392
                           009392   580 _TMR3RL	=	0x9392
                           00F5F4   581 G$TMR4$0$0 == 0xf5f4
                           00F5F4   582 _TMR4	=	0xf5f4
                           00E5E4   583 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   584 _RCAP4	=	0xe5e4
                           00BFBE   585 G$ADC0$0$0 == 0xbfbe
                           00BFBE   586 _ADC0	=	0xbfbe
                           00C5C4   587 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   588 _ADC0GT	=	0xc5c4
                           00C7C6   589 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   590 _ADC0LT	=	0xc7c6
                           00D3D2   591 G$DAC0$0$0 == 0xd3d2
                           00D3D2   592 _DAC0	=	0xd3d2
                           00D6D5   593 G$DAC1$0$0 == 0xd6d5
                           00D6D5   594 _DAC1	=	0xd6d5
                           00F9E9   595 G$PCA0$0$0 == 0xf9e9
                           00F9E9   596 _PCA0	=	0xf9e9
                           00FAEA   597 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   598 _PCA0CP0	=	0xfaea
                           00FBEB   599 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   600 _PCA0CP1	=	0xfbeb
                           00FCEC   601 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   602 _PCA0CP2	=	0xfcec
                           00FDED   603 G$PCA0CP3$0$0 == 0xfded
                           00FDED   604 _PCA0CP3	=	0xfded
                           00FEEE   605 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   606 _PCA0CP4	=	0xfeee
                                    607 ;--------------------------------------------------------
                                    608 ; special function bits
                                    609 ;--------------------------------------------------------
                                    610 	.area RSEG    (ABS,DATA)
      000000                        611 	.org 0x0000
                           000080   612 G$P0_0$0$0 == 0x0080
                           000080   613 _P0_0	=	0x0080
                           000081   614 G$P0_1$0$0 == 0x0081
                           000081   615 _P0_1	=	0x0081
                           000082   616 G$P0_2$0$0 == 0x0082
                           000082   617 _P0_2	=	0x0082
                           000083   618 G$P0_3$0$0 == 0x0083
                           000083   619 _P0_3	=	0x0083
                           000084   620 G$P0_4$0$0 == 0x0084
                           000084   621 _P0_4	=	0x0084
                           000085   622 G$P0_5$0$0 == 0x0085
                           000085   623 _P0_5	=	0x0085
                           000086   624 G$P0_6$0$0 == 0x0086
                           000086   625 _P0_6	=	0x0086
                           000087   626 G$P0_7$0$0 == 0x0087
                           000087   627 _P0_7	=	0x0087
                           000088   628 G$IT0$0$0 == 0x0088
                           000088   629 _IT0	=	0x0088
                           000089   630 G$IE0$0$0 == 0x0089
                           000089   631 _IE0	=	0x0089
                           00008A   632 G$IT1$0$0 == 0x008a
                           00008A   633 _IT1	=	0x008a
                           00008B   634 G$IE1$0$0 == 0x008b
                           00008B   635 _IE1	=	0x008b
                           00008C   636 G$TR0$0$0 == 0x008c
                           00008C   637 _TR0	=	0x008c
                           00008D   638 G$TF0$0$0 == 0x008d
                           00008D   639 _TF0	=	0x008d
                           00008E   640 G$TR1$0$0 == 0x008e
                           00008E   641 _TR1	=	0x008e
                           00008F   642 G$TF1$0$0 == 0x008f
                           00008F   643 _TF1	=	0x008f
                           000090   644 G$P1_0$0$0 == 0x0090
                           000090   645 _P1_0	=	0x0090
                           000091   646 G$P1_1$0$0 == 0x0091
                           000091   647 _P1_1	=	0x0091
                           000092   648 G$P1_2$0$0 == 0x0092
                           000092   649 _P1_2	=	0x0092
                           000093   650 G$P1_3$0$0 == 0x0093
                           000093   651 _P1_3	=	0x0093
                           000094   652 G$P1_4$0$0 == 0x0094
                           000094   653 _P1_4	=	0x0094
                           000095   654 G$P1_5$0$0 == 0x0095
                           000095   655 _P1_5	=	0x0095
                           000096   656 G$P1_6$0$0 == 0x0096
                           000096   657 _P1_6	=	0x0096
                           000097   658 G$P1_7$0$0 == 0x0097
                           000097   659 _P1_7	=	0x0097
                           000098   660 G$RI$0$0 == 0x0098
                           000098   661 _RI	=	0x0098
                           000098   662 G$RI0$0$0 == 0x0098
                           000098   663 _RI0	=	0x0098
                           000099   664 G$TI$0$0 == 0x0099
                           000099   665 _TI	=	0x0099
                           000099   666 G$TI0$0$0 == 0x0099
                           000099   667 _TI0	=	0x0099
                           00009A   668 G$RB8$0$0 == 0x009a
                           00009A   669 _RB8	=	0x009a
                           00009A   670 G$RB80$0$0 == 0x009a
                           00009A   671 _RB80	=	0x009a
                           00009B   672 G$TB8$0$0 == 0x009b
                           00009B   673 _TB8	=	0x009b
                           00009B   674 G$TB80$0$0 == 0x009b
                           00009B   675 _TB80	=	0x009b
                           00009C   676 G$REN$0$0 == 0x009c
                           00009C   677 _REN	=	0x009c
                           00009C   678 G$REN0$0$0 == 0x009c
                           00009C   679 _REN0	=	0x009c
                           00009D   680 G$SM2$0$0 == 0x009d
                           00009D   681 _SM2	=	0x009d
                           00009D   682 G$SM20$0$0 == 0x009d
                           00009D   683 _SM20	=	0x009d
                           00009D   684 G$MCE0$0$0 == 0x009d
                           00009D   685 _MCE0	=	0x009d
                           00009E   686 G$SM1$0$0 == 0x009e
                           00009E   687 _SM1	=	0x009e
                           00009E   688 G$SM10$0$0 == 0x009e
                           00009E   689 _SM10	=	0x009e
                           00009F   690 G$SM0$0$0 == 0x009f
                           00009F   691 _SM0	=	0x009f
                           00009F   692 G$SM00$0$0 == 0x009f
                           00009F   693 _SM00	=	0x009f
                           00009F   694 G$S0MODE$0$0 == 0x009f
                           00009F   695 _S0MODE	=	0x009f
                           0000A0   696 G$P2_0$0$0 == 0x00a0
                           0000A0   697 _P2_0	=	0x00a0
                           0000A1   698 G$P2_1$0$0 == 0x00a1
                           0000A1   699 _P2_1	=	0x00a1
                           0000A2   700 G$P2_2$0$0 == 0x00a2
                           0000A2   701 _P2_2	=	0x00a2
                           0000A3   702 G$P2_3$0$0 == 0x00a3
                           0000A3   703 _P2_3	=	0x00a3
                           0000A4   704 G$P2_4$0$0 == 0x00a4
                           0000A4   705 _P2_4	=	0x00a4
                           0000A5   706 G$P2_5$0$0 == 0x00a5
                           0000A5   707 _P2_5	=	0x00a5
                           0000A6   708 G$P2_6$0$0 == 0x00a6
                           0000A6   709 _P2_6	=	0x00a6
                           0000A7   710 G$P2_7$0$0 == 0x00a7
                           0000A7   711 _P2_7	=	0x00a7
                           0000A8   712 G$EX0$0$0 == 0x00a8
                           0000A8   713 _EX0	=	0x00a8
                           0000A9   714 G$ET0$0$0 == 0x00a9
                           0000A9   715 _ET0	=	0x00a9
                           0000AA   716 G$EX1$0$0 == 0x00aa
                           0000AA   717 _EX1	=	0x00aa
                           0000AB   718 G$ET1$0$0 == 0x00ab
                           0000AB   719 _ET1	=	0x00ab
                           0000AC   720 G$ES0$0$0 == 0x00ac
                           0000AC   721 _ES0	=	0x00ac
                           0000AC   722 G$ES$0$0 == 0x00ac
                           0000AC   723 _ES	=	0x00ac
                           0000AD   724 G$ET2$0$0 == 0x00ad
                           0000AD   725 _ET2	=	0x00ad
                           0000AF   726 G$EA$0$0 == 0x00af
                           0000AF   727 _EA	=	0x00af
                           0000B0   728 G$P3_0$0$0 == 0x00b0
                           0000B0   729 _P3_0	=	0x00b0
                           0000B1   730 G$P3_1$0$0 == 0x00b1
                           0000B1   731 _P3_1	=	0x00b1
                           0000B2   732 G$P3_2$0$0 == 0x00b2
                           0000B2   733 _P3_2	=	0x00b2
                           0000B3   734 G$P3_3$0$0 == 0x00b3
                           0000B3   735 _P3_3	=	0x00b3
                           0000B4   736 G$P3_4$0$0 == 0x00b4
                           0000B4   737 _P3_4	=	0x00b4
                           0000B5   738 G$P3_5$0$0 == 0x00b5
                           0000B5   739 _P3_5	=	0x00b5
                           0000B6   740 G$P3_6$0$0 == 0x00b6
                           0000B6   741 _P3_6	=	0x00b6
                           0000B7   742 G$P3_7$0$0 == 0x00b7
                           0000B7   743 _P3_7	=	0x00b7
                           0000B8   744 G$PX0$0$0 == 0x00b8
                           0000B8   745 _PX0	=	0x00b8
                           0000B9   746 G$PT0$0$0 == 0x00b9
                           0000B9   747 _PT0	=	0x00b9
                           0000BA   748 G$PX1$0$0 == 0x00ba
                           0000BA   749 _PX1	=	0x00ba
                           0000BB   750 G$PT1$0$0 == 0x00bb
                           0000BB   751 _PT1	=	0x00bb
                           0000BC   752 G$PS0$0$0 == 0x00bc
                           0000BC   753 _PS0	=	0x00bc
                           0000BC   754 G$PS$0$0 == 0x00bc
                           0000BC   755 _PS	=	0x00bc
                           0000BD   756 G$PT2$0$0 == 0x00bd
                           0000BD   757 _PT2	=	0x00bd
                           0000C0   758 G$SMBTOE$0$0 == 0x00c0
                           0000C0   759 _SMBTOE	=	0x00c0
                           0000C1   760 G$SMBFTE$0$0 == 0x00c1
                           0000C1   761 _SMBFTE	=	0x00c1
                           0000C2   762 G$AA$0$0 == 0x00c2
                           0000C2   763 _AA	=	0x00c2
                           0000C3   764 G$SI$0$0 == 0x00c3
                           0000C3   765 _SI	=	0x00c3
                           0000C4   766 G$STO$0$0 == 0x00c4
                           0000C4   767 _STO	=	0x00c4
                           0000C5   768 G$STA$0$0 == 0x00c5
                           0000C5   769 _STA	=	0x00c5
                           0000C6   770 G$ENSMB$0$0 == 0x00c6
                           0000C6   771 _ENSMB	=	0x00c6
                           0000C7   772 G$BUSY$0$0 == 0x00c7
                           0000C7   773 _BUSY	=	0x00c7
                           0000C8   774 G$CPRL2$0$0 == 0x00c8
                           0000C8   775 _CPRL2	=	0x00c8
                           0000C9   776 G$CT2$0$0 == 0x00c9
                           0000C9   777 _CT2	=	0x00c9
                           0000CA   778 G$TR2$0$0 == 0x00ca
                           0000CA   779 _TR2	=	0x00ca
                           0000CB   780 G$EXEN2$0$0 == 0x00cb
                           0000CB   781 _EXEN2	=	0x00cb
                           0000CC   782 G$TCLK$0$0 == 0x00cc
                           0000CC   783 _TCLK	=	0x00cc
                           0000CD   784 G$RCLK$0$0 == 0x00cd
                           0000CD   785 _RCLK	=	0x00cd
                           0000CE   786 G$EXF2$0$0 == 0x00ce
                           0000CE   787 _EXF2	=	0x00ce
                           0000CF   788 G$TF2$0$0 == 0x00cf
                           0000CF   789 _TF2	=	0x00cf
                           0000D0   790 G$P$0$0 == 0x00d0
                           0000D0   791 _P	=	0x00d0
                           0000D1   792 G$F1$0$0 == 0x00d1
                           0000D1   793 _F1	=	0x00d1
                           0000D2   794 G$OV$0$0 == 0x00d2
                           0000D2   795 _OV	=	0x00d2
                           0000D3   796 G$RS0$0$0 == 0x00d3
                           0000D3   797 _RS0	=	0x00d3
                           0000D4   798 G$RS1$0$0 == 0x00d4
                           0000D4   799 _RS1	=	0x00d4
                           0000D5   800 G$F0$0$0 == 0x00d5
                           0000D5   801 _F0	=	0x00d5
                           0000D6   802 G$AC$0$0 == 0x00d6
                           0000D6   803 _AC	=	0x00d6
                           0000D7   804 G$CY$0$0 == 0x00d7
                           0000D7   805 _CY	=	0x00d7
                           0000D8   806 G$CCF0$0$0 == 0x00d8
                           0000D8   807 _CCF0	=	0x00d8
                           0000D9   808 G$CCF1$0$0 == 0x00d9
                           0000D9   809 _CCF1	=	0x00d9
                           0000DA   810 G$CCF2$0$0 == 0x00da
                           0000DA   811 _CCF2	=	0x00da
                           0000DB   812 G$CCF3$0$0 == 0x00db
                           0000DB   813 _CCF3	=	0x00db
                           0000DC   814 G$CCF4$0$0 == 0x00dc
                           0000DC   815 _CCF4	=	0x00dc
                           0000DE   816 G$CR$0$0 == 0x00de
                           0000DE   817 _CR	=	0x00de
                           0000DF   818 G$CF$0$0 == 0x00df
                           0000DF   819 _CF	=	0x00df
                           0000E8   820 G$ADLJST$0$0 == 0x00e8
                           0000E8   821 _ADLJST	=	0x00e8
                           0000E8   822 G$AD0LJST$0$0 == 0x00e8
                           0000E8   823 _AD0LJST	=	0x00e8
                           0000E9   824 G$ADWINT$0$0 == 0x00e9
                           0000E9   825 _ADWINT	=	0x00e9
                           0000E9   826 G$AD0WINT$0$0 == 0x00e9
                           0000E9   827 _AD0WINT	=	0x00e9
                           0000EA   828 G$ADSTM0$0$0 == 0x00ea
                           0000EA   829 _ADSTM0	=	0x00ea
                           0000EA   830 G$AD0CM0$0$0 == 0x00ea
                           0000EA   831 _AD0CM0	=	0x00ea
                           0000EB   832 G$ADSTM1$0$0 == 0x00eb
                           0000EB   833 _ADSTM1	=	0x00eb
                           0000EB   834 G$AD0CM1$0$0 == 0x00eb
                           0000EB   835 _AD0CM1	=	0x00eb
                           0000EC   836 G$ADBUSY$0$0 == 0x00ec
                           0000EC   837 _ADBUSY	=	0x00ec
                           0000EC   838 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   839 _AD0BUSY	=	0x00ec
                           0000ED   840 G$ADCINT$0$0 == 0x00ed
                           0000ED   841 _ADCINT	=	0x00ed
                           0000ED   842 G$AD0INT$0$0 == 0x00ed
                           0000ED   843 _AD0INT	=	0x00ed
                           0000EE   844 G$ADCTM$0$0 == 0x00ee
                           0000EE   845 _ADCTM	=	0x00ee
                           0000EE   846 G$AD0TM$0$0 == 0x00ee
                           0000EE   847 _AD0TM	=	0x00ee
                           0000EF   848 G$ADCEN$0$0 == 0x00ef
                           0000EF   849 _ADCEN	=	0x00ef
                           0000EF   850 G$AD0EN$0$0 == 0x00ef
                           0000EF   851 _AD0EN	=	0x00ef
                           0000F8   852 G$SPIEN$0$0 == 0x00f8
                           0000F8   853 _SPIEN	=	0x00f8
                           0000F9   854 G$MSTEN$0$0 == 0x00f9
                           0000F9   855 _MSTEN	=	0x00f9
                           0000FA   856 G$SLVSEL$0$0 == 0x00fa
                           0000FA   857 _SLVSEL	=	0x00fa
                           0000FB   858 G$TXBSY$0$0 == 0x00fb
                           0000FB   859 _TXBSY	=	0x00fb
                           0000FC   860 G$RXOVRN$0$0 == 0x00fc
                           0000FC   861 _RXOVRN	=	0x00fc
                           0000FD   862 G$MODF$0$0 == 0x00fd
                           0000FD   863 _MODF	=	0x00fd
                           0000FE   864 G$WCOL$0$0 == 0x00fe
                           0000FE   865 _WCOL	=	0x00fe
                           0000FF   866 G$SPIF$0$0 == 0x00ff
                           0000FF   867 _SPIF	=	0x00ff
                                    868 ;--------------------------------------------------------
                                    869 ; overlayable register banks
                                    870 ;--------------------------------------------------------
                                    871 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        872 	.ds 8
                                    873 ;--------------------------------------------------------
                                    874 ; internal ram data
                                    875 ;--------------------------------------------------------
                                    876 	.area DSEG    (DATA)
                           000000   877 G$SERVO_PW_CENTER$0$0==.
      000000                        878 _SERVO_PW_CENTER::
      000000                        879 	.ds 2
                           000002   880 G$SERVO_PW_RIGHT$0$0==.
      000002                        881 _SERVO_PW_RIGHT::
      000002                        882 	.ds 2
                           000004   883 G$SERVO_PW_LEFT$0$0==.
      000004                        884 _SERVO_PW_LEFT::
      000004                        885 	.ds 2
                           000006   886 G$SERVO_PW$0$0==.
      000006                        887 _SERVO_PW::
      000006                        888 	.ds 2
                           000008   889 Llab3_1.aligned_alloc$size$1$39==.
      000008                        890 _aligned_alloc_PARM_2:
      000008                        891 	.ds 2
                                    892 ;--------------------------------------------------------
                                    893 ; overlayable items in internal ram 
                                    894 ;--------------------------------------------------------
                                    895 	.area	OSEG    (OVR,DATA)
                                    896 	.area	OSEG    (OVR,DATA)
                                    897 ;--------------------------------------------------------
                                    898 ; Stack segment in internal ram 
                                    899 ;--------------------------------------------------------
                                    900 	.area	SSEG
      000000                        901 __start__stack:
      000000                        902 	.ds	1
                                    903 
                                    904 ;--------------------------------------------------------
                                    905 ; indirectly addressable internal ram data
                                    906 ;--------------------------------------------------------
                                    907 	.area ISEG    (DATA)
                                    908 ;--------------------------------------------------------
                                    909 ; absolute internal ram data
                                    910 ;--------------------------------------------------------
                                    911 	.area IABS    (ABS,DATA)
                                    912 	.area IABS    (ABS,DATA)
                                    913 ;--------------------------------------------------------
                                    914 ; bit data
                                    915 ;--------------------------------------------------------
                                    916 	.area BSEG    (BIT)
                                    917 ;--------------------------------------------------------
                                    918 ; paged external ram data
                                    919 ;--------------------------------------------------------
                                    920 	.area PSEG    (PAG,XDATA)
                                    921 ;--------------------------------------------------------
                                    922 ; external ram data
                                    923 ;--------------------------------------------------------
                                    924 	.area XSEG    (XDATA)
                                    925 ;--------------------------------------------------------
                                    926 ; absolute external ram data
                                    927 ;--------------------------------------------------------
                                    928 	.area XABS    (ABS,XDATA)
                                    929 ;--------------------------------------------------------
                                    930 ; external initialized ram data
                                    931 ;--------------------------------------------------------
                                    932 	.area XISEG   (XDATA)
                                    933 	.area HOME    (CODE)
                                    934 	.area GSINIT0 (CODE)
                                    935 	.area GSINIT1 (CODE)
                                    936 	.area GSINIT2 (CODE)
                                    937 	.area GSINIT3 (CODE)
                                    938 	.area GSINIT4 (CODE)
                                    939 	.area GSINIT5 (CODE)
                                    940 	.area GSINIT  (CODE)
                                    941 	.area GSFINAL (CODE)
                                    942 	.area CSEG    (CODE)
                                    943 ;--------------------------------------------------------
                                    944 ; interrupt vector 
                                    945 ;--------------------------------------------------------
                                    946 	.area HOME    (CODE)
      000000                        947 __interrupt_vect:
      000000 02r00r00         [24]  948 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  949 	reti
      000004                        950 	.ds	7
      00000B 32               [24]  951 	reti
      00000C                        952 	.ds	7
      000013 32               [24]  953 	reti
      000014                        954 	.ds	7
      00001B 32               [24]  955 	reti
      00001C                        956 	.ds	7
      000023 32               [24]  957 	reti
      000024                        958 	.ds	7
      00002B 32               [24]  959 	reti
      00002C                        960 	.ds	7
      000033 32               [24]  961 	reti
      000034                        962 	.ds	7
      00003B 32               [24]  963 	reti
      00003C                        964 	.ds	7
      000043 32               [24]  965 	reti
      000044                        966 	.ds	7
      00004B 02r00rC2         [24]  967 	ljmp	_PCA_ISR
                                    968 ;--------------------------------------------------------
                                    969 ; global & static initialisations
                                    970 ;--------------------------------------------------------
                                    971 	.area HOME    (CODE)
                                    972 	.area GSINIT  (CODE)
                                    973 	.area GSFINAL (CODE)
                                    974 	.area GSINIT  (CODE)
                                    975 	.globl __sdcc_gsinit_startup
                                    976 	.globl __sdcc_program_startup
                                    977 	.globl __start__stack
                                    978 	.globl __mcs51_genXINIT
                                    979 	.globl __mcs51_genXRAMCLEAR
                                    980 	.globl __mcs51_genRAMCLEAR
                           000000   981 	C$lab3_1.c$28$1$63 ==.
                                    982 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:28: unsigned int SERVO_PW = 0;
      000000 E4               [12]  983 	clr	a
      000001 F5*06            [12]  984 	mov	_SERVO_PW,a
      000003 F5*07            [12]  985 	mov	(_SERVO_PW + 1),a
                                    986 	.area GSFINAL (CODE)
      000000 02r00r4E         [24]  987 	ljmp	__sdcc_program_startup
                                    988 ;--------------------------------------------------------
                                    989 ; Home
                                    990 ;--------------------------------------------------------
                                    991 	.area HOME    (CODE)
                                    992 	.area HOME    (CODE)
      00004E                        993 __sdcc_program_startup:
      00004E 02r00r7B         [24]  994 	ljmp	_main
                                    995 ;	return from main will return to caller
                                    996 ;--------------------------------------------------------
                                    997 ; code
                                    998 ;--------------------------------------------------------
                                    999 	.area CSEG    (CODE)
                                   1000 ;------------------------------------------------------------
                                   1001 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1002 ;------------------------------------------------------------
                                   1003 ;i                         Allocated to registers r6 r7 
                                   1004 ;------------------------------------------------------------
                           000000  1005 	G$SYSCLK_Init$0$0 ==.
                           000000  1006 	C$c8051_SDCC.h$62$0$0 ==.
                                   1007 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:62: void SYSCLK_Init(void)
                                   1008 ;	-----------------------------------------
                                   1009 ;	 function SYSCLK_Init
                                   1010 ;	-----------------------------------------
      000000                       1011 _SYSCLK_Init:
                           000007  1012 	ar7 = 0x07
                           000006  1013 	ar6 = 0x06
                           000005  1014 	ar5 = 0x05
                           000004  1015 	ar4 = 0x04
                           000003  1016 	ar3 = 0x03
                           000002  1017 	ar2 = 0x02
                           000001  1018 	ar1 = 0x01
                           000000  1019 	ar0 = 0x00
                           000000  1020 	C$c8051_SDCC.h$66$1$2 ==.
                                   1021 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1022 	mov	_OSCXCN,#0x67
                           000003  1023 	C$c8051_SDCC.h$69$1$2 ==.
                                   1024 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1025 	mov	r6,#0x00
      000005 7F 01            [12] 1026 	mov	r7,#0x01
      000007                       1027 00107$:
      000007 EE               [12] 1028 	mov	a,r6
      000008 24 FF            [12] 1029 	add	a,#0xff
      00000A FC               [12] 1030 	mov	r4,a
      00000B EF               [12] 1031 	mov	a,r7
      00000C 34 FF            [12] 1032 	addc	a,#0xff
      00000E FD               [12] 1033 	mov	r5,a
      00000F 8C 06            [24] 1034 	mov	ar6,r4
      000011 8D 07            [24] 1035 	mov	ar7,r5
      000013 EC               [12] 1036 	mov	a,r4
      000014 4D               [12] 1037 	orl	a,r5
      000015 70 F0            [24] 1038 	jnz	00107$
                           000017  1039 	C$c8051_SDCC.h$71$1$2 ==.
                                   1040 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1041 00102$:
      000017 E5 B1            [12] 1042 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1043 	jnb	acc.7,00102$
                           00001C  1044 	C$c8051_SDCC.h$73$1$2 ==.
                                   1045 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1046 	mov	_OSCICN,#0x88
                           00001F  1047 	C$c8051_SDCC.h$76$1$2 ==.
                           00001F  1048 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1049 	ret
                                   1050 ;------------------------------------------------------------
                                   1051 ;Allocation info for local variables in function 'UART0_Init'
                                   1052 ;------------------------------------------------------------
                           000020  1053 	G$UART0_Init$0$0 ==.
                           000020  1054 	C$c8051_SDCC.h$84$1$2 ==.
                                   1055 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:84: void UART0_Init(void)
                                   1056 ;	-----------------------------------------
                                   1057 ;	 function UART0_Init
                                   1058 ;	-----------------------------------------
      000020                       1059 _UART0_Init:
                           000020  1060 	C$c8051_SDCC.h$86$1$4 ==.
                                   1061 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1062 	mov	_SCON0,#0x50
                           000023  1063 	C$c8051_SDCC.h$87$1$4 ==.
                                   1064 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:87: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1065 	mov	_TMOD,#0x20
                           000026  1066 	C$c8051_SDCC.h$88$1$4 ==.
                                   1067 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1068 	mov	_TH1,#0xdc
                           000029  1069 	C$c8051_SDCC.h$89$1$4 ==.
                                   1070 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1071 	setb	_TR1
                           00002B  1072 	C$c8051_SDCC.h$90$1$4 ==.
                                   1073 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:90: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1074 	orl	_CKCON,#0x10
                           00002E  1075 	C$c8051_SDCC.h$91$1$4 ==.
                                   1076 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1077 	orl	_PCON,#0x80
                           000031  1078 	C$c8051_SDCC.h$93$1$4 ==.
                                   1079 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:93: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1080 	setb	_TI0
                           000033  1081 	C$c8051_SDCC.h$94$1$4 ==.
                                   1082 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:94: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1083 	orl	_P0MDOUT,#0x01
                           000036  1084 	C$c8051_SDCC.h$95$1$4 ==.
                           000036  1085 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1086 	ret
                                   1087 ;------------------------------------------------------------
                                   1088 ;Allocation info for local variables in function 'Sys_Init'
                                   1089 ;------------------------------------------------------------
                           000037  1090 	G$Sys_Init$0$0 ==.
                           000037  1091 	C$c8051_SDCC.h$103$1$4 ==.
                                   1092 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:103: void Sys_Init(void)
                                   1093 ;	-----------------------------------------
                                   1094 ;	 function Sys_Init
                                   1095 ;	-----------------------------------------
      000037                       1096 _Sys_Init:
                           000037  1097 	C$c8051_SDCC.h$105$1$6 ==.
                                   1098 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:105: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1099 	mov	_WDTCN,#0xde
                           00003A  1100 	C$c8051_SDCC.h$106$1$6 ==.
                                   1101 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:106: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1102 	mov	_WDTCN,#0xad
                           00003D  1103 	C$c8051_SDCC.h$108$1$6 ==.
                                   1104 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1105 	lcall	_SYSCLK_Init
                           000040  1106 	C$c8051_SDCC.h$109$1$6 ==.
                                   1107 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:109: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1108 	lcall	_UART0_Init
                           000043  1109 	C$c8051_SDCC.h$111$1$6 ==.
                                   1110 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1111 	orl	_XBR0,#0x04
                           000046  1112 	C$c8051_SDCC.h$112$1$6 ==.
                                   1113 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1114 	orl	_XBR2,#0x40
                           000049  1115 	C$c8051_SDCC.h$113$1$6 ==.
                           000049  1116 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1117 	ret
                                   1118 ;------------------------------------------------------------
                                   1119 ;Allocation info for local variables in function 'putchar'
                                   1120 ;------------------------------------------------------------
                                   1121 ;c                         Allocated to registers r7 
                                   1122 ;------------------------------------------------------------
                           00004A  1123 	G$putchar$0$0 ==.
                           00004A  1124 	C$c8051_SDCC.h$129$1$6 ==.
                                   1125 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: void putchar(char c)
                                   1126 ;	-----------------------------------------
                                   1127 ;	 function putchar
                                   1128 ;	-----------------------------------------
      00004A                       1129 _putchar:
      00004A AF 82            [24] 1130 	mov	r7,dpl
                           00004C  1131 	C$c8051_SDCC.h$132$1$8 ==.
                                   1132 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:132: while (!TI0); 
      00004C                       1133 00101$:
                           00004C  1134 	C$c8051_SDCC.h$133$1$8 ==.
                                   1135 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:133: TI0 = 0;
      00004C 10 99 02         [24] 1136 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1137 	sjmp	00101$
      000051                       1138 00112$:
                           000051  1139 	C$c8051_SDCC.h$134$1$8 ==.
                                   1140 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:134: SBUF0 = c;
      000051 8F 99            [24] 1141 	mov	_SBUF0,r7
                           000053  1142 	C$c8051_SDCC.h$135$1$8 ==.
                           000053  1143 	XG$putchar$0$0 ==.
      000053 22               [24] 1144 	ret
                                   1145 ;------------------------------------------------------------
                                   1146 ;Allocation info for local variables in function 'getchar'
                                   1147 ;------------------------------------------------------------
                                   1148 ;c                         Allocated to registers r7 
                                   1149 ;------------------------------------------------------------
                           000054  1150 	G$getchar$0$0 ==.
                           000054  1151 	C$c8051_SDCC.h$154$1$8 ==.
                                   1152 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:154: char getchar(void)
                                   1153 ;	-----------------------------------------
                                   1154 ;	 function getchar
                                   1155 ;	-----------------------------------------
      000054                       1156 _getchar:
                           000054  1157 	C$c8051_SDCC.h$157$1$10 ==.
                                   1158 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:157: while (!RI0);
      000054                       1159 00101$:
                           000054  1160 	C$c8051_SDCC.h$158$1$10 ==.
                                   1161 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:158: RI0 = 0;
      000054 10 98 02         [24] 1162 	jbc	_RI0,00112$
      000057 80 FB            [24] 1163 	sjmp	00101$
      000059                       1164 00112$:
                           000059  1165 	C$c8051_SDCC.h$159$1$10 ==.
                                   1166 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:159: c = SBUF0;
      000059 AF 99            [24] 1167 	mov	r7,_SBUF0
                           00005B  1168 	C$c8051_SDCC.h$160$1$10 ==.
                                   1169 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:160: putchar(c);                          // echo to terminal
      00005B 8F 82            [24] 1170 	mov	dpl,r7
      00005D C0 07            [24] 1171 	push	ar7
      00005F 12r00r4A         [24] 1172 	lcall	_putchar
      000062 D0 07            [24] 1173 	pop	ar7
                           000064  1174 	C$c8051_SDCC.h$161$1$10 ==.
                                   1175 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:161: return c;
      000064 8F 82            [24] 1176 	mov	dpl,r7
                           000066  1177 	C$c8051_SDCC.h$162$1$10 ==.
                           000066  1178 	XG$getchar$0$0 ==.
      000066 22               [24] 1179 	ret
                                   1180 ;------------------------------------------------------------
                                   1181 ;Allocation info for local variables in function 'getchar_nw'
                                   1182 ;------------------------------------------------------------
                                   1183 ;c                         Allocated to registers 
                                   1184 ;------------------------------------------------------------
                           000067  1185 	G$getchar_nw$0$0 ==.
                           000067  1186 	C$c8051_SDCC.h$168$1$10 ==.
                                   1187 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:168: char getchar_nw(void)
                                   1188 ;	-----------------------------------------
                                   1189 ;	 function getchar_nw
                                   1190 ;	-----------------------------------------
      000067                       1191 _getchar_nw:
                           000067  1192 	C$c8051_SDCC.h$171$1$12 ==.
                                   1193 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:171: if (!RI0) return 0xFF;
      000067 20 98 05         [24] 1194 	jb	_RI0,00102$
      00006A 75 82 FF         [24] 1195 	mov	dpl,#0xff
      00006D 80 0B            [24] 1196 	sjmp	00104$
      00006F                       1197 00102$:
                           00006F  1198 	C$c8051_SDCC.h$174$2$13 ==.
                                   1199 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:174: RI0 = 0;
      00006F C2 98            [12] 1200 	clr	_RI0
                           000071  1201 	C$c8051_SDCC.h$175$2$13 ==.
                                   1202 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:175: c = SBUF0;
      000071 85 99 82         [24] 1203 	mov	dpl,_SBUF0
                           000074  1204 	C$c8051_SDCC.h$176$2$13 ==.
                                   1205 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:176: putchar(c);                          // echo to terminal
      000074 12r00r4A         [24] 1206 	lcall	_putchar
                           000077  1207 	C$c8051_SDCC.h$177$2$13 ==.
                                   1208 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:177: return SBUF0;
      000077 85 99 82         [24] 1209 	mov	dpl,_SBUF0
      00007A                       1210 00104$:
                           00007A  1211 	C$c8051_SDCC.h$179$1$12 ==.
                           00007A  1212 	XG$getchar_nw$0$0 ==.
      00007A 22               [24] 1213 	ret
                                   1214 ;------------------------------------------------------------
                                   1215 ;Allocation info for local variables in function 'main'
                                   1216 ;------------------------------------------------------------
                           00007B  1217 	G$main$0$0 ==.
                           00007B  1218 	C$lab3_1.c$38$1$12 ==.
                                   1219 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:38: void main(void)
                                   1220 ;	-----------------------------------------
                                   1221 ;	 function main
                                   1222 ;	-----------------------------------------
      00007B                       1223 _main:
                           00007B  1224 	C$lab3_1.c$41$1$52 ==.
                                   1225 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:41: Sys_Init();
      00007B 12r00r37         [24] 1226 	lcall	_Sys_Init
                           00007E  1227 	C$lab3_1.c$42$1$52 ==.
                                   1228 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:42: putchar(' '); //the quotes in this line may not format correctly
      00007E 75 82 20         [24] 1229 	mov	dpl,#0x20
      000081 12r00r4A         [24] 1230 	lcall	_putchar
                           000084  1231 	C$lab3_1.c$43$1$52 ==.
                                   1232 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:43: Port_Init();
      000084 12r00rAE         [24] 1233 	lcall	_Port_Init
                           000087  1234 	C$lab3_1.c$44$1$52 ==.
                                   1235 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:44: XBR0_Init();
      000087 12r00rAF         [24] 1236 	lcall	_XBR0_Init
                           00008A  1237 	C$lab3_1.c$45$1$52 ==.
                                   1238 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:45: PCA_Init();
      00008A 12r00rB3         [24] 1239 	lcall	_PCA_Init
                           00008D  1240 	C$lab3_1.c$48$1$52 ==.
                                   1241 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:48: printf("Embedded Control Pulsewidth Calibration\n");
      00008D 74r00            [12] 1242 	mov	a,#___str_0
      00008F C0 E0            [24] 1243 	push	acc
      000091 74s00            [12] 1244 	mov	a,#(___str_0 >> 8)
      000093 C0 E0            [24] 1245 	push	acc
      000095 74 80            [12] 1246 	mov	a,#0x80
      000097 C0 E0            [24] 1247 	push	acc
      000099 12r00r00         [24] 1248 	lcall	_printf
      00009C 15 81            [12] 1249 	dec	sp
      00009E 15 81            [12] 1250 	dec	sp
      0000A0 15 81            [12] 1251 	dec	sp
                           0000A2  1252 	C$lab3_1.c$52$1$52 ==.
                                   1253 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:52: SERVO_PW = SERVO_PW_CENTER;
      0000A2 85*00*06         [24] 1254 	mov	_SERVO_PW,_SERVO_PW_CENTER
      0000A5 85*01*07         [24] 1255 	mov	(_SERVO_PW + 1),(_SERVO_PW_CENTER + 1)
                           0000A8  1256 	C$lab3_1.c$55$1$52 ==.
                                   1257 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:55: while(1)
      0000A8                       1258 00102$:
                           0000A8  1259 	C$lab3_1.c$56$1$52 ==.
                                   1260 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:56: Set_Pulsewidth();
      0000A8 12r00rD1         [24] 1261 	lcall	_Set_Pulsewidth
      0000AB 80 FB            [24] 1262 	sjmp	00102$
                           0000AD  1263 	C$lab3_1.c$57$1$52 ==.
                           0000AD  1264 	XG$main$0$0 ==.
      0000AD 22               [24] 1265 	ret
                                   1266 ;------------------------------------------------------------
                                   1267 ;Allocation info for local variables in function 'Port_Init'
                                   1268 ;------------------------------------------------------------
                           0000AE  1269 	G$Port_Init$0$0 ==.
                           0000AE  1270 	C$lab3_1.c$65$1$52 ==.
                                   1271 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:65: void Port_Init()
                                   1272 ;	-----------------------------------------
                                   1273 ;	 function Port_Init
                                   1274 ;	-----------------------------------------
      0000AE                       1275 _Port_Init:
                           0000AE  1276 	C$lab3_1.c$68$1$52 ==.
                                   1277 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:68: }
                           0000AE  1278 	C$lab3_1.c$68$1$52 ==.
                           0000AE  1279 	XG$Port_Init$0$0 ==.
      0000AE 22               [24] 1280 	ret
                                   1281 ;------------------------------------------------------------
                                   1282 ;Allocation info for local variables in function 'XBR0_Init'
                                   1283 ;------------------------------------------------------------
                           0000AF  1284 	G$XBR0_Init$0$0 ==.
                           0000AF  1285 	C$lab3_1.c$76$1$52 ==.
                                   1286 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:76: void XBR0_Init()
                                   1287 ;	-----------------------------------------
                                   1288 ;	 function XBR0_Init
                                   1289 ;	-----------------------------------------
      0000AF                       1290 _XBR0_Init:
                           0000AF  1291 	C$lab3_1.c$78$1$54 ==.
                                   1292 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:78: XBR0 = 0x27;     // set up URART0, SPI, SMB, and CEX 0-3
      0000AF 75 E1 27         [24] 1293 	mov	_XBR0,#0x27
                           0000B2  1294 	C$lab3_1.c$80$1$54 ==.
                           0000B2  1295 	XG$XBR0_Init$0$0 ==.
      0000B2 22               [24] 1296 	ret
                                   1297 ;------------------------------------------------------------
                                   1298 ;Allocation info for local variables in function 'PCA_Init'
                                   1299 ;------------------------------------------------------------
                           0000B3  1300 	G$PCA_Init$0$0 ==.
                           0000B3  1301 	C$lab3_1.c$88$1$54 ==.
                                   1302 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:88: void PCA_Init(void)
                                   1303 ;	-----------------------------------------
                                   1304 ;	 function PCA_Init
                                   1305 ;	-----------------------------------------
      0000B3                       1306 _PCA_Init:
                           0000B3  1307 	C$lab3_1.c$90$1$56 ==.
                                   1308 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:90: EA = 1; // Enable all interrupts
      0000B3 D2 AF            [12] 1309 	setb	_EA
                           0000B5  1310 	C$lab3_1.c$91$1$56 ==.
                                   1311 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:91: EIE1 |= 0x08; // Enable PCA0 interrupts
      0000B5 43 E6 08         [24] 1312 	orl	_EIE1,#0x08
                           0000B8  1313 	C$lab3_1.c$92$1$56 ==.
                                   1314 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:92: PCA0MD = 0x81;   // SYSCLK/12, enable CF interrupts, suspend when idle
      0000B8 75 D9 81         [24] 1315 	mov	_PCA0MD,#0x81
                           0000BB  1316 	C$lab3_1.c$93$1$56 ==.
                                   1317 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:93: PCA0CPM1 = 0xC2; // 16 bit, enable compare, enable PWM
      0000BB 75 DB C2         [24] 1318 	mov	_PCA0CPM1,#0xc2
                           0000BE  1319 	C$lab3_1.c$94$1$56 ==.
                                   1320 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:94: PCA0CN |= 0x40;  // enable PCA
      0000BE 43 D8 40         [24] 1321 	orl	_PCA0CN,#0x40
                           0000C1  1322 	C$lab3_1.c$95$1$56 ==.
                           0000C1  1323 	XG$PCA_Init$0$0 ==.
      0000C1 22               [24] 1324 	ret
                                   1325 ;------------------------------------------------------------
                                   1326 ;Allocation info for local variables in function 'PCA_ISR'
                                   1327 ;------------------------------------------------------------
                           0000C2  1328 	G$PCA_ISR$0$0 ==.
                           0000C2  1329 	C$lab3_1.c$103$1$56 ==.
                                   1330 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:103: void PCA_ISR ( void ) __interrupt 9
                                   1331 ;	-----------------------------------------
                                   1332 ;	 function PCA_ISR
                                   1333 ;	-----------------------------------------
      0000C2                       1334 _PCA_ISR:
                           0000C2  1335 	C$lab3_1.c$105$1$58 ==.
                                   1336 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:105: if (CF)
                           0000C2  1337 	C$lab3_1.c$107$2$59 ==.
                                   1338 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:107: CF = 0; // Clear overflow flag
      0000C2 10 DF 02         [24] 1339 	jbc	_CF,00108$
      0000C5 80 06            [24] 1340 	sjmp	00102$
      0000C7                       1341 00108$:
                           0000C7  1342 	C$lab3_1.c$108$2$59 ==.
                                   1343 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:108: PCA0 = PCA_START; // Set period for 20ms
      0000C7 75 E9 FF         [24] 1344 	mov	((_PCA0 >> 0) & 0xFF),#0xff
      0000CA 75 F9 6F         [24] 1345 	mov	((_PCA0 >> 8) & 0xFF),#0x6f
      0000CD                       1346 00102$:
                           0000CD  1347 	C$lab3_1.c$111$1$58 ==.
                                   1348 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:111: PCA0CN &= 0x40; // Clear other PCI interrupt sources
      0000CD 53 D8 40         [24] 1349 	anl	_PCA0CN,#0x40
                           0000D0  1350 	C$lab3_1.c$112$1$58 ==.
                           0000D0  1351 	XG$PCA_ISR$0$0 ==.
      0000D0 32               [24] 1352 	reti
                                   1353 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1354 ;	eliminated unneeded push/pop psw
                                   1355 ;	eliminated unneeded push/pop dpl
                                   1356 ;	eliminated unneeded push/pop dph
                                   1357 ;	eliminated unneeded push/pop b
                                   1358 ;	eliminated unneeded push/pop acc
                                   1359 ;------------------------------------------------------------
                                   1360 ;Allocation info for local variables in function 'Set_Pulsewidth'
                                   1361 ;------------------------------------------------------------
                                   1362 ;input                     Allocated to registers r7 
                                   1363 ;------------------------------------------------------------
                           0000D1  1364 	G$Set_Pulsewidth$0$0 ==.
                           0000D1  1365 	C$lab3_1.c$114$1$58 ==.
                                   1366 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:114: void Set_Pulsewidth()
                                   1367 ;	-----------------------------------------
                                   1368 ;	 function Set_Pulsewidth
                                   1369 ;	-----------------------------------------
      0000D1                       1370 _Set_Pulsewidth:
                           0000D1  1371 	C$lab3_1.c$118$1$60 ==.
                                   1372 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:118: input = getchar();
      0000D1 12r00r54         [24] 1373 	lcall	_getchar
      0000D4 AF 82            [24] 1374 	mov	r7,dpl
                           0000D6  1375 	C$lab3_1.c$119$1$60 ==.
                                   1376 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:119: if(input == '+')  // single character input to increase the pulsewidth
      0000D6 BF 2B 0D         [24] 1377 	cjne	r7,#0x2b,00104$
                           0000D9  1378 	C$lab3_1.c$121$2$61 ==.
                                   1379 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:121: SERVO_PW += 10; // Increase pulse width 
      0000D9 74 0A            [12] 1380 	mov	a,#0x0a
      0000DB 25*06            [12] 1381 	add	a,_SERVO_PW
      0000DD F5*06            [12] 1382 	mov	_SERVO_PW,a
      0000DF E4               [12] 1383 	clr	a
      0000E0 35*07            [12] 1384 	addc	a,(_SERVO_PW + 1)
      0000E2 F5*07            [12] 1385 	mov	(_SERVO_PW + 1),a
      0000E4 80 0F            [24] 1386 	sjmp	00105$
      0000E6                       1387 00104$:
                           0000E6  1388 	C$lab3_1.c$126$1$60 ==.
                                   1389 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:126: else if(input == '-')  // single character input to decrease the pulsewidth
      0000E6 BF 2D 0C         [24] 1390 	cjne	r7,#0x2d,00105$
                           0000E9  1391 	C$lab3_1.c$128$2$62 ==.
                                   1392 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:128: SERVO_PW -= 10; // Decrease pulse width 
      0000E9 E5*06            [12] 1393 	mov	a,_SERVO_PW
      0000EB 24 F6            [12] 1394 	add	a,#0xf6
      0000ED F5*06            [12] 1395 	mov	_SERVO_PW,a
      0000EF E5*07            [12] 1396 	mov	a,(_SERVO_PW + 1)
      0000F1 34 FF            [12] 1397 	addc	a,#0xff
      0000F3 F5*07            [12] 1398 	mov	(_SERVO_PW + 1),a
      0000F5                       1399 00105$:
                           0000F5  1400 	C$lab3_1.c$132$1$60 ==.
                                   1401 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:132: printf("SERVO_PW: %u\n", SERVO_PW);
      0000F5 C0*06            [24] 1402 	push	_SERVO_PW
      0000F7 C0*07            [24] 1403 	push	(_SERVO_PW + 1)
      0000F9 74r29            [12] 1404 	mov	a,#___str_1
      0000FB C0 E0            [24] 1405 	push	acc
      0000FD 74s00            [12] 1406 	mov	a,#(___str_1 >> 8)
      0000FF C0 E0            [24] 1407 	push	acc
      000101 74 80            [12] 1408 	mov	a,#0x80
      000103 C0 E0            [24] 1409 	push	acc
      000105 12r00r00         [24] 1410 	lcall	_printf
      000108 E5 81            [12] 1411 	mov	a,sp
      00010A 24 FB            [12] 1412 	add	a,#0xfb
      00010C F5 81            [12] 1413 	mov	sp,a
                           00010E  1414 	C$lab3_1.c$133$1$60 ==.
                                   1415 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:133: PCA0CP1 = 0xFFFF - SERVO_PW;
      00010E 74 FF            [12] 1416 	mov	a,#0xff
      000110 C3               [12] 1417 	clr	c
      000111 95*06            [12] 1418 	subb	a,_SERVO_PW
      000113 F5 EB            [12] 1419 	mov	((_PCA0CP1 >> 0) & 0xFF),a
      000115 74 FF            [12] 1420 	mov	a,#0xff
      000117 95*07            [12] 1421 	subb	a,(_SERVO_PW + 1)
      000119 F5 FB            [12] 1422 	mov	((_PCA0CP1 >> 8) & 0xFF),a
                           00011B  1423 	C$lab3_1.c$135$1$60 ==.
                           00011B  1424 	XG$Set_Pulsewidth$0$0 ==.
      00011B 22               [24] 1425 	ret
                                   1426 ;------------------------------------------------------------
                                   1427 ;Allocation info for local variables in function 'Steering_Servo'
                                   1428 ;------------------------------------------------------------
                                   1429 ;input                     Allocated to registers r7 
                                   1430 ;------------------------------------------------------------
                           00011C  1431 	G$Steering_Servo$0$0 ==.
                           00011C  1432 	C$lab3_1.c$137$1$60 ==.
                                   1433 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:137: void Steering_Servo()
                                   1434 ;	-----------------------------------------
                                   1435 ;	 function Steering_Servo
                                   1436 ;	-----------------------------------------
      00011C                       1437 _Steering_Servo:
                           00011C  1438 	C$lab3_1.c$141$1$63 ==.
                                   1439 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:141: input = getchar();
      00011C 12r00r54         [24] 1440 	lcall	_getchar
      00011F AF 82            [24] 1441 	mov	r7,dpl
                           000121  1442 	C$lab3_1.c$142$1$63 ==.
                                   1443 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:142: if(input == 'r') //if 'r' is pressed by the user
      000121 BF 72 18         [24] 1444 	cjne	r7,#0x72,00108$
                           000124  1445 	C$lab3_1.c$144$2$64 ==.
                                   1446 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:144: if(SERVO_PW < SERVO_PW_RIGHT)
      000124 C3               [12] 1447 	clr	c
      000125 E5*06            [12] 1448 	mov	a,_SERVO_PW
      000127 95*02            [12] 1449 	subb	a,_SERVO_PW_RIGHT
      000129 E5*07            [12] 1450 	mov	a,(_SERVO_PW + 1)
      00012B 95*03            [12] 1451 	subb	a,(_SERVO_PW_RIGHT + 1)
      00012D 50 27            [24] 1452 	jnc	00109$
                           00012F  1453 	C$lab3_1.c$145$2$64 ==.
                                   1454 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:145: SERVO_PW = SERVO_PW + 10; //increase the steering pulsewidth by 10
      00012F 74 0A            [12] 1455 	mov	a,#0x0a
      000131 25*06            [12] 1456 	add	a,_SERVO_PW
      000133 F5*06            [12] 1457 	mov	_SERVO_PW,a
      000135 E4               [12] 1458 	clr	a
      000136 35*07            [12] 1459 	addc	a,(_SERVO_PW + 1)
      000138 F5*07            [12] 1460 	mov	(_SERVO_PW + 1),a
      00013A 80 1A            [24] 1461 	sjmp	00109$
      00013C                       1462 00108$:
                           00013C  1463 	C$lab3_1.c$147$1$63 ==.
                                   1464 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:147: else if(input == 'l') //if 'l' is pressed by the user
      00013C BF 6C 17         [24] 1465 	cjne	r7,#0x6c,00109$
                           00013F  1466 	C$lab3_1.c$149$2$65 ==.
                                   1467 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:149: if(SERVO_PW > SERVO_PW_LEFT)
      00013F C3               [12] 1468 	clr	c
      000140 E5*04            [12] 1469 	mov	a,_SERVO_PW_LEFT
      000142 95*06            [12] 1470 	subb	a,_SERVO_PW
      000144 E5*05            [12] 1471 	mov	a,(_SERVO_PW_LEFT + 1)
      000146 95*07            [12] 1472 	subb	a,(_SERVO_PW + 1)
      000148 50 0C            [24] 1473 	jnc	00109$
                           00014A  1474 	C$lab3_1.c$150$2$65 ==.
                                   1475 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:150: SERVO_PW = SERVO_PW - 10; //decrease the steering pulsewidth by 10
      00014A E5*06            [12] 1476 	mov	a,_SERVO_PW
      00014C 24 F6            [12] 1477 	add	a,#0xf6
      00014E F5*06            [12] 1478 	mov	_SERVO_PW,a
      000150 E5*07            [12] 1479 	mov	a,(_SERVO_PW + 1)
      000152 34 FF            [12] 1480 	addc	a,#0xff
      000154 F5*07            [12] 1481 	mov	(_SERVO_PW + 1),a
      000156                       1482 00109$:
                           000156  1483 	C$lab3_1.c$152$1$63 ==.
                                   1484 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:152: printf("SERVO_PW: %u\n", SERVO_PW);
      000156 C0*06            [24] 1485 	push	_SERVO_PW
      000158 C0*07            [24] 1486 	push	(_SERVO_PW + 1)
      00015A 74r29            [12] 1487 	mov	a,#___str_1
      00015C C0 E0            [24] 1488 	push	acc
      00015E 74s00            [12] 1489 	mov	a,#(___str_1 >> 8)
      000160 C0 E0            [24] 1490 	push	acc
      000162 74 80            [12] 1491 	mov	a,#0x80
      000164 C0 E0            [24] 1492 	push	acc
      000166 12r00r00         [24] 1493 	lcall	_printf
      000169 E5 81            [12] 1494 	mov	a,sp
      00016B 24 FB            [12] 1495 	add	a,#0xfb
      00016D F5 81            [12] 1496 	mov	sp,a
                           00016F  1497 	C$lab3_1.c$153$1$63 ==.
                                   1498 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:153: PCA0CPL0 = 0xFFFF - SERVO_PW;
      00016F AF*06            [24] 1499 	mov	r7,_SERVO_PW
      000171 74 FF            [12] 1500 	mov	a,#0xff
      000173 C3               [12] 1501 	clr	c
      000174 9F               [12] 1502 	subb	a,r7
      000175 F5 EA            [12] 1503 	mov	_PCA0CPL0,a
                           000177  1504 	C$lab3_1.c$154$1$63 ==.
                                   1505 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\lab3-1.c:154: PCA0CPH0 = (0xFFFF - SERVO_PW) >> 8;
      000177 74 FF            [12] 1506 	mov	a,#0xff
      000179 C3               [12] 1507 	clr	c
      00017A 95*06            [12] 1508 	subb	a,_SERVO_PW
      00017C 74 FF            [12] 1509 	mov	a,#0xff
      00017E 95*07            [12] 1510 	subb	a,(_SERVO_PW + 1)
      000180 FF               [12] 1511 	mov	r7,a
      000181 8F FA            [24] 1512 	mov	_PCA0CPH0,r7
                           000183  1513 	C$lab3_1.c$155$1$63 ==.
                           000183  1514 	XG$Steering_Servo$0$0 ==.
      000183 22               [24] 1515 	ret
                                   1516 	.area CSEG    (CODE)
                                   1517 	.area CONST   (CODE)
                           000000  1518 Flab3_1$__str_0$0$0 == .
      000000                       1519 ___str_0:
      000000 45 6D 62 65 64 64 65  1520 	.ascii "Embedded Control Pulsewidth Calibration"
             64 20 43 6F 6E 74 72
             6F 6C 20 50 75 6C 73
             65 77 69 64 74 68 20
             43 61 6C 69 62 72 61
             74 69 6F 6E
      000027 0A                    1521 	.db 0x0a
      000028 00                    1522 	.db 0x00
                           000029  1523 Flab3_1$__str_1$0$0 == .
      000029                       1524 ___str_1:
      000029 53 45 52 56 4F 5F 50  1525 	.ascii "SERVO_PW: %u"
             57 3A 20 25 75
      000035 0A                    1526 	.db 0x0a
      000036 00                    1527 	.db 0x00
                                   1528 	.area XINIT   (CODE)
                                   1529 	.area CABS    (ABS,CODE)
