                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module Lab3_1_SteeringCalibration
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 	.globl _printf
                                     15 	.globl _getchar_nw
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _SPIF
                                     20 	.globl _WCOL
                                     21 	.globl _MODF
                                     22 	.globl _RXOVRN
                                     23 	.globl _TXBSY
                                     24 	.globl _SLVSEL
                                     25 	.globl _MSTEN
                                     26 	.globl _SPIEN
                                     27 	.globl _AD0EN
                                     28 	.globl _ADCEN
                                     29 	.globl _AD0TM
                                     30 	.globl _ADCTM
                                     31 	.globl _AD0INT
                                     32 	.globl _ADCINT
                                     33 	.globl _AD0BUSY
                                     34 	.globl _ADBUSY
                                     35 	.globl _AD0CM1
                                     36 	.globl _ADSTM1
                                     37 	.globl _AD0CM0
                                     38 	.globl _ADSTM0
                                     39 	.globl _AD0WINT
                                     40 	.globl _ADWINT
                                     41 	.globl _AD0LJST
                                     42 	.globl _ADLJST
                                     43 	.globl _CF
                                     44 	.globl _CR
                                     45 	.globl _CCF4
                                     46 	.globl _CCF3
                                     47 	.globl _CCF2
                                     48 	.globl _CCF1
                                     49 	.globl _CCF0
                                     50 	.globl _CY
                                     51 	.globl _AC
                                     52 	.globl _F0
                                     53 	.globl _RS1
                                     54 	.globl _RS0
                                     55 	.globl _OV
                                     56 	.globl _F1
                                     57 	.globl _P
                                     58 	.globl _TF2
                                     59 	.globl _EXF2
                                     60 	.globl _RCLK
                                     61 	.globl _TCLK
                                     62 	.globl _EXEN2
                                     63 	.globl _TR2
                                     64 	.globl _CT2
                                     65 	.globl _CPRL2
                                     66 	.globl _BUSY
                                     67 	.globl _ENSMB
                                     68 	.globl _STA
                                     69 	.globl _STO
                                     70 	.globl _SI
                                     71 	.globl _AA
                                     72 	.globl _SMBFTE
                                     73 	.globl _SMBTOE
                                     74 	.globl _PT2
                                     75 	.globl _PS
                                     76 	.globl _PS0
                                     77 	.globl _PT1
                                     78 	.globl _PX1
                                     79 	.globl _PT0
                                     80 	.globl _PX0
                                     81 	.globl _P3_7
                                     82 	.globl _P3_6
                                     83 	.globl _P3_5
                                     84 	.globl _P3_4
                                     85 	.globl _P3_3
                                     86 	.globl _P3_2
                                     87 	.globl _P3_1
                                     88 	.globl _P3_0
                                     89 	.globl _EA
                                     90 	.globl _ET2
                                     91 	.globl _ES
                                     92 	.globl _ES0
                                     93 	.globl _ET1
                                     94 	.globl _EX1
                                     95 	.globl _ET0
                                     96 	.globl _EX0
                                     97 	.globl _P2_7
                                     98 	.globl _P2_6
                                     99 	.globl _P2_5
                                    100 	.globl _P2_4
                                    101 	.globl _P2_3
                                    102 	.globl _P2_2
                                    103 	.globl _P2_1
                                    104 	.globl _P2_0
                                    105 	.globl _S0MODE
                                    106 	.globl _SM00
                                    107 	.globl _SM0
                                    108 	.globl _SM10
                                    109 	.globl _SM1
                                    110 	.globl _MCE0
                                    111 	.globl _SM20
                                    112 	.globl _SM2
                                    113 	.globl _REN0
                                    114 	.globl _REN
                                    115 	.globl _TB80
                                    116 	.globl _TB8
                                    117 	.globl _RB80
                                    118 	.globl _RB8
                                    119 	.globl _TI0
                                    120 	.globl _TI
                                    121 	.globl _RI0
                                    122 	.globl _RI
                                    123 	.globl _P1_7
                                    124 	.globl _P1_6
                                    125 	.globl _P1_5
                                    126 	.globl _P1_4
                                    127 	.globl _P1_3
                                    128 	.globl _P1_2
                                    129 	.globl _P1_1
                                    130 	.globl _P1_0
                                    131 	.globl _TF1
                                    132 	.globl _TR1
                                    133 	.globl _TF0
                                    134 	.globl _TR0
                                    135 	.globl _IE1
                                    136 	.globl _IT1
                                    137 	.globl _IE0
                                    138 	.globl _IT0
                                    139 	.globl _P0_7
                                    140 	.globl _P0_6
                                    141 	.globl _P0_5
                                    142 	.globl _P0_4
                                    143 	.globl _P0_3
                                    144 	.globl _P0_2
                                    145 	.globl _P0_1
                                    146 	.globl _P0_0
                                    147 	.globl _PCA0CP4
                                    148 	.globl _PCA0CP3
                                    149 	.globl _PCA0CP2
                                    150 	.globl _PCA0CP1
                                    151 	.globl _PCA0CP0
                                    152 	.globl _PCA0
                                    153 	.globl _DAC1
                                    154 	.globl _DAC0
                                    155 	.globl _ADC0LT
                                    156 	.globl _ADC0GT
                                    157 	.globl _ADC0
                                    158 	.globl _RCAP4
                                    159 	.globl _TMR4
                                    160 	.globl _TMR3RL
                                    161 	.globl _TMR3
                                    162 	.globl _RCAP2
                                    163 	.globl _TMR2
                                    164 	.globl _TMR1
                                    165 	.globl _TMR0
                                    166 	.globl _WDTCN
                                    167 	.globl _PCA0CPH4
                                    168 	.globl _PCA0CPH3
                                    169 	.globl _PCA0CPH2
                                    170 	.globl _PCA0CPH1
                                    171 	.globl _PCA0CPH0
                                    172 	.globl _PCA0H
                                    173 	.globl _SPI0CN
                                    174 	.globl _EIP2
                                    175 	.globl _EIP1
                                    176 	.globl _TH4
                                    177 	.globl _TL4
                                    178 	.globl _SADDR1
                                    179 	.globl _SBUF1
                                    180 	.globl _SCON1
                                    181 	.globl _B
                                    182 	.globl _RSTSRC
                                    183 	.globl _PCA0CPL4
                                    184 	.globl _PCA0CPL3
                                    185 	.globl _PCA0CPL2
                                    186 	.globl _PCA0CPL1
                                    187 	.globl _PCA0CPL0
                                    188 	.globl _PCA0L
                                    189 	.globl _ADC0CN
                                    190 	.globl _EIE2
                                    191 	.globl _EIE1
                                    192 	.globl _RCAP4H
                                    193 	.globl _RCAP4L
                                    194 	.globl _XBR2
                                    195 	.globl _XBR1
                                    196 	.globl _XBR0
                                    197 	.globl _ACC
                                    198 	.globl _PCA0CPM4
                                    199 	.globl _PCA0CPM3
                                    200 	.globl _PCA0CPM2
                                    201 	.globl _PCA0CPM1
                                    202 	.globl _PCA0CPM0
                                    203 	.globl _PCA0MD
                                    204 	.globl _PCA0CN
                                    205 	.globl _DAC1CN
                                    206 	.globl _DAC1H
                                    207 	.globl _DAC1L
                                    208 	.globl _DAC0CN
                                    209 	.globl _DAC0H
                                    210 	.globl _DAC0L
                                    211 	.globl _REF0CN
                                    212 	.globl _PSW
                                    213 	.globl _SMB0CR
                                    214 	.globl _TH2
                                    215 	.globl _TL2
                                    216 	.globl _RCAP2H
                                    217 	.globl _RCAP2L
                                    218 	.globl _T4CON
                                    219 	.globl _T2CON
                                    220 	.globl _ADC0LTH
                                    221 	.globl _ADC0LTL
                                    222 	.globl _ADC0GTH
                                    223 	.globl _ADC0GTL
                                    224 	.globl _SMB0ADR
                                    225 	.globl _SMB0DAT
                                    226 	.globl _SMB0STA
                                    227 	.globl _SMB0CN
                                    228 	.globl _ADC0H
                                    229 	.globl _ADC0L
                                    230 	.globl _P1MDIN
                                    231 	.globl _ADC0CF
                                    232 	.globl _AMX0SL
                                    233 	.globl _AMX0CF
                                    234 	.globl _SADEN0
                                    235 	.globl _IP
                                    236 	.globl _FLACL
                                    237 	.globl _FLSCL
                                    238 	.globl _P74OUT
                                    239 	.globl _OSCICN
                                    240 	.globl _OSCXCN
                                    241 	.globl _P3
                                    242 	.globl __XPAGE
                                    243 	.globl _EMI0CN
                                    244 	.globl _SADEN1
                                    245 	.globl _P3IF
                                    246 	.globl _AMX1SL
                                    247 	.globl _ADC1CF
                                    248 	.globl _ADC1CN
                                    249 	.globl _SADDR0
                                    250 	.globl _IE
                                    251 	.globl _P3MDOUT
                                    252 	.globl _PRT3CF
                                    253 	.globl _P2MDOUT
                                    254 	.globl _PRT2CF
                                    255 	.globl _P1MDOUT
                                    256 	.globl _PRT1CF
                                    257 	.globl _P0MDOUT
                                    258 	.globl _PRT0CF
                                    259 	.globl _EMI0CF
                                    260 	.globl _EMI0TC
                                    261 	.globl _P2
                                    262 	.globl _CPT1CN
                                    263 	.globl _CPT0CN
                                    264 	.globl _SPI0CKR
                                    265 	.globl _ADC1
                                    266 	.globl _SPI0DAT
                                    267 	.globl _SPI0CFG
                                    268 	.globl _SBUF0
                                    269 	.globl _SBUF
                                    270 	.globl _SCON0
                                    271 	.globl _SCON
                                    272 	.globl _P7
                                    273 	.globl _TMR3H
                                    274 	.globl _TMR3L
                                    275 	.globl _TMR3RLH
                                    276 	.globl _TMR3RLL
                                    277 	.globl _TMR3CN
                                    278 	.globl _P1
                                    279 	.globl _PSCTL
                                    280 	.globl _CKCON
                                    281 	.globl _TH1
                                    282 	.globl _TH0
                                    283 	.globl _TL1
                                    284 	.globl _TL0
                                    285 	.globl _TMOD
                                    286 	.globl _TCON
                                    287 	.globl _PCON
                                    288 	.globl _P6
                                    289 	.globl _P5
                                    290 	.globl _P4
                                    291 	.globl _DPH
                                    292 	.globl _DPL
                                    293 	.globl _SP
                                    294 	.globl _P0
                                    295 	.globl _aligned_alloc_PARM_2
                                    296 	.globl _SERVO_PW
                                    297 	.globl _PW_LEFT
                                    298 	.globl _PW_RIGHT
                                    299 	.globl _PW_CENTER
                                    300 	.globl _Port_Init
                                    301 	.globl _XBR0_Init
                                    302 	.globl _PCA_Init
                                    303 	.globl _PCA_ISR
                                    304 	.globl _Steering_Servo
                                    305 	.globl _Turn
                                    306 	.globl _CalibrateSteering
                                    307 ;--------------------------------------------------------
                                    308 ; special function registers
                                    309 ;--------------------------------------------------------
                                    310 	.area RSEG    (ABS,DATA)
      000000                        311 	.org 0x0000
                           000080   312 G$P0$0$0 == 0x0080
                           000080   313 _P0	=	0x0080
                           000081   314 G$SP$0$0 == 0x0081
                           000081   315 _SP	=	0x0081
                           000082   316 G$DPL$0$0 == 0x0082
                           000082   317 _DPL	=	0x0082
                           000083   318 G$DPH$0$0 == 0x0083
                           000083   319 _DPH	=	0x0083
                           000084   320 G$P4$0$0 == 0x0084
                           000084   321 _P4	=	0x0084
                           000085   322 G$P5$0$0 == 0x0085
                           000085   323 _P5	=	0x0085
                           000086   324 G$P6$0$0 == 0x0086
                           000086   325 _P6	=	0x0086
                           000087   326 G$PCON$0$0 == 0x0087
                           000087   327 _PCON	=	0x0087
                           000088   328 G$TCON$0$0 == 0x0088
                           000088   329 _TCON	=	0x0088
                           000089   330 G$TMOD$0$0 == 0x0089
                           000089   331 _TMOD	=	0x0089
                           00008A   332 G$TL0$0$0 == 0x008a
                           00008A   333 _TL0	=	0x008a
                           00008B   334 G$TL1$0$0 == 0x008b
                           00008B   335 _TL1	=	0x008b
                           00008C   336 G$TH0$0$0 == 0x008c
                           00008C   337 _TH0	=	0x008c
                           00008D   338 G$TH1$0$0 == 0x008d
                           00008D   339 _TH1	=	0x008d
                           00008E   340 G$CKCON$0$0 == 0x008e
                           00008E   341 _CKCON	=	0x008e
                           00008F   342 G$PSCTL$0$0 == 0x008f
                           00008F   343 _PSCTL	=	0x008f
                           000090   344 G$P1$0$0 == 0x0090
                           000090   345 _P1	=	0x0090
                           000091   346 G$TMR3CN$0$0 == 0x0091
                           000091   347 _TMR3CN	=	0x0091
                           000092   348 G$TMR3RLL$0$0 == 0x0092
                           000092   349 _TMR3RLL	=	0x0092
                           000093   350 G$TMR3RLH$0$0 == 0x0093
                           000093   351 _TMR3RLH	=	0x0093
                           000094   352 G$TMR3L$0$0 == 0x0094
                           000094   353 _TMR3L	=	0x0094
                           000095   354 G$TMR3H$0$0 == 0x0095
                           000095   355 _TMR3H	=	0x0095
                           000096   356 G$P7$0$0 == 0x0096
                           000096   357 _P7	=	0x0096
                           000098   358 G$SCON$0$0 == 0x0098
                           000098   359 _SCON	=	0x0098
                           000098   360 G$SCON0$0$0 == 0x0098
                           000098   361 _SCON0	=	0x0098
                           000099   362 G$SBUF$0$0 == 0x0099
                           000099   363 _SBUF	=	0x0099
                           000099   364 G$SBUF0$0$0 == 0x0099
                           000099   365 _SBUF0	=	0x0099
                           00009A   366 G$SPI0CFG$0$0 == 0x009a
                           00009A   367 _SPI0CFG	=	0x009a
                           00009B   368 G$SPI0DAT$0$0 == 0x009b
                           00009B   369 _SPI0DAT	=	0x009b
                           00009C   370 G$ADC1$0$0 == 0x009c
                           00009C   371 _ADC1	=	0x009c
                           00009D   372 G$SPI0CKR$0$0 == 0x009d
                           00009D   373 _SPI0CKR	=	0x009d
                           00009E   374 G$CPT0CN$0$0 == 0x009e
                           00009E   375 _CPT0CN	=	0x009e
                           00009F   376 G$CPT1CN$0$0 == 0x009f
                           00009F   377 _CPT1CN	=	0x009f
                           0000A0   378 G$P2$0$0 == 0x00a0
                           0000A0   379 _P2	=	0x00a0
                           0000A1   380 G$EMI0TC$0$0 == 0x00a1
                           0000A1   381 _EMI0TC	=	0x00a1
                           0000A3   382 G$EMI0CF$0$0 == 0x00a3
                           0000A3   383 _EMI0CF	=	0x00a3
                           0000A4   384 G$PRT0CF$0$0 == 0x00a4
                           0000A4   385 _PRT0CF	=	0x00a4
                           0000A4   386 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   387 _P0MDOUT	=	0x00a4
                           0000A5   388 G$PRT1CF$0$0 == 0x00a5
                           0000A5   389 _PRT1CF	=	0x00a5
                           0000A5   390 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   391 _P1MDOUT	=	0x00a5
                           0000A6   392 G$PRT2CF$0$0 == 0x00a6
                           0000A6   393 _PRT2CF	=	0x00a6
                           0000A6   394 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   395 _P2MDOUT	=	0x00a6
                           0000A7   396 G$PRT3CF$0$0 == 0x00a7
                           0000A7   397 _PRT3CF	=	0x00a7
                           0000A7   398 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   399 _P3MDOUT	=	0x00a7
                           0000A8   400 G$IE$0$0 == 0x00a8
                           0000A8   401 _IE	=	0x00a8
                           0000A9   402 G$SADDR0$0$0 == 0x00a9
                           0000A9   403 _SADDR0	=	0x00a9
                           0000AA   404 G$ADC1CN$0$0 == 0x00aa
                           0000AA   405 _ADC1CN	=	0x00aa
                           0000AB   406 G$ADC1CF$0$0 == 0x00ab
                           0000AB   407 _ADC1CF	=	0x00ab
                           0000AC   408 G$AMX1SL$0$0 == 0x00ac
                           0000AC   409 _AMX1SL	=	0x00ac
                           0000AD   410 G$P3IF$0$0 == 0x00ad
                           0000AD   411 _P3IF	=	0x00ad
                           0000AE   412 G$SADEN1$0$0 == 0x00ae
                           0000AE   413 _SADEN1	=	0x00ae
                           0000AF   414 G$EMI0CN$0$0 == 0x00af
                           0000AF   415 _EMI0CN	=	0x00af
                           0000AF   416 G$_XPAGE$0$0 == 0x00af
                           0000AF   417 __XPAGE	=	0x00af
                           0000B0   418 G$P3$0$0 == 0x00b0
                           0000B0   419 _P3	=	0x00b0
                           0000B1   420 G$OSCXCN$0$0 == 0x00b1
                           0000B1   421 _OSCXCN	=	0x00b1
                           0000B2   422 G$OSCICN$0$0 == 0x00b2
                           0000B2   423 _OSCICN	=	0x00b2
                           0000B5   424 G$P74OUT$0$0 == 0x00b5
                           0000B5   425 _P74OUT	=	0x00b5
                           0000B6   426 G$FLSCL$0$0 == 0x00b6
                           0000B6   427 _FLSCL	=	0x00b6
                           0000B7   428 G$FLACL$0$0 == 0x00b7
                           0000B7   429 _FLACL	=	0x00b7
                           0000B8   430 G$IP$0$0 == 0x00b8
                           0000B8   431 _IP	=	0x00b8
                           0000B9   432 G$SADEN0$0$0 == 0x00b9
                           0000B9   433 _SADEN0	=	0x00b9
                           0000BA   434 G$AMX0CF$0$0 == 0x00ba
                           0000BA   435 _AMX0CF	=	0x00ba
                           0000BB   436 G$AMX0SL$0$0 == 0x00bb
                           0000BB   437 _AMX0SL	=	0x00bb
                           0000BC   438 G$ADC0CF$0$0 == 0x00bc
                           0000BC   439 _ADC0CF	=	0x00bc
                           0000BD   440 G$P1MDIN$0$0 == 0x00bd
                           0000BD   441 _P1MDIN	=	0x00bd
                           0000BE   442 G$ADC0L$0$0 == 0x00be
                           0000BE   443 _ADC0L	=	0x00be
                           0000BF   444 G$ADC0H$0$0 == 0x00bf
                           0000BF   445 _ADC0H	=	0x00bf
                           0000C0   446 G$SMB0CN$0$0 == 0x00c0
                           0000C0   447 _SMB0CN	=	0x00c0
                           0000C1   448 G$SMB0STA$0$0 == 0x00c1
                           0000C1   449 _SMB0STA	=	0x00c1
                           0000C2   450 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   451 _SMB0DAT	=	0x00c2
                           0000C3   452 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   453 _SMB0ADR	=	0x00c3
                           0000C4   454 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   455 _ADC0GTL	=	0x00c4
                           0000C5   456 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   457 _ADC0GTH	=	0x00c5
                           0000C6   458 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   459 _ADC0LTL	=	0x00c6
                           0000C7   460 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   461 _ADC0LTH	=	0x00c7
                           0000C8   462 G$T2CON$0$0 == 0x00c8
                           0000C8   463 _T2CON	=	0x00c8
                           0000C9   464 G$T4CON$0$0 == 0x00c9
                           0000C9   465 _T4CON	=	0x00c9
                           0000CA   466 G$RCAP2L$0$0 == 0x00ca
                           0000CA   467 _RCAP2L	=	0x00ca
                           0000CB   468 G$RCAP2H$0$0 == 0x00cb
                           0000CB   469 _RCAP2H	=	0x00cb
                           0000CC   470 G$TL2$0$0 == 0x00cc
                           0000CC   471 _TL2	=	0x00cc
                           0000CD   472 G$TH2$0$0 == 0x00cd
                           0000CD   473 _TH2	=	0x00cd
                           0000CF   474 G$SMB0CR$0$0 == 0x00cf
                           0000CF   475 _SMB0CR	=	0x00cf
                           0000D0   476 G$PSW$0$0 == 0x00d0
                           0000D0   477 _PSW	=	0x00d0
                           0000D1   478 G$REF0CN$0$0 == 0x00d1
                           0000D1   479 _REF0CN	=	0x00d1
                           0000D2   480 G$DAC0L$0$0 == 0x00d2
                           0000D2   481 _DAC0L	=	0x00d2
                           0000D3   482 G$DAC0H$0$0 == 0x00d3
                           0000D3   483 _DAC0H	=	0x00d3
                           0000D4   484 G$DAC0CN$0$0 == 0x00d4
                           0000D4   485 _DAC0CN	=	0x00d4
                           0000D5   486 G$DAC1L$0$0 == 0x00d5
                           0000D5   487 _DAC1L	=	0x00d5
                           0000D6   488 G$DAC1H$0$0 == 0x00d6
                           0000D6   489 _DAC1H	=	0x00d6
                           0000D7   490 G$DAC1CN$0$0 == 0x00d7
                           0000D7   491 _DAC1CN	=	0x00d7
                           0000D8   492 G$PCA0CN$0$0 == 0x00d8
                           0000D8   493 _PCA0CN	=	0x00d8
                           0000D9   494 G$PCA0MD$0$0 == 0x00d9
                           0000D9   495 _PCA0MD	=	0x00d9
                           0000DA   496 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   497 _PCA0CPM0	=	0x00da
                           0000DB   498 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   499 _PCA0CPM1	=	0x00db
                           0000DC   500 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   501 _PCA0CPM2	=	0x00dc
                           0000DD   502 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   503 _PCA0CPM3	=	0x00dd
                           0000DE   504 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   505 _PCA0CPM4	=	0x00de
                           0000E0   506 G$ACC$0$0 == 0x00e0
                           0000E0   507 _ACC	=	0x00e0
                           0000E1   508 G$XBR0$0$0 == 0x00e1
                           0000E1   509 _XBR0	=	0x00e1
                           0000E2   510 G$XBR1$0$0 == 0x00e2
                           0000E2   511 _XBR1	=	0x00e2
                           0000E3   512 G$XBR2$0$0 == 0x00e3
                           0000E3   513 _XBR2	=	0x00e3
                           0000E4   514 G$RCAP4L$0$0 == 0x00e4
                           0000E4   515 _RCAP4L	=	0x00e4
                           0000E5   516 G$RCAP4H$0$0 == 0x00e5
                           0000E5   517 _RCAP4H	=	0x00e5
                           0000E6   518 G$EIE1$0$0 == 0x00e6
                           0000E6   519 _EIE1	=	0x00e6
                           0000E7   520 G$EIE2$0$0 == 0x00e7
                           0000E7   521 _EIE2	=	0x00e7
                           0000E8   522 G$ADC0CN$0$0 == 0x00e8
                           0000E8   523 _ADC0CN	=	0x00e8
                           0000E9   524 G$PCA0L$0$0 == 0x00e9
                           0000E9   525 _PCA0L	=	0x00e9
                           0000EA   526 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   527 _PCA0CPL0	=	0x00ea
                           0000EB   528 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   529 _PCA0CPL1	=	0x00eb
                           0000EC   530 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   531 _PCA0CPL2	=	0x00ec
                           0000ED   532 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   533 _PCA0CPL3	=	0x00ed
                           0000EE   534 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   535 _PCA0CPL4	=	0x00ee
                           0000EF   536 G$RSTSRC$0$0 == 0x00ef
                           0000EF   537 _RSTSRC	=	0x00ef
                           0000F0   538 G$B$0$0 == 0x00f0
                           0000F0   539 _B	=	0x00f0
                           0000F1   540 G$SCON1$0$0 == 0x00f1
                           0000F1   541 _SCON1	=	0x00f1
                           0000F2   542 G$SBUF1$0$0 == 0x00f2
                           0000F2   543 _SBUF1	=	0x00f2
                           0000F3   544 G$SADDR1$0$0 == 0x00f3
                           0000F3   545 _SADDR1	=	0x00f3
                           0000F4   546 G$TL4$0$0 == 0x00f4
                           0000F4   547 _TL4	=	0x00f4
                           0000F5   548 G$TH4$0$0 == 0x00f5
                           0000F5   549 _TH4	=	0x00f5
                           0000F6   550 G$EIP1$0$0 == 0x00f6
                           0000F6   551 _EIP1	=	0x00f6
                           0000F7   552 G$EIP2$0$0 == 0x00f7
                           0000F7   553 _EIP2	=	0x00f7
                           0000F8   554 G$SPI0CN$0$0 == 0x00f8
                           0000F8   555 _SPI0CN	=	0x00f8
                           0000F9   556 G$PCA0H$0$0 == 0x00f9
                           0000F9   557 _PCA0H	=	0x00f9
                           0000FA   558 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   559 _PCA0CPH0	=	0x00fa
                           0000FB   560 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   561 _PCA0CPH1	=	0x00fb
                           0000FC   562 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   563 _PCA0CPH2	=	0x00fc
                           0000FD   564 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   565 _PCA0CPH3	=	0x00fd
                           0000FE   566 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   567 _PCA0CPH4	=	0x00fe
                           0000FF   568 G$WDTCN$0$0 == 0x00ff
                           0000FF   569 _WDTCN	=	0x00ff
                           008C8A   570 G$TMR0$0$0 == 0x8c8a
                           008C8A   571 _TMR0	=	0x8c8a
                           008D8B   572 G$TMR1$0$0 == 0x8d8b
                           008D8B   573 _TMR1	=	0x8d8b
                           00CDCC   574 G$TMR2$0$0 == 0xcdcc
                           00CDCC   575 _TMR2	=	0xcdcc
                           00CBCA   576 G$RCAP2$0$0 == 0xcbca
                           00CBCA   577 _RCAP2	=	0xcbca
                           009594   578 G$TMR3$0$0 == 0x9594
                           009594   579 _TMR3	=	0x9594
                           009392   580 G$TMR3RL$0$0 == 0x9392
                           009392   581 _TMR3RL	=	0x9392
                           00F5F4   582 G$TMR4$0$0 == 0xf5f4
                           00F5F4   583 _TMR4	=	0xf5f4
                           00E5E4   584 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   585 _RCAP4	=	0xe5e4
                           00BFBE   586 G$ADC0$0$0 == 0xbfbe
                           00BFBE   587 _ADC0	=	0xbfbe
                           00C5C4   588 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   589 _ADC0GT	=	0xc5c4
                           00C7C6   590 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   591 _ADC0LT	=	0xc7c6
                           00D3D2   592 G$DAC0$0$0 == 0xd3d2
                           00D3D2   593 _DAC0	=	0xd3d2
                           00D6D5   594 G$DAC1$0$0 == 0xd6d5
                           00D6D5   595 _DAC1	=	0xd6d5
                           00F9E9   596 G$PCA0$0$0 == 0xf9e9
                           00F9E9   597 _PCA0	=	0xf9e9
                           00FAEA   598 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   599 _PCA0CP0	=	0xfaea
                           00FBEB   600 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   601 _PCA0CP1	=	0xfbeb
                           00FCEC   602 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   603 _PCA0CP2	=	0xfcec
                           00FDED   604 G$PCA0CP3$0$0 == 0xfded
                           00FDED   605 _PCA0CP3	=	0xfded
                           00FEEE   606 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   607 _PCA0CP4	=	0xfeee
                                    608 ;--------------------------------------------------------
                                    609 ; special function bits
                                    610 ;--------------------------------------------------------
                                    611 	.area RSEG    (ABS,DATA)
      000000                        612 	.org 0x0000
                           000080   613 G$P0_0$0$0 == 0x0080
                           000080   614 _P0_0	=	0x0080
                           000081   615 G$P0_1$0$0 == 0x0081
                           000081   616 _P0_1	=	0x0081
                           000082   617 G$P0_2$0$0 == 0x0082
                           000082   618 _P0_2	=	0x0082
                           000083   619 G$P0_3$0$0 == 0x0083
                           000083   620 _P0_3	=	0x0083
                           000084   621 G$P0_4$0$0 == 0x0084
                           000084   622 _P0_4	=	0x0084
                           000085   623 G$P0_5$0$0 == 0x0085
                           000085   624 _P0_5	=	0x0085
                           000086   625 G$P0_6$0$0 == 0x0086
                           000086   626 _P0_6	=	0x0086
                           000087   627 G$P0_7$0$0 == 0x0087
                           000087   628 _P0_7	=	0x0087
                           000088   629 G$IT0$0$0 == 0x0088
                           000088   630 _IT0	=	0x0088
                           000089   631 G$IE0$0$0 == 0x0089
                           000089   632 _IE0	=	0x0089
                           00008A   633 G$IT1$0$0 == 0x008a
                           00008A   634 _IT1	=	0x008a
                           00008B   635 G$IE1$0$0 == 0x008b
                           00008B   636 _IE1	=	0x008b
                           00008C   637 G$TR0$0$0 == 0x008c
                           00008C   638 _TR0	=	0x008c
                           00008D   639 G$TF0$0$0 == 0x008d
                           00008D   640 _TF0	=	0x008d
                           00008E   641 G$TR1$0$0 == 0x008e
                           00008E   642 _TR1	=	0x008e
                           00008F   643 G$TF1$0$0 == 0x008f
                           00008F   644 _TF1	=	0x008f
                           000090   645 G$P1_0$0$0 == 0x0090
                           000090   646 _P1_0	=	0x0090
                           000091   647 G$P1_1$0$0 == 0x0091
                           000091   648 _P1_1	=	0x0091
                           000092   649 G$P1_2$0$0 == 0x0092
                           000092   650 _P1_2	=	0x0092
                           000093   651 G$P1_3$0$0 == 0x0093
                           000093   652 _P1_3	=	0x0093
                           000094   653 G$P1_4$0$0 == 0x0094
                           000094   654 _P1_4	=	0x0094
                           000095   655 G$P1_5$0$0 == 0x0095
                           000095   656 _P1_5	=	0x0095
                           000096   657 G$P1_6$0$0 == 0x0096
                           000096   658 _P1_6	=	0x0096
                           000097   659 G$P1_7$0$0 == 0x0097
                           000097   660 _P1_7	=	0x0097
                           000098   661 G$RI$0$0 == 0x0098
                           000098   662 _RI	=	0x0098
                           000098   663 G$RI0$0$0 == 0x0098
                           000098   664 _RI0	=	0x0098
                           000099   665 G$TI$0$0 == 0x0099
                           000099   666 _TI	=	0x0099
                           000099   667 G$TI0$0$0 == 0x0099
                           000099   668 _TI0	=	0x0099
                           00009A   669 G$RB8$0$0 == 0x009a
                           00009A   670 _RB8	=	0x009a
                           00009A   671 G$RB80$0$0 == 0x009a
                           00009A   672 _RB80	=	0x009a
                           00009B   673 G$TB8$0$0 == 0x009b
                           00009B   674 _TB8	=	0x009b
                           00009B   675 G$TB80$0$0 == 0x009b
                           00009B   676 _TB80	=	0x009b
                           00009C   677 G$REN$0$0 == 0x009c
                           00009C   678 _REN	=	0x009c
                           00009C   679 G$REN0$0$0 == 0x009c
                           00009C   680 _REN0	=	0x009c
                           00009D   681 G$SM2$0$0 == 0x009d
                           00009D   682 _SM2	=	0x009d
                           00009D   683 G$SM20$0$0 == 0x009d
                           00009D   684 _SM20	=	0x009d
                           00009D   685 G$MCE0$0$0 == 0x009d
                           00009D   686 _MCE0	=	0x009d
                           00009E   687 G$SM1$0$0 == 0x009e
                           00009E   688 _SM1	=	0x009e
                           00009E   689 G$SM10$0$0 == 0x009e
                           00009E   690 _SM10	=	0x009e
                           00009F   691 G$SM0$0$0 == 0x009f
                           00009F   692 _SM0	=	0x009f
                           00009F   693 G$SM00$0$0 == 0x009f
                           00009F   694 _SM00	=	0x009f
                           00009F   695 G$S0MODE$0$0 == 0x009f
                           00009F   696 _S0MODE	=	0x009f
                           0000A0   697 G$P2_0$0$0 == 0x00a0
                           0000A0   698 _P2_0	=	0x00a0
                           0000A1   699 G$P2_1$0$0 == 0x00a1
                           0000A1   700 _P2_1	=	0x00a1
                           0000A2   701 G$P2_2$0$0 == 0x00a2
                           0000A2   702 _P2_2	=	0x00a2
                           0000A3   703 G$P2_3$0$0 == 0x00a3
                           0000A3   704 _P2_3	=	0x00a3
                           0000A4   705 G$P2_4$0$0 == 0x00a4
                           0000A4   706 _P2_4	=	0x00a4
                           0000A5   707 G$P2_5$0$0 == 0x00a5
                           0000A5   708 _P2_5	=	0x00a5
                           0000A6   709 G$P2_6$0$0 == 0x00a6
                           0000A6   710 _P2_6	=	0x00a6
                           0000A7   711 G$P2_7$0$0 == 0x00a7
                           0000A7   712 _P2_7	=	0x00a7
                           0000A8   713 G$EX0$0$0 == 0x00a8
                           0000A8   714 _EX0	=	0x00a8
                           0000A9   715 G$ET0$0$0 == 0x00a9
                           0000A9   716 _ET0	=	0x00a9
                           0000AA   717 G$EX1$0$0 == 0x00aa
                           0000AA   718 _EX1	=	0x00aa
                           0000AB   719 G$ET1$0$0 == 0x00ab
                           0000AB   720 _ET1	=	0x00ab
                           0000AC   721 G$ES0$0$0 == 0x00ac
                           0000AC   722 _ES0	=	0x00ac
                           0000AC   723 G$ES$0$0 == 0x00ac
                           0000AC   724 _ES	=	0x00ac
                           0000AD   725 G$ET2$0$0 == 0x00ad
                           0000AD   726 _ET2	=	0x00ad
                           0000AF   727 G$EA$0$0 == 0x00af
                           0000AF   728 _EA	=	0x00af
                           0000B0   729 G$P3_0$0$0 == 0x00b0
                           0000B0   730 _P3_0	=	0x00b0
                           0000B1   731 G$P3_1$0$0 == 0x00b1
                           0000B1   732 _P3_1	=	0x00b1
                           0000B2   733 G$P3_2$0$0 == 0x00b2
                           0000B2   734 _P3_2	=	0x00b2
                           0000B3   735 G$P3_3$0$0 == 0x00b3
                           0000B3   736 _P3_3	=	0x00b3
                           0000B4   737 G$P3_4$0$0 == 0x00b4
                           0000B4   738 _P3_4	=	0x00b4
                           0000B5   739 G$P3_5$0$0 == 0x00b5
                           0000B5   740 _P3_5	=	0x00b5
                           0000B6   741 G$P3_6$0$0 == 0x00b6
                           0000B6   742 _P3_6	=	0x00b6
                           0000B7   743 G$P3_7$0$0 == 0x00b7
                           0000B7   744 _P3_7	=	0x00b7
                           0000B8   745 G$PX0$0$0 == 0x00b8
                           0000B8   746 _PX0	=	0x00b8
                           0000B9   747 G$PT0$0$0 == 0x00b9
                           0000B9   748 _PT0	=	0x00b9
                           0000BA   749 G$PX1$0$0 == 0x00ba
                           0000BA   750 _PX1	=	0x00ba
                           0000BB   751 G$PT1$0$0 == 0x00bb
                           0000BB   752 _PT1	=	0x00bb
                           0000BC   753 G$PS0$0$0 == 0x00bc
                           0000BC   754 _PS0	=	0x00bc
                           0000BC   755 G$PS$0$0 == 0x00bc
                           0000BC   756 _PS	=	0x00bc
                           0000BD   757 G$PT2$0$0 == 0x00bd
                           0000BD   758 _PT2	=	0x00bd
                           0000C0   759 G$SMBTOE$0$0 == 0x00c0
                           0000C0   760 _SMBTOE	=	0x00c0
                           0000C1   761 G$SMBFTE$0$0 == 0x00c1
                           0000C1   762 _SMBFTE	=	0x00c1
                           0000C2   763 G$AA$0$0 == 0x00c2
                           0000C2   764 _AA	=	0x00c2
                           0000C3   765 G$SI$0$0 == 0x00c3
                           0000C3   766 _SI	=	0x00c3
                           0000C4   767 G$STO$0$0 == 0x00c4
                           0000C4   768 _STO	=	0x00c4
                           0000C5   769 G$STA$0$0 == 0x00c5
                           0000C5   770 _STA	=	0x00c5
                           0000C6   771 G$ENSMB$0$0 == 0x00c6
                           0000C6   772 _ENSMB	=	0x00c6
                           0000C7   773 G$BUSY$0$0 == 0x00c7
                           0000C7   774 _BUSY	=	0x00c7
                           0000C8   775 G$CPRL2$0$0 == 0x00c8
                           0000C8   776 _CPRL2	=	0x00c8
                           0000C9   777 G$CT2$0$0 == 0x00c9
                           0000C9   778 _CT2	=	0x00c9
                           0000CA   779 G$TR2$0$0 == 0x00ca
                           0000CA   780 _TR2	=	0x00ca
                           0000CB   781 G$EXEN2$0$0 == 0x00cb
                           0000CB   782 _EXEN2	=	0x00cb
                           0000CC   783 G$TCLK$0$0 == 0x00cc
                           0000CC   784 _TCLK	=	0x00cc
                           0000CD   785 G$RCLK$0$0 == 0x00cd
                           0000CD   786 _RCLK	=	0x00cd
                           0000CE   787 G$EXF2$0$0 == 0x00ce
                           0000CE   788 _EXF2	=	0x00ce
                           0000CF   789 G$TF2$0$0 == 0x00cf
                           0000CF   790 _TF2	=	0x00cf
                           0000D0   791 G$P$0$0 == 0x00d0
                           0000D0   792 _P	=	0x00d0
                           0000D1   793 G$F1$0$0 == 0x00d1
                           0000D1   794 _F1	=	0x00d1
                           0000D2   795 G$OV$0$0 == 0x00d2
                           0000D2   796 _OV	=	0x00d2
                           0000D3   797 G$RS0$0$0 == 0x00d3
                           0000D3   798 _RS0	=	0x00d3
                           0000D4   799 G$RS1$0$0 == 0x00d4
                           0000D4   800 _RS1	=	0x00d4
                           0000D5   801 G$F0$0$0 == 0x00d5
                           0000D5   802 _F0	=	0x00d5
                           0000D6   803 G$AC$0$0 == 0x00d6
                           0000D6   804 _AC	=	0x00d6
                           0000D7   805 G$CY$0$0 == 0x00d7
                           0000D7   806 _CY	=	0x00d7
                           0000D8   807 G$CCF0$0$0 == 0x00d8
                           0000D8   808 _CCF0	=	0x00d8
                           0000D9   809 G$CCF1$0$0 == 0x00d9
                           0000D9   810 _CCF1	=	0x00d9
                           0000DA   811 G$CCF2$0$0 == 0x00da
                           0000DA   812 _CCF2	=	0x00da
                           0000DB   813 G$CCF3$0$0 == 0x00db
                           0000DB   814 _CCF3	=	0x00db
                           0000DC   815 G$CCF4$0$0 == 0x00dc
                           0000DC   816 _CCF4	=	0x00dc
                           0000DE   817 G$CR$0$0 == 0x00de
                           0000DE   818 _CR	=	0x00de
                           0000DF   819 G$CF$0$0 == 0x00df
                           0000DF   820 _CF	=	0x00df
                           0000E8   821 G$ADLJST$0$0 == 0x00e8
                           0000E8   822 _ADLJST	=	0x00e8
                           0000E8   823 G$AD0LJST$0$0 == 0x00e8
                           0000E8   824 _AD0LJST	=	0x00e8
                           0000E9   825 G$ADWINT$0$0 == 0x00e9
                           0000E9   826 _ADWINT	=	0x00e9
                           0000E9   827 G$AD0WINT$0$0 == 0x00e9
                           0000E9   828 _AD0WINT	=	0x00e9
                           0000EA   829 G$ADSTM0$0$0 == 0x00ea
                           0000EA   830 _ADSTM0	=	0x00ea
                           0000EA   831 G$AD0CM0$0$0 == 0x00ea
                           0000EA   832 _AD0CM0	=	0x00ea
                           0000EB   833 G$ADSTM1$0$0 == 0x00eb
                           0000EB   834 _ADSTM1	=	0x00eb
                           0000EB   835 G$AD0CM1$0$0 == 0x00eb
                           0000EB   836 _AD0CM1	=	0x00eb
                           0000EC   837 G$ADBUSY$0$0 == 0x00ec
                           0000EC   838 _ADBUSY	=	0x00ec
                           0000EC   839 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   840 _AD0BUSY	=	0x00ec
                           0000ED   841 G$ADCINT$0$0 == 0x00ed
                           0000ED   842 _ADCINT	=	0x00ed
                           0000ED   843 G$AD0INT$0$0 == 0x00ed
                           0000ED   844 _AD0INT	=	0x00ed
                           0000EE   845 G$ADCTM$0$0 == 0x00ee
                           0000EE   846 _ADCTM	=	0x00ee
                           0000EE   847 G$AD0TM$0$0 == 0x00ee
                           0000EE   848 _AD0TM	=	0x00ee
                           0000EF   849 G$ADCEN$0$0 == 0x00ef
                           0000EF   850 _ADCEN	=	0x00ef
                           0000EF   851 G$AD0EN$0$0 == 0x00ef
                           0000EF   852 _AD0EN	=	0x00ef
                           0000F8   853 G$SPIEN$0$0 == 0x00f8
                           0000F8   854 _SPIEN	=	0x00f8
                           0000F9   855 G$MSTEN$0$0 == 0x00f9
                           0000F9   856 _MSTEN	=	0x00f9
                           0000FA   857 G$SLVSEL$0$0 == 0x00fa
                           0000FA   858 _SLVSEL	=	0x00fa
                           0000FB   859 G$TXBSY$0$0 == 0x00fb
                           0000FB   860 _TXBSY	=	0x00fb
                           0000FC   861 G$RXOVRN$0$0 == 0x00fc
                           0000FC   862 _RXOVRN	=	0x00fc
                           0000FD   863 G$MODF$0$0 == 0x00fd
                           0000FD   864 _MODF	=	0x00fd
                           0000FE   865 G$WCOL$0$0 == 0x00fe
                           0000FE   866 _WCOL	=	0x00fe
                           0000FF   867 G$SPIF$0$0 == 0x00ff
                           0000FF   868 _SPIF	=	0x00ff
                                    869 ;--------------------------------------------------------
                                    870 ; overlayable register banks
                                    871 ;--------------------------------------------------------
                                    872 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        873 	.ds 8
                                    874 ;--------------------------------------------------------
                                    875 ; internal ram data
                                    876 ;--------------------------------------------------------
                                    877 	.area DSEG    (DATA)
                           000000   878 G$PW_CENTER$0$0==.
      000000                        879 _PW_CENTER::
      000000                        880 	.ds 2
                           000002   881 G$PW_RIGHT$0$0==.
      000002                        882 _PW_RIGHT::
      000002                        883 	.ds 2
                           000004   884 G$PW_LEFT$0$0==.
      000004                        885 _PW_LEFT::
      000004                        886 	.ds 2
                           000006   887 G$SERVO_PW$0$0==.
      000006                        888 _SERVO_PW::
      000006                        889 	.ds 2
                           000008   890 LLab3_1_SteeringCalibration.aligned_alloc$size$1$39==.
      000008                        891 _aligned_alloc_PARM_2:
      000008                        892 	.ds 2
                                    893 ;--------------------------------------------------------
                                    894 ; overlayable items in internal ram 
                                    895 ;--------------------------------------------------------
                                    896 	.area	OSEG    (OVR,DATA)
                                    897 	.area	OSEG    (OVR,DATA)
                                    898 ;--------------------------------------------------------
                                    899 ; Stack segment in internal ram 
                                    900 ;--------------------------------------------------------
                                    901 	.area	SSEG
      000000                        902 __start__stack:
      000000                        903 	.ds	1
                                    904 
                                    905 ;--------------------------------------------------------
                                    906 ; indirectly addressable internal ram data
                                    907 ;--------------------------------------------------------
                                    908 	.area ISEG    (DATA)
                                    909 ;--------------------------------------------------------
                                    910 ; absolute internal ram data
                                    911 ;--------------------------------------------------------
                                    912 	.area IABS    (ABS,DATA)
                                    913 	.area IABS    (ABS,DATA)
                                    914 ;--------------------------------------------------------
                                    915 ; bit data
                                    916 ;--------------------------------------------------------
                                    917 	.area BSEG    (BIT)
                                    918 ;--------------------------------------------------------
                                    919 ; paged external ram data
                                    920 ;--------------------------------------------------------
                                    921 	.area PSEG    (PAG,XDATA)
                                    922 ;--------------------------------------------------------
                                    923 ; external ram data
                                    924 ;--------------------------------------------------------
                                    925 	.area XSEG    (XDATA)
                                    926 ;--------------------------------------------------------
                                    927 ; absolute external ram data
                                    928 ;--------------------------------------------------------
                                    929 	.area XABS    (ABS,XDATA)
                                    930 ;--------------------------------------------------------
                                    931 ; external initialized ram data
                                    932 ;--------------------------------------------------------
                                    933 	.area XISEG   (XDATA)
                                    934 	.area HOME    (CODE)
                                    935 	.area GSINIT0 (CODE)
                                    936 	.area GSINIT1 (CODE)
                                    937 	.area GSINIT2 (CODE)
                                    938 	.area GSINIT3 (CODE)
                                    939 	.area GSINIT4 (CODE)
                                    940 	.area GSINIT5 (CODE)
                                    941 	.area GSINIT  (CODE)
                                    942 	.area GSFINAL (CODE)
                                    943 	.area CSEG    (CODE)
                                    944 ;--------------------------------------------------------
                                    945 ; interrupt vector 
                                    946 ;--------------------------------------------------------
                                    947 	.area HOME    (CODE)
      000000                        948 __interrupt_vect:
      000000 02r00r00         [24]  949 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  950 	reti
      000004                        951 	.ds	7
      00000B 32               [24]  952 	reti
      00000C                        953 	.ds	7
      000013 32               [24]  954 	reti
      000014                        955 	.ds	7
      00001B 32               [24]  956 	reti
      00001C                        957 	.ds	7
      000023 32               [24]  958 	reti
      000024                        959 	.ds	7
      00002B 32               [24]  960 	reti
      00002C                        961 	.ds	7
      000033 32               [24]  962 	reti
      000034                        963 	.ds	7
      00003B 32               [24]  964 	reti
      00003C                        965 	.ds	7
      000043 32               [24]  966 	reti
      000044                        967 	.ds	7
      00004B 02r00rC8         [24]  968 	ljmp	_PCA_ISR
                                    969 ;--------------------------------------------------------
                                    970 ; global & static initialisations
                                    971 ;--------------------------------------------------------
                                    972 	.area HOME    (CODE)
                                    973 	.area GSINIT  (CODE)
                                    974 	.area GSFINAL (CODE)
                                    975 	.area GSINIT  (CODE)
                                    976 	.globl __sdcc_gsinit_startup
                                    977 	.globl __sdcc_program_startup
                                    978 	.globl __start__stack
                                    979 	.globl __mcs51_genXINIT
                                    980 	.globl __mcs51_genXRAMCLEAR
                                    981 	.globl __mcs51_genRAMCLEAR
                           000000   982 	C$Lab3_1_SteeringCalibration.c$15$1$71 ==.
                                    983 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:15: unsigned int PW_CENTER = 2765;
      000000 75*00 CD         [24]  984 	mov	_PW_CENTER,#0xcd
      000003 75*01 0A         [24]  985 	mov	(_PW_CENTER + 1),#0x0a
                           000006   986 	C$Lab3_1_SteeringCalibration.c$18$1$71 ==.
                                    987 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:18: unsigned int SERVO_PW = 0;
      000006 E4               [12]  988 	clr	a
      000007 F5*06            [12]  989 	mov	_SERVO_PW,a
      000009 F5*07            [12]  990 	mov	(_SERVO_PW + 1),a
                                    991 	.area GSFINAL (CODE)
      000000 02r00r4E         [24]  992 	ljmp	__sdcc_program_startup
                                    993 ;--------------------------------------------------------
                                    994 ; Home
                                    995 ;--------------------------------------------------------
                                    996 	.area HOME    (CODE)
                                    997 	.area HOME    (CODE)
      00004E                        998 __sdcc_program_startup:
      00004E 02r00r7B         [24]  999 	ljmp	_main
                                   1000 ;	return from main will return to caller
                                   1001 ;--------------------------------------------------------
                                   1002 ; code
                                   1003 ;--------------------------------------------------------
                                   1004 	.area CSEG    (CODE)
                                   1005 ;------------------------------------------------------------
                                   1006 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1007 ;------------------------------------------------------------
                                   1008 ;i                         Allocated to registers r6 r7 
                                   1009 ;------------------------------------------------------------
                           000000  1010 	G$SYSCLK_Init$0$0 ==.
                           000000  1011 	C$c8051_SDCC.h$62$0$0 ==.
                                   1012 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:62: void SYSCLK_Init(void)
                                   1013 ;	-----------------------------------------
                                   1014 ;	 function SYSCLK_Init
                                   1015 ;	-----------------------------------------
      000000                       1016 _SYSCLK_Init:
                           000007  1017 	ar7 = 0x07
                           000006  1018 	ar6 = 0x06
                           000005  1019 	ar5 = 0x05
                           000004  1020 	ar4 = 0x04
                           000003  1021 	ar3 = 0x03
                           000002  1022 	ar2 = 0x02
                           000001  1023 	ar1 = 0x01
                           000000  1024 	ar0 = 0x00
                           000000  1025 	C$c8051_SDCC.h$66$1$2 ==.
                                   1026 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1027 	mov	_OSCXCN,#0x67
                           000003  1028 	C$c8051_SDCC.h$69$1$2 ==.
                                   1029 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1030 	mov	r6,#0x00
      000005 7F 01            [12] 1031 	mov	r7,#0x01
      000007                       1032 00107$:
      000007 EE               [12] 1033 	mov	a,r6
      000008 24 FF            [12] 1034 	add	a,#0xff
      00000A FC               [12] 1035 	mov	r4,a
      00000B EF               [12] 1036 	mov	a,r7
      00000C 34 FF            [12] 1037 	addc	a,#0xff
      00000E FD               [12] 1038 	mov	r5,a
      00000F 8C 06            [24] 1039 	mov	ar6,r4
      000011 8D 07            [24] 1040 	mov	ar7,r5
      000013 EC               [12] 1041 	mov	a,r4
      000014 4D               [12] 1042 	orl	a,r5
      000015 70 F0            [24] 1043 	jnz	00107$
                           000017  1044 	C$c8051_SDCC.h$71$1$2 ==.
                                   1045 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1046 00102$:
      000017 E5 B1            [12] 1047 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1048 	jnb	acc.7,00102$
                           00001C  1049 	C$c8051_SDCC.h$73$1$2 ==.
                                   1050 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1051 	mov	_OSCICN,#0x88
                           00001F  1052 	C$c8051_SDCC.h$76$1$2 ==.
                           00001F  1053 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1054 	ret
                                   1055 ;------------------------------------------------------------
                                   1056 ;Allocation info for local variables in function 'UART0_Init'
                                   1057 ;------------------------------------------------------------
                           000020  1058 	G$UART0_Init$0$0 ==.
                           000020  1059 	C$c8051_SDCC.h$84$1$2 ==.
                                   1060 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:84: void UART0_Init(void)
                                   1061 ;	-----------------------------------------
                                   1062 ;	 function UART0_Init
                                   1063 ;	-----------------------------------------
      000020                       1064 _UART0_Init:
                           000020  1065 	C$c8051_SDCC.h$86$1$4 ==.
                                   1066 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1067 	mov	_SCON0,#0x50
                           000023  1068 	C$c8051_SDCC.h$87$1$4 ==.
                                   1069 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:87: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1070 	mov	_TMOD,#0x20
                           000026  1071 	C$c8051_SDCC.h$88$1$4 ==.
                                   1072 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1073 	mov	_TH1,#0xdc
                           000029  1074 	C$c8051_SDCC.h$89$1$4 ==.
                                   1075 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1076 	setb	_TR1
                           00002B  1077 	C$c8051_SDCC.h$90$1$4 ==.
                                   1078 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:90: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1079 	orl	_CKCON,#0x10
                           00002E  1080 	C$c8051_SDCC.h$91$1$4 ==.
                                   1081 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1082 	orl	_PCON,#0x80
                           000031  1083 	C$c8051_SDCC.h$93$1$4 ==.
                                   1084 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:93: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1085 	setb	_TI0
                           000033  1086 	C$c8051_SDCC.h$94$1$4 ==.
                                   1087 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:94: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1088 	orl	_P0MDOUT,#0x01
                           000036  1089 	C$c8051_SDCC.h$95$1$4 ==.
                           000036  1090 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1091 	ret
                                   1092 ;------------------------------------------------------------
                                   1093 ;Allocation info for local variables in function 'Sys_Init'
                                   1094 ;------------------------------------------------------------
                           000037  1095 	G$Sys_Init$0$0 ==.
                           000037  1096 	C$c8051_SDCC.h$103$1$4 ==.
                                   1097 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:103: void Sys_Init(void)
                                   1098 ;	-----------------------------------------
                                   1099 ;	 function Sys_Init
                                   1100 ;	-----------------------------------------
      000037                       1101 _Sys_Init:
                           000037  1102 	C$c8051_SDCC.h$105$1$6 ==.
                                   1103 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:105: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1104 	mov	_WDTCN,#0xde
                           00003A  1105 	C$c8051_SDCC.h$106$1$6 ==.
                                   1106 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:106: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1107 	mov	_WDTCN,#0xad
                           00003D  1108 	C$c8051_SDCC.h$108$1$6 ==.
                                   1109 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1110 	lcall	_SYSCLK_Init
                           000040  1111 	C$c8051_SDCC.h$109$1$6 ==.
                                   1112 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:109: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1113 	lcall	_UART0_Init
                           000043  1114 	C$c8051_SDCC.h$111$1$6 ==.
                                   1115 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1116 	orl	_XBR0,#0x04
                           000046  1117 	C$c8051_SDCC.h$112$1$6 ==.
                                   1118 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1119 	orl	_XBR2,#0x40
                           000049  1120 	C$c8051_SDCC.h$113$1$6 ==.
                           000049  1121 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1122 	ret
                                   1123 ;------------------------------------------------------------
                                   1124 ;Allocation info for local variables in function 'putchar'
                                   1125 ;------------------------------------------------------------
                                   1126 ;c                         Allocated to registers r7 
                                   1127 ;------------------------------------------------------------
                           00004A  1128 	G$putchar$0$0 ==.
                           00004A  1129 	C$c8051_SDCC.h$129$1$6 ==.
                                   1130 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: void putchar(char c)
                                   1131 ;	-----------------------------------------
                                   1132 ;	 function putchar
                                   1133 ;	-----------------------------------------
      00004A                       1134 _putchar:
      00004A AF 82            [24] 1135 	mov	r7,dpl
                           00004C  1136 	C$c8051_SDCC.h$132$1$8 ==.
                                   1137 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:132: while (!TI0); 
      00004C                       1138 00101$:
                           00004C  1139 	C$c8051_SDCC.h$133$1$8 ==.
                                   1140 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:133: TI0 = 0;
      00004C 10 99 02         [24] 1141 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1142 	sjmp	00101$
      000051                       1143 00112$:
                           000051  1144 	C$c8051_SDCC.h$134$1$8 ==.
                                   1145 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:134: SBUF0 = c;
      000051 8F 99            [24] 1146 	mov	_SBUF0,r7
                           000053  1147 	C$c8051_SDCC.h$135$1$8 ==.
                           000053  1148 	XG$putchar$0$0 ==.
      000053 22               [24] 1149 	ret
                                   1150 ;------------------------------------------------------------
                                   1151 ;Allocation info for local variables in function 'getchar'
                                   1152 ;------------------------------------------------------------
                                   1153 ;c                         Allocated to registers r7 
                                   1154 ;------------------------------------------------------------
                           000054  1155 	G$getchar$0$0 ==.
                           000054  1156 	C$c8051_SDCC.h$154$1$8 ==.
                                   1157 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:154: char getchar(void)
                                   1158 ;	-----------------------------------------
                                   1159 ;	 function getchar
                                   1160 ;	-----------------------------------------
      000054                       1161 _getchar:
                           000054  1162 	C$c8051_SDCC.h$157$1$10 ==.
                                   1163 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:157: while (!RI0);
      000054                       1164 00101$:
                           000054  1165 	C$c8051_SDCC.h$158$1$10 ==.
                                   1166 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:158: RI0 = 0;
      000054 10 98 02         [24] 1167 	jbc	_RI0,00112$
      000057 80 FB            [24] 1168 	sjmp	00101$
      000059                       1169 00112$:
                           000059  1170 	C$c8051_SDCC.h$159$1$10 ==.
                                   1171 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:159: c = SBUF0;
      000059 AF 99            [24] 1172 	mov	r7,_SBUF0
                           00005B  1173 	C$c8051_SDCC.h$160$1$10 ==.
                                   1174 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:160: putchar(c);                          // echo to terminal
      00005B 8F 82            [24] 1175 	mov	dpl,r7
      00005D C0 07            [24] 1176 	push	ar7
      00005F 12r00r4A         [24] 1177 	lcall	_putchar
      000062 D0 07            [24] 1178 	pop	ar7
                           000064  1179 	C$c8051_SDCC.h$161$1$10 ==.
                                   1180 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:161: return c;
      000064 8F 82            [24] 1181 	mov	dpl,r7
                           000066  1182 	C$c8051_SDCC.h$162$1$10 ==.
                           000066  1183 	XG$getchar$0$0 ==.
      000066 22               [24] 1184 	ret
                                   1185 ;------------------------------------------------------------
                                   1186 ;Allocation info for local variables in function 'getchar_nw'
                                   1187 ;------------------------------------------------------------
                                   1188 ;c                         Allocated to registers 
                                   1189 ;------------------------------------------------------------
                           000067  1190 	G$getchar_nw$0$0 ==.
                           000067  1191 	C$c8051_SDCC.h$168$1$10 ==.
                                   1192 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:168: char getchar_nw(void)
                                   1193 ;	-----------------------------------------
                                   1194 ;	 function getchar_nw
                                   1195 ;	-----------------------------------------
      000067                       1196 _getchar_nw:
                           000067  1197 	C$c8051_SDCC.h$171$1$12 ==.
                                   1198 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:171: if (!RI0) return 0xFF;
      000067 20 98 05         [24] 1199 	jb	_RI0,00102$
      00006A 75 82 FF         [24] 1200 	mov	dpl,#0xff
      00006D 80 0B            [24] 1201 	sjmp	00104$
      00006F                       1202 00102$:
                           00006F  1203 	C$c8051_SDCC.h$174$2$13 ==.
                                   1204 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:174: RI0 = 0;
      00006F C2 98            [12] 1205 	clr	_RI0
                           000071  1206 	C$c8051_SDCC.h$175$2$13 ==.
                                   1207 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:175: c = SBUF0;
      000071 85 99 82         [24] 1208 	mov	dpl,_SBUF0
                           000074  1209 	C$c8051_SDCC.h$176$2$13 ==.
                                   1210 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:176: putchar(c);                          // echo to terminal
      000074 12r00r4A         [24] 1211 	lcall	_putchar
                           000077  1212 	C$c8051_SDCC.h$177$2$13 ==.
                                   1213 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:177: return SBUF0;
      000077 85 99 82         [24] 1214 	mov	dpl,_SBUF0
      00007A                       1215 00104$:
                           00007A  1216 	C$c8051_SDCC.h$179$1$12 ==.
                           00007A  1217 	XG$getchar_nw$0$0 ==.
      00007A 22               [24] 1218 	ret
                                   1219 ;------------------------------------------------------------
                                   1220 ;Allocation info for local variables in function 'main'
                                   1221 ;------------------------------------------------------------
                           00007B  1222 	G$main$0$0 ==.
                           00007B  1223 	C$Lab3_1_SteeringCalibration.c$28$1$12 ==.
                                   1224 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:28: void main(void)
                                   1225 ;	-----------------------------------------
                                   1226 ;	 function main
                                   1227 ;	-----------------------------------------
      00007B                       1228 _main:
                           00007B  1229 	C$Lab3_1_SteeringCalibration.c$31$1$54 ==.
                                   1230 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:31: Sys_Init();
      00007B 12r00r37         [24] 1231 	lcall	_Sys_Init
                           00007E  1232 	C$Lab3_1_SteeringCalibration.c$32$1$54 ==.
                                   1233 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:32: putchar(' '); //the quotes in this line may not format correctly
      00007E 75 82 20         [24] 1234 	mov	dpl,#0x20
      000081 12r00r4A         [24] 1235 	lcall	_putchar
                           000084  1236 	C$Lab3_1_SteeringCalibration.c$33$1$54 ==.
                                   1237 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:33: Port_Init();
      000084 12r00rB1         [24] 1238 	lcall	_Port_Init
                           000087  1239 	C$Lab3_1_SteeringCalibration.c$34$1$54 ==.
                                   1240 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:34: XBR0_Init();
      000087 12r00rB5         [24] 1241 	lcall	_XBR0_Init
                           00008A  1242 	C$Lab3_1_SteeringCalibration.c$35$1$54 ==.
                                   1243 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:35: PCA_Init();
      00008A 12r00rB9         [24] 1244 	lcall	_PCA_Init
                           00008D  1245 	C$Lab3_1_SteeringCalibration.c$37$1$54 ==.
                                   1246 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:37: printf("Embedded Control Steering Calibration\n");
      00008D 74r00            [12] 1247 	mov	a,#___str_0
      00008F C0 E0            [24] 1248 	push	acc
      000091 74s00            [12] 1249 	mov	a,#(___str_0 >> 8)
      000093 C0 E0            [24] 1250 	push	acc
      000095 74 80            [12] 1251 	mov	a,#0x80
      000097 C0 E0            [24] 1252 	push	acc
      000099 12r00r00         [24] 1253 	lcall	_printf
      00009C 15 81            [12] 1254 	dec	sp
      00009E 15 81            [12] 1255 	dec	sp
      0000A0 15 81            [12] 1256 	dec	sp
                           0000A2  1257 	C$Lab3_1_SteeringCalibration.c$39$1$54 ==.
                                   1258 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:39: SERVO_PW = PW_CENTER;
      0000A2 85*00*06         [24] 1259 	mov	_SERVO_PW,_PW_CENTER
      0000A5 85*01*07         [24] 1260 	mov	(_SERVO_PW + 1),(_PW_CENTER + 1)
                           0000A8  1261 	C$Lab3_1_SteeringCalibration.c$40$1$54 ==.
                                   1262 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:40: CalibrateSteering(); // Calibrate boundries once
      0000A8 12r01r82         [24] 1263 	lcall	_CalibrateSteering
                           0000AB  1264 	C$Lab3_1_SteeringCalibration.c$41$1$54 ==.
                                   1265 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:41: while(1)
      0000AB                       1266 00102$:
                           0000AB  1267 	C$Lab3_1_SteeringCalibration.c$42$1$54 ==.
                                   1268 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:42: Steering_Servo();
      0000AB 12r00rD7         [24] 1269 	lcall	_Steering_Servo
      0000AE 80 FB            [24] 1270 	sjmp	00102$
                           0000B0  1271 	C$Lab3_1_SteeringCalibration.c$43$1$54 ==.
                           0000B0  1272 	XG$main$0$0 ==.
      0000B0 22               [24] 1273 	ret
                                   1274 ;------------------------------------------------------------
                                   1275 ;Allocation info for local variables in function 'Port_Init'
                                   1276 ;------------------------------------------------------------
                           0000B1  1277 	G$Port_Init$0$0 ==.
                           0000B1  1278 	C$Lab3_1_SteeringCalibration.c$50$1$54 ==.
                                   1279 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:50: void Port_Init()
                                   1280 ;	-----------------------------------------
                                   1281 ;	 function Port_Init
                                   1282 ;	-----------------------------------------
      0000B1                       1283 _Port_Init:
                           0000B1  1284 	C$Lab3_1_SteeringCalibration.c$52$1$55 ==.
                                   1285 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:52: P1MDOUT = 0x0F ;//set output pin for CEX0 in push-pull mode
      0000B1 75 A5 0F         [24] 1286 	mov	_P1MDOUT,#0x0f
                           0000B4  1287 	C$Lab3_1_SteeringCalibration.c$53$1$55 ==.
                           0000B4  1288 	XG$Port_Init$0$0 ==.
      0000B4 22               [24] 1289 	ret
                                   1290 ;------------------------------------------------------------
                                   1291 ;Allocation info for local variables in function 'XBR0_Init'
                                   1292 ;------------------------------------------------------------
                           0000B5  1293 	G$XBR0_Init$0$0 ==.
                           0000B5  1294 	C$Lab3_1_SteeringCalibration.c$60$1$55 ==.
                                   1295 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:60: void XBR0_Init()
                                   1296 ;	-----------------------------------------
                                   1297 ;	 function XBR0_Init
                                   1298 ;	-----------------------------------------
      0000B5                       1299 _XBR0_Init:
                           0000B5  1300 	C$Lab3_1_SteeringCalibration.c$62$1$56 ==.
                                   1301 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:62: XBR0 = 0x27;     // set up URART0, SPI, SMB, and CEX 0-3
      0000B5 75 E1 27         [24] 1302 	mov	_XBR0,#0x27
                           0000B8  1303 	C$Lab3_1_SteeringCalibration.c$64$1$56 ==.
                           0000B8  1304 	XG$XBR0_Init$0$0 ==.
      0000B8 22               [24] 1305 	ret
                                   1306 ;------------------------------------------------------------
                                   1307 ;Allocation info for local variables in function 'PCA_Init'
                                   1308 ;------------------------------------------------------------
                           0000B9  1309 	G$PCA_Init$0$0 ==.
                           0000B9  1310 	C$Lab3_1_SteeringCalibration.c$71$1$56 ==.
                                   1311 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:71: void PCA_Init(void)
                                   1312 ;	-----------------------------------------
                                   1313 ;	 function PCA_Init
                                   1314 ;	-----------------------------------------
      0000B9                       1315 _PCA_Init:
                           0000B9  1316 	C$Lab3_1_SteeringCalibration.c$73$1$58 ==.
                                   1317 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:73: EA = 1; // Enable all interrupts
      0000B9 D2 AF            [12] 1318 	setb	_EA
                           0000BB  1319 	C$Lab3_1_SteeringCalibration.c$74$1$58 ==.
                                   1320 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:74: EIE1 |= 0x08; // Enable PCA0 interrupts
      0000BB 43 E6 08         [24] 1321 	orl	_EIE1,#0x08
                           0000BE  1322 	C$Lab3_1_SteeringCalibration.c$75$1$58 ==.
                                   1323 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:75: PCA0MD = 0x81;   // SYSCLK/12, enable CF interrupts, suspend when idle
      0000BE 75 D9 81         [24] 1324 	mov	_PCA0MD,#0x81
                           0000C1  1325 	C$Lab3_1_SteeringCalibration.c$76$1$58 ==.
                                   1326 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:76: PCA0CPM0 = 0xC2; // 16 bit, enable compare, enable PWM
      0000C1 75 DA C2         [24] 1327 	mov	_PCA0CPM0,#0xc2
                           0000C4  1328 	C$Lab3_1_SteeringCalibration.c$77$1$58 ==.
                                   1329 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:77: PCA0CN |= 0x40;  // enable PCA
      0000C4 43 D8 40         [24] 1330 	orl	_PCA0CN,#0x40
                           0000C7  1331 	C$Lab3_1_SteeringCalibration.c$78$1$58 ==.
                           0000C7  1332 	XG$PCA_Init$0$0 ==.
      0000C7 22               [24] 1333 	ret
                                   1334 ;------------------------------------------------------------
                                   1335 ;Allocation info for local variables in function 'PCA_ISR'
                                   1336 ;------------------------------------------------------------
                           0000C8  1337 	G$PCA_ISR$0$0 ==.
                           0000C8  1338 	C$Lab3_1_SteeringCalibration.c$85$1$58 ==.
                                   1339 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:85: void PCA_ISR ( void ) __interrupt 9
                                   1340 ;	-----------------------------------------
                                   1341 ;	 function PCA_ISR
                                   1342 ;	-----------------------------------------
      0000C8                       1343 _PCA_ISR:
                           0000C8  1344 	C$Lab3_1_SteeringCalibration.c$87$1$60 ==.
                                   1345 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:87: if (CF)
                           0000C8  1346 	C$Lab3_1_SteeringCalibration.c$89$2$61 ==.
                                   1347 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:89: CF = 0; // Clear overflow flag
      0000C8 10 DF 02         [24] 1348 	jbc	_CF,00108$
      0000CB 80 06            [24] 1349 	sjmp	00102$
      0000CD                       1350 00108$:
                           0000CD  1351 	C$Lab3_1_SteeringCalibration.c$90$2$61 ==.
                                   1352 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:90: PCA0 = PCA_START; // Set period for 20ms
      0000CD 75 E9 00         [24] 1353 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      0000D0 75 F9 70         [24] 1354 	mov	((_PCA0 >> 8) & 0xFF),#0x70
      0000D3                       1355 00102$:
                           0000D3  1356 	C$Lab3_1_SteeringCalibration.c$93$1$60 ==.
                                   1357 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:93: PCA0CN &= 0x40; // Clear other PCI interrupt sources
      0000D3 53 D8 40         [24] 1358 	anl	_PCA0CN,#0x40
                           0000D6  1359 	C$Lab3_1_SteeringCalibration.c$94$1$60 ==.
                           0000D6  1360 	XG$PCA_ISR$0$0 ==.
      0000D6 32               [24] 1361 	reti
                                   1362 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1363 ;	eliminated unneeded push/pop psw
                                   1364 ;	eliminated unneeded push/pop dpl
                                   1365 ;	eliminated unneeded push/pop dph
                                   1366 ;	eliminated unneeded push/pop b
                                   1367 ;	eliminated unneeded push/pop acc
                                   1368 ;------------------------------------------------------------
                                   1369 ;Allocation info for local variables in function 'Steering_Servo'
                                   1370 ;------------------------------------------------------------
                                   1371 ;input                     Allocated to registers r7 
                                   1372 ;------------------------------------------------------------
                           0000D7  1373 	G$Steering_Servo$0$0 ==.
                           0000D7  1374 	C$Lab3_1_SteeringCalibration.c$96$1$60 ==.
                                   1375 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:96: void Steering_Servo()
                                   1376 ;	-----------------------------------------
                                   1377 ;	 function Steering_Servo
                                   1378 ;	-----------------------------------------
      0000D7                       1379 _Steering_Servo:
                           0000D7  1380 	C$Lab3_1_SteeringCalibration.c$100$1$62 ==.
                                   1381 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:100: input = getchar();
      0000D7 12r00r54         [24] 1382 	lcall	_getchar
      0000DA AF 82            [24] 1383 	mov	r7,dpl
                           0000DC  1384 	C$Lab3_1_SteeringCalibration.c$101$1$62 ==.
                                   1385 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:101: if(input == 'r') //if 'r' is pressed by the user
      0000DC BF 72 1F         [24] 1386 	cjne	r7,#0x72,00108$
                           0000DF  1387 	C$Lab3_1_SteeringCalibration.c$103$2$63 ==.
                                   1388 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:103: if(SERVO_PW+10 < PW_RIGHT)
      0000DF 74 0A            [12] 1389 	mov	a,#0x0a
      0000E1 25*06            [12] 1390 	add	a,_SERVO_PW
      0000E3 FD               [12] 1391 	mov	r5,a
      0000E4 E4               [12] 1392 	clr	a
      0000E5 35*07            [12] 1393 	addc	a,(_SERVO_PW + 1)
      0000E7 FE               [12] 1394 	mov	r6,a
      0000E8 C3               [12] 1395 	clr	c
      0000E9 ED               [12] 1396 	mov	a,r5
      0000EA 95*02            [12] 1397 	subb	a,_PW_RIGHT
      0000EC EE               [12] 1398 	mov	a,r6
      0000ED 95*03            [12] 1399 	subb	a,(_PW_RIGHT + 1)
      0000EF 50 2F            [24] 1400 	jnc	00109$
                           0000F1  1401 	C$Lab3_1_SteeringCalibration.c$104$2$63 ==.
                                   1402 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:104: SERVO_PW = SERVO_PW + 10; //increase the steering pulsewidth by 10
      0000F1 74 0A            [12] 1403 	mov	a,#0x0a
      0000F3 25*06            [12] 1404 	add	a,_SERVO_PW
      0000F5 F5*06            [12] 1405 	mov	_SERVO_PW,a
      0000F7 E4               [12] 1406 	clr	a
      0000F8 35*07            [12] 1407 	addc	a,(_SERVO_PW + 1)
      0000FA F5*07            [12] 1408 	mov	(_SERVO_PW + 1),a
      0000FC 80 22            [24] 1409 	sjmp	00109$
      0000FE                       1410 00108$:
                           0000FE  1411 	C$Lab3_1_SteeringCalibration.c$106$1$62 ==.
                                   1412 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:106: else if(input == 'l') //if 'l' is pressed by the user
      0000FE BF 6C 1F         [24] 1413 	cjne	r7,#0x6c,00109$
                           000101  1414 	C$Lab3_1_SteeringCalibration.c$108$2$64 ==.
                                   1415 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:108: if(SERVO_PW-10 > PW_LEFT)
      000101 E5*06            [12] 1416 	mov	a,_SERVO_PW
      000103 24 F6            [12] 1417 	add	a,#0xf6
      000105 FE               [12] 1418 	mov	r6,a
      000106 E5*07            [12] 1419 	mov	a,(_SERVO_PW + 1)
      000108 34 FF            [12] 1420 	addc	a,#0xff
      00010A FF               [12] 1421 	mov	r7,a
      00010B C3               [12] 1422 	clr	c
      00010C E5*04            [12] 1423 	mov	a,_PW_LEFT
      00010E 9E               [12] 1424 	subb	a,r6
      00010F E5*05            [12] 1425 	mov	a,(_PW_LEFT + 1)
      000111 9F               [12] 1426 	subb	a,r7
      000112 50 0C            [24] 1427 	jnc	00109$
                           000114  1428 	C$Lab3_1_SteeringCalibration.c$109$2$64 ==.
                                   1429 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:109: SERVO_PW = SERVO_PW - 10; //decrease the steering pulsewidth by 10
      000114 E5*06            [12] 1430 	mov	a,_SERVO_PW
      000116 24 F6            [12] 1431 	add	a,#0xf6
      000118 F5*06            [12] 1432 	mov	_SERVO_PW,a
      00011A E5*07            [12] 1433 	mov	a,(_SERVO_PW + 1)
      00011C 34 FF            [12] 1434 	addc	a,#0xff
      00011E F5*07            [12] 1435 	mov	(_SERVO_PW + 1),a
      000120                       1436 00109$:
                           000120  1437 	C$Lab3_1_SteeringCalibration.c$111$1$62 ==.
                                   1438 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:111: PCA0CP0 = 0xFFFF - SERVO_PW; // Set CEX0 compare value (May need to break up into high and low to work)
      000120 74 FF            [12] 1439 	mov	a,#0xff
      000122 C3               [12] 1440 	clr	c
      000123 95*06            [12] 1441 	subb	a,_SERVO_PW
      000125 F5 EA            [12] 1442 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000127 74 FF            [12] 1443 	mov	a,#0xff
      000129 95*07            [12] 1444 	subb	a,(_SERVO_PW + 1)
      00012B F5 FA            [12] 1445 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           00012D  1446 	C$Lab3_1_SteeringCalibration.c$112$1$62 ==.
                                   1447 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:112: printf("\r\nSERVO_PW: %u\n", SERVO_PW);
      00012D C0*06            [24] 1448 	push	_SERVO_PW
      00012F C0*07            [24] 1449 	push	(_SERVO_PW + 1)
      000131 74r27            [12] 1450 	mov	a,#___str_1
      000133 C0 E0            [24] 1451 	push	acc
      000135 74s00            [12] 1452 	mov	a,#(___str_1 >> 8)
      000137 C0 E0            [24] 1453 	push	acc
      000139 74 80            [12] 1454 	mov	a,#0x80
      00013B C0 E0            [24] 1455 	push	acc
      00013D 12r00r00         [24] 1456 	lcall	_printf
      000140 E5 81            [12] 1457 	mov	a,sp
      000142 24 FB            [12] 1458 	add	a,#0xfb
      000144 F5 81            [12] 1459 	mov	sp,a
                           000146  1460 	C$Lab3_1_SteeringCalibration.c$114$1$62 ==.
                           000146  1461 	XG$Steering_Servo$0$0 ==.
      000146 22               [24] 1462 	ret
                                   1463 ;------------------------------------------------------------
                                   1464 ;Allocation info for local variables in function 'Turn'
                                   1465 ;------------------------------------------------------------
                                   1466 ;input                     Allocated to registers r7 
                                   1467 ;------------------------------------------------------------
                           000147  1468 	G$Turn$0$0 ==.
                           000147  1469 	C$Lab3_1_SteeringCalibration.c$116$1$62 ==.
                                   1470 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:116: void Turn(void) // Turns the car left and right, Press k to escape.
                                   1471 ;	-----------------------------------------
                                   1472 ;	 function Turn
                                   1473 ;	-----------------------------------------
      000147                       1474 _Turn:
                           000147  1475 	C$Lab3_1_SteeringCalibration.c$118$1$62 ==.
                                   1476 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:118: char input = 0;
      000147 7F 00            [12] 1477 	mov	r7,#0x00
                           000149  1478 	C$Lab3_1_SteeringCalibration.c$119$1$66 ==.
                                   1479 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:119: while (input != 'k')
      000149                       1480 00106$:
      000149 BF 6B 02         [24] 1481 	cjne	r7,#0x6b,00123$
      00014C 80 33            [24] 1482 	sjmp	00109$
      00014E                       1483 00123$:
                           00014E  1484 	C$Lab3_1_SteeringCalibration.c$121$2$67 ==.
                                   1485 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:121: input = getchar();
      00014E 12r00r54         [24] 1486 	lcall	_getchar
      000151 AF 82            [24] 1487 	mov	r7,dpl
                           000153  1488 	C$Lab3_1_SteeringCalibration.c$122$2$67 ==.
                                   1489 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:122: if(input == 'r') //if 'r' is pressed by the user
      000153 BF 72 0D         [24] 1490 	cjne	r7,#0x72,00104$
                           000156  1491 	C$Lab3_1_SteeringCalibration.c$124$3$68 ==.
                                   1492 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:124: SERVO_PW = SERVO_PW + 10; //increase the steering pulsewidth by 10
      000156 74 0A            [12] 1493 	mov	a,#0x0a
      000158 25*06            [12] 1494 	add	a,_SERVO_PW
      00015A F5*06            [12] 1495 	mov	_SERVO_PW,a
      00015C E4               [12] 1496 	clr	a
      00015D 35*07            [12] 1497 	addc	a,(_SERVO_PW + 1)
      00015F F5*07            [12] 1498 	mov	(_SERVO_PW + 1),a
      000161 80 0F            [24] 1499 	sjmp	00105$
      000163                       1500 00104$:
                           000163  1501 	C$Lab3_1_SteeringCalibration.c$126$2$67 ==.
                                   1502 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:126: else if(input == 'l') //if 'l' is pressed by the user
      000163 BF 6C 0C         [24] 1503 	cjne	r7,#0x6c,00105$
                           000166  1504 	C$Lab3_1_SteeringCalibration.c$128$3$69 ==.
                                   1505 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:128: SERVO_PW = SERVO_PW - 10; //decrease the steering pulsewidth by 10
      000166 E5*06            [12] 1506 	mov	a,_SERVO_PW
      000168 24 F6            [12] 1507 	add	a,#0xf6
      00016A F5*06            [12] 1508 	mov	_SERVO_PW,a
      00016C E5*07            [12] 1509 	mov	a,(_SERVO_PW + 1)
      00016E 34 FF            [12] 1510 	addc	a,#0xff
      000170 F5*07            [12] 1511 	mov	(_SERVO_PW + 1),a
      000172                       1512 00105$:
                           000172  1513 	C$Lab3_1_SteeringCalibration.c$130$2$67 ==.
                                   1514 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:130: PCA0CP0 = 0xFFFF - SERVO_PW; // Set CEX0 compare value (May need to break up into high and low to work)
      000172 74 FF            [12] 1515 	mov	a,#0xff
      000174 C3               [12] 1516 	clr	c
      000175 95*06            [12] 1517 	subb	a,_SERVO_PW
      000177 F5 EA            [12] 1518 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000179 74 FF            [12] 1519 	mov	a,#0xff
      00017B 95*07            [12] 1520 	subb	a,(_SERVO_PW + 1)
      00017D F5 FA            [12] 1521 	mov	((_PCA0CP0 >> 8) & 0xFF),a
      00017F 80 C8            [24] 1522 	sjmp	00106$
      000181                       1523 00109$:
                           000181  1524 	C$Lab3_1_SteeringCalibration.c$132$1$66 ==.
                           000181  1525 	XG$Turn$0$0 ==.
      000181 22               [24] 1526 	ret
                                   1527 ;------------------------------------------------------------
                                   1528 ;Allocation info for local variables in function 'CalibrateSteering'
                                   1529 ;------------------------------------------------------------
                           000182  1530 	G$CalibrateSteering$0$0 ==.
                           000182  1531 	C$Lab3_1_SteeringCalibration.c$134$1$66 ==.
                                   1532 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:134: void CalibrateSteering(void)
                                   1533 ;	-----------------------------------------
                                   1534 ;	 function CalibrateSteering
                                   1535 ;	-----------------------------------------
      000182                       1536 _CalibrateSteering:
                           000182  1537 	C$Lab3_1_SteeringCalibration.c$136$1$71 ==.
                                   1538 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:136: SERVO_PW = 2765; // Set initial pulse width to 1.5ms (approx center)
      000182 75*06 CD         [24] 1539 	mov	_SERVO_PW,#0xcd
      000185 75*07 0A         [24] 1540 	mov	(_SERVO_PW + 1),#0x0a
                           000188  1541 	C$Lab3_1_SteeringCalibration.c$137$1$71 ==.
                                   1542 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:137: PCA0CP0 = 0xFFFF - SERVO_PW; // Set pulse width (May need to break up into high and low to work)
      000188 75 EA 32         [24] 1543 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x32
      00018B 75 FA F5         [24] 1544 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xf5
                           00018E  1545 	C$Lab3_1_SteeringCalibration.c$142$1$71 ==.
                                   1546 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:142: printf("\r\n Please center the car. \r\nUse l and r to turn left and right. Press k when done.");
      00018E 74r37            [12] 1547 	mov	a,#___str_2
      000190 C0 E0            [24] 1548 	push	acc
      000192 74s00            [12] 1549 	mov	a,#(___str_2 >> 8)
      000194 C0 E0            [24] 1550 	push	acc
      000196 74 80            [12] 1551 	mov	a,#0x80
      000198 C0 E0            [24] 1552 	push	acc
      00019A 12r00r00         [24] 1553 	lcall	_printf
      00019D 15 81            [12] 1554 	dec	sp
      00019F 15 81            [12] 1555 	dec	sp
      0001A1 15 81            [12] 1556 	dec	sp
                           0001A3  1557 	C$Lab3_1_SteeringCalibration.c$143$1$71 ==.
                                   1558 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:143: Turn();
      0001A3 12r01r47         [24] 1559 	lcall	_Turn
                           0001A6  1560 	C$Lab3_1_SteeringCalibration.c$145$1$71 ==.
                                   1561 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:145: PW_CENTER = SERVO_PW; // Save center PW
      0001A6 85*06*00         [24] 1562 	mov	_PW_CENTER,_SERVO_PW
      0001A9 85*07*01         [24] 1563 	mov	(_PW_CENTER + 1),(_SERVO_PW + 1)
                           0001AC  1564 	C$Lab3_1_SteeringCalibration.c$151$1$71 ==.
                                   1565 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:151: printf("\r\n Please turn the car all the way to the left without straining it. \r\nUse l and r to turn left and right. Press k when done.");
      0001AC 74r8A            [12] 1566 	mov	a,#___str_3
      0001AE C0 E0            [24] 1567 	push	acc
      0001B0 74s00            [12] 1568 	mov	a,#(___str_3 >> 8)
      0001B2 C0 E0            [24] 1569 	push	acc
      0001B4 74 80            [12] 1570 	mov	a,#0x80
      0001B6 C0 E0            [24] 1571 	push	acc
      0001B8 12r00r00         [24] 1572 	lcall	_printf
      0001BB 15 81            [12] 1573 	dec	sp
      0001BD 15 81            [12] 1574 	dec	sp
      0001BF 15 81            [12] 1575 	dec	sp
                           0001C1  1576 	C$Lab3_1_SteeringCalibration.c$152$1$71 ==.
                                   1577 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:152: Turn();
      0001C1 12r01r47         [24] 1578 	lcall	_Turn
                           0001C4  1579 	C$Lab3_1_SteeringCalibration.c$154$1$71 ==.
                                   1580 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:154: PW_LEFT = SERVO_PW; // Save left PW
      0001C4 85*06*04         [24] 1581 	mov	_PW_LEFT,_SERVO_PW
      0001C7 85*07*05         [24] 1582 	mov	(_PW_LEFT + 1),(_SERVO_PW + 1)
                           0001CA  1583 	C$Lab3_1_SteeringCalibration.c$156$1$71 ==.
                                   1584 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:156: printf("\r\nPW_CENTER = %u \r\nPW_RIGHT = %u \r\nPW_LEFT = %u \r\n",PW_CENTER,PW_RIGHT,PW_LEFT); // Print all values
      0001CA C0*04            [24] 1585 	push	_PW_LEFT
      0001CC C0*05            [24] 1586 	push	(_PW_LEFT + 1)
      0001CE C0*02            [24] 1587 	push	_PW_RIGHT
      0001D0 C0*03            [24] 1588 	push	(_PW_RIGHT + 1)
      0001D2 C0*00            [24] 1589 	push	_PW_CENTER
      0001D4 C0*01            [24] 1590 	push	(_PW_CENTER + 1)
      0001D6 74r08            [12] 1591 	mov	a,#___str_4
      0001D8 C0 E0            [24] 1592 	push	acc
      0001DA 74s01            [12] 1593 	mov	a,#(___str_4 >> 8)
      0001DC C0 E0            [24] 1594 	push	acc
      0001DE 74 80            [12] 1595 	mov	a,#0x80
      0001E0 C0 E0            [24] 1596 	push	acc
      0001E2 12r00r00         [24] 1597 	lcall	_printf
      0001E5 E5 81            [12] 1598 	mov	a,sp
      0001E7 24 F7            [12] 1599 	add	a,#0xf7
      0001E9 F5 81            [12] 1600 	mov	sp,a
                           0001EB  1601 	C$Lab3_1_SteeringCalibration.c$162$1$71 ==.
                                   1602 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:162: printf("\r\n Please turn the car all the way to the right without straining it. \r\nUse l and r to turn left and right. Press k when done.");
      0001EB 74r3B            [12] 1603 	mov	a,#___str_5
      0001ED C0 E0            [24] 1604 	push	acc
      0001EF 74s01            [12] 1605 	mov	a,#(___str_5 >> 8)
      0001F1 C0 E0            [24] 1606 	push	acc
      0001F3 74 80            [12] 1607 	mov	a,#0x80
      0001F5 C0 E0            [24] 1608 	push	acc
      0001F7 12r00r00         [24] 1609 	lcall	_printf
      0001FA 15 81            [12] 1610 	dec	sp
      0001FC 15 81            [12] 1611 	dec	sp
      0001FE 15 81            [12] 1612 	dec	sp
                           000200  1613 	C$Lab3_1_SteeringCalibration.c$163$1$71 ==.
                                   1614 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:163: Turn();
      000200 12r01r47         [24] 1615 	lcall	_Turn
                           000203  1616 	C$Lab3_1_SteeringCalibration.c$165$1$71 ==.
                                   1617 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-1\Lab3-1_SteeringCalibration.c:165: PW_RIGHT = SERVO_PW; // Save right PW
      000203 85*06*02         [24] 1618 	mov	_PW_RIGHT,_SERVO_PW
      000206 85*07*03         [24] 1619 	mov	(_PW_RIGHT + 1),(_SERVO_PW + 1)
                           000209  1620 	C$Lab3_1_SteeringCalibration.c$166$1$71 ==.
                           000209  1621 	XG$CalibrateSteering$0$0 ==.
      000209 22               [24] 1622 	ret
                                   1623 	.area CSEG    (CODE)
                                   1624 	.area CONST   (CODE)
                           000000  1625 FLab3_1_SteeringCalibration$__str_0$0$0 == .
      000000                       1626 ___str_0:
      000000 45 6D 62 65 64 64 65  1627 	.ascii "Embedded Control Steering Calibration"
             64 20 43 6F 6E 74 72
             6F 6C 20 53 74 65 65
             72 69 6E 67 20 43 61
             6C 69 62 72 61 74 69
             6F 6E
      000025 0A                    1628 	.db 0x0a
      000026 00                    1629 	.db 0x00
                           000027  1630 FLab3_1_SteeringCalibration$__str_1$0$0 == .
      000027                       1631 ___str_1:
      000027 0D                    1632 	.db 0x0d
      000028 0A                    1633 	.db 0x0a
      000029 53 45 52 56 4F 5F 50  1634 	.ascii "SERVO_PW: %u"
             57 3A 20 25 75
      000035 0A                    1635 	.db 0x0a
      000036 00                    1636 	.db 0x00
                           000037  1637 FLab3_1_SteeringCalibration$__str_2$0$0 == .
      000037                       1638 ___str_2:
      000037 0D                    1639 	.db 0x0d
      000038 0A                    1640 	.db 0x0a
      000039 20 50 6C 65 61 73 65  1641 	.ascii " Please center the car. "
             20 63 65 6E 74 65 72
             20 74 68 65 20 63 61
             72 2E 20
      000051 0D                    1642 	.db 0x0d
      000052 0A                    1643 	.db 0x0a
      000053 55 73 65 20 6C 20 61  1644 	.ascii "Use l and r to turn left and rig"
             6E 64 20 72 20 74 6F
             20 74 75 72 6E 20 6C
             65 66 74 20 61 6E 64
             20 72 69 67
      000073 68 74 2E 20 50 72 65  1645 	.ascii "ht. Press k when done."
             73 73 20 6B 20 77 68
             65 6E 20 64 6F 6E 65
             2E
      000089 00                    1646 	.db 0x00
                           00008A  1647 FLab3_1_SteeringCalibration$__str_3$0$0 == .
      00008A                       1648 ___str_3:
      00008A 0D                    1649 	.db 0x0d
      00008B 0A                    1650 	.db 0x0a
      00008C 20 50 6C 65 61 73 65  1651 	.ascii " Please turn the car all the way to the left without strai"
             20 74 75 72 6E 20 74
             68 65 20 63 61 72 20
             61 6C 6C 20 74 68 65
             20 77 61 79 20 74 6F
             20 74 68 65 20 6C 65
             66 74 20 77 69 74 68
             6F 75 74 20 73 74 72
             61 69
      0000C6 6E 69 6E 67 20 69 74  1652 	.ascii "ning it. "
             2E 20
      0000CF 0D                    1653 	.db 0x0d
      0000D0 0A                    1654 	.db 0x0a
      0000D1 55 73 65 20 6C 20 61  1655 	.ascii "Use l and r to turn left and right. Press k when "
             6E 64 20 72 20 74 6F
             20 74 75 72 6E 20 6C
             65 66 74 20 61 6E 64
             20 72 69 67 68 74 2E
             20 50 72 65 73 73 20
             6B 20 77 68 65 6E 20
      000102 64 6F 6E 65 2E        1656 	.ascii "done."
      000107 00                    1657 	.db 0x00
                           000108  1658 FLab3_1_SteeringCalibration$__str_4$0$0 == .
      000108                       1659 ___str_4:
      000108 0D                    1660 	.db 0x0d
      000109 0A                    1661 	.db 0x0a
      00010A 50 57 5F 43 45 4E 54  1662 	.ascii "PW_CENTER = %u "
             45 52 20 3D 20 25 75
             20
      000119 0D                    1663 	.db 0x0d
      00011A 0A                    1664 	.db 0x0a
      00011B 50 57 5F 52 49 47 48  1665 	.ascii "PW_RIGHT = %u "
             54 20 3D 20 25 75 20
      000129 0D                    1666 	.db 0x0d
      00012A 0A                    1667 	.db 0x0a
      00012B 50 57 5F 4C 45 46 54  1668 	.ascii "PW_LEFT = %u "
             20 3D 20 25 75 20
      000138 0D                    1669 	.db 0x0d
      000139 0A                    1670 	.db 0x0a
      00013A 00                    1671 	.db 0x00
                           00013B  1672 FLab3_1_SteeringCalibration$__str_5$0$0 == .
      00013B                       1673 ___str_5:
      00013B 0D                    1674 	.db 0x0d
      00013C 0A                    1675 	.db 0x0a
      00013D 20 50 6C 65 61 73 65  1676 	.ascii " Please turn the car all the way to the right without stra"
             20 74 75 72 6E 20 74
             68 65 20 63 61 72 20
             61 6C 6C 20 74 68 65
             20 77 61 79 20 74 6F
             20 74 68 65 20 72 69
             67 68 74 20 77 69 74
             68 6F 75 74 20 73 74
             72 61
      000177 69 6E 69 6E 67 20 69  1677 	.ascii "ining it. "
             74 2E 20
      000181 0D                    1678 	.db 0x0d
      000182 0A                    1679 	.db 0x0a
      000183 55 73 65 20 6C 20 61  1680 	.ascii "Use l and r to turn left and right. Press k when"
             6E 64 20 72 20 74 6F
             20 74 75 72 6E 20 6C
             65 66 74 20 61 6E 64
             20 72 69 67 68 74 2E
             20 50 72 65 73 73 20
             6B 20 77 68 65 6E
      0001B3 20 64 6F 6E 65 2E     1681 	.ascii " done."
      0001B9 00                    1682 	.db 0x00
                                   1683 	.area XINIT   (CODE)
                                   1684 	.area CABS    (ABS,CODE)
