                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module Lab3_2_SteeringCalibration
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _read_keypad
                                     13 	.globl _strlen
                                     14 	.globl _putchar
                                     15 	.globl _getchar
                                     16 	.globl _vsprintf
                                     17 	.globl _printf
                                     18 	.globl _getchar_nw
                                     19 	.globl _Sys_Init
                                     20 	.globl _UART0_Init
                                     21 	.globl _SYSCLK_Init
                                     22 	.globl _BUS_SCL
                                     23 	.globl _BUS_TOE
                                     24 	.globl _BUS_FTE
                                     25 	.globl _BUS_AA
                                     26 	.globl _BUS_INT
                                     27 	.globl _BUS_STOP
                                     28 	.globl _BUS_START
                                     29 	.globl _BUS_EN
                                     30 	.globl _BUS_BUSY
                                     31 	.globl _SPIF
                                     32 	.globl _WCOL
                                     33 	.globl _MODF
                                     34 	.globl _RXOVRN
                                     35 	.globl _TXBSY
                                     36 	.globl _SLVSEL
                                     37 	.globl _MSTEN
                                     38 	.globl _SPIEN
                                     39 	.globl _AD0EN
                                     40 	.globl _ADCEN
                                     41 	.globl _AD0TM
                                     42 	.globl _ADCTM
                                     43 	.globl _AD0INT
                                     44 	.globl _ADCINT
                                     45 	.globl _AD0BUSY
                                     46 	.globl _ADBUSY
                                     47 	.globl _AD0CM1
                                     48 	.globl _ADSTM1
                                     49 	.globl _AD0CM0
                                     50 	.globl _ADSTM0
                                     51 	.globl _AD0WINT
                                     52 	.globl _ADWINT
                                     53 	.globl _AD0LJST
                                     54 	.globl _ADLJST
                                     55 	.globl _CF
                                     56 	.globl _CR
                                     57 	.globl _CCF4
                                     58 	.globl _CCF3
                                     59 	.globl _CCF2
                                     60 	.globl _CCF1
                                     61 	.globl _CCF0
                                     62 	.globl _CY
                                     63 	.globl _AC
                                     64 	.globl _F0
                                     65 	.globl _RS1
                                     66 	.globl _RS0
                                     67 	.globl _OV
                                     68 	.globl _F1
                                     69 	.globl _P
                                     70 	.globl _TF2
                                     71 	.globl _EXF2
                                     72 	.globl _RCLK
                                     73 	.globl _TCLK
                                     74 	.globl _EXEN2
                                     75 	.globl _TR2
                                     76 	.globl _CT2
                                     77 	.globl _CPRL2
                                     78 	.globl _BUSY
                                     79 	.globl _ENSMB
                                     80 	.globl _STA
                                     81 	.globl _STO
                                     82 	.globl _SI
                                     83 	.globl _AA
                                     84 	.globl _SMBFTE
                                     85 	.globl _SMBTOE
                                     86 	.globl _PT2
                                     87 	.globl _PS
                                     88 	.globl _PS0
                                     89 	.globl _PT1
                                     90 	.globl _PX1
                                     91 	.globl _PT0
                                     92 	.globl _PX0
                                     93 	.globl _P3_7
                                     94 	.globl _P3_6
                                     95 	.globl _P3_5
                                     96 	.globl _P3_4
                                     97 	.globl _P3_3
                                     98 	.globl _P3_2
                                     99 	.globl _P3_1
                                    100 	.globl _P3_0
                                    101 	.globl _EA
                                    102 	.globl _ET2
                                    103 	.globl _ES
                                    104 	.globl _ES0
                                    105 	.globl _ET1
                                    106 	.globl _EX1
                                    107 	.globl _ET0
                                    108 	.globl _EX0
                                    109 	.globl _P2_7
                                    110 	.globl _P2_6
                                    111 	.globl _P2_5
                                    112 	.globl _P2_4
                                    113 	.globl _P2_3
                                    114 	.globl _P2_2
                                    115 	.globl _P2_1
                                    116 	.globl _P2_0
                                    117 	.globl _S0MODE
                                    118 	.globl _SM00
                                    119 	.globl _SM0
                                    120 	.globl _SM10
                                    121 	.globl _SM1
                                    122 	.globl _MCE0
                                    123 	.globl _SM20
                                    124 	.globl _SM2
                                    125 	.globl _REN0
                                    126 	.globl _REN
                                    127 	.globl _TB80
                                    128 	.globl _TB8
                                    129 	.globl _RB80
                                    130 	.globl _RB8
                                    131 	.globl _TI0
                                    132 	.globl _TI
                                    133 	.globl _RI0
                                    134 	.globl _RI
                                    135 	.globl _P1_7
                                    136 	.globl _P1_6
                                    137 	.globl _P1_5
                                    138 	.globl _P1_4
                                    139 	.globl _P1_3
                                    140 	.globl _P1_2
                                    141 	.globl _P1_1
                                    142 	.globl _P1_0
                                    143 	.globl _TF1
                                    144 	.globl _TR1
                                    145 	.globl _TF0
                                    146 	.globl _TR0
                                    147 	.globl _IE1
                                    148 	.globl _IT1
                                    149 	.globl _IE0
                                    150 	.globl _IT0
                                    151 	.globl _P0_7
                                    152 	.globl _P0_6
                                    153 	.globl _P0_5
                                    154 	.globl _P0_4
                                    155 	.globl _P0_3
                                    156 	.globl _P0_2
                                    157 	.globl _P0_1
                                    158 	.globl _P0_0
                                    159 	.globl _PCA0CP4
                                    160 	.globl _PCA0CP3
                                    161 	.globl _PCA0CP2
                                    162 	.globl _PCA0CP1
                                    163 	.globl _PCA0CP0
                                    164 	.globl _PCA0
                                    165 	.globl _DAC1
                                    166 	.globl _DAC0
                                    167 	.globl _ADC0LT
                                    168 	.globl _ADC0GT
                                    169 	.globl _ADC0
                                    170 	.globl _RCAP4
                                    171 	.globl _TMR4
                                    172 	.globl _TMR3RL
                                    173 	.globl _TMR3
                                    174 	.globl _RCAP2
                                    175 	.globl _TMR2
                                    176 	.globl _TMR1
                                    177 	.globl _TMR0
                                    178 	.globl _WDTCN
                                    179 	.globl _PCA0CPH4
                                    180 	.globl _PCA0CPH3
                                    181 	.globl _PCA0CPH2
                                    182 	.globl _PCA0CPH1
                                    183 	.globl _PCA0CPH0
                                    184 	.globl _PCA0H
                                    185 	.globl _SPI0CN
                                    186 	.globl _EIP2
                                    187 	.globl _EIP1
                                    188 	.globl _TH4
                                    189 	.globl _TL4
                                    190 	.globl _SADDR1
                                    191 	.globl _SBUF1
                                    192 	.globl _SCON1
                                    193 	.globl _B
                                    194 	.globl _RSTSRC
                                    195 	.globl _PCA0CPL4
                                    196 	.globl _PCA0CPL3
                                    197 	.globl _PCA0CPL2
                                    198 	.globl _PCA0CPL1
                                    199 	.globl _PCA0CPL0
                                    200 	.globl _PCA0L
                                    201 	.globl _ADC0CN
                                    202 	.globl _EIE2
                                    203 	.globl _EIE1
                                    204 	.globl _RCAP4H
                                    205 	.globl _RCAP4L
                                    206 	.globl _XBR2
                                    207 	.globl _XBR1
                                    208 	.globl _XBR0
                                    209 	.globl _ACC
                                    210 	.globl _PCA0CPM4
                                    211 	.globl _PCA0CPM3
                                    212 	.globl _PCA0CPM2
                                    213 	.globl _PCA0CPM1
                                    214 	.globl _PCA0CPM0
                                    215 	.globl _PCA0MD
                                    216 	.globl _PCA0CN
                                    217 	.globl _DAC1CN
                                    218 	.globl _DAC1H
                                    219 	.globl _DAC1L
                                    220 	.globl _DAC0CN
                                    221 	.globl _DAC0H
                                    222 	.globl _DAC0L
                                    223 	.globl _REF0CN
                                    224 	.globl _PSW
                                    225 	.globl _SMB0CR
                                    226 	.globl _TH2
                                    227 	.globl _TL2
                                    228 	.globl _RCAP2H
                                    229 	.globl _RCAP2L
                                    230 	.globl _T4CON
                                    231 	.globl _T2CON
                                    232 	.globl _ADC0LTH
                                    233 	.globl _ADC0LTL
                                    234 	.globl _ADC0GTH
                                    235 	.globl _ADC0GTL
                                    236 	.globl _SMB0ADR
                                    237 	.globl _SMB0DAT
                                    238 	.globl _SMB0STA
                                    239 	.globl _SMB0CN
                                    240 	.globl _ADC0H
                                    241 	.globl _ADC0L
                                    242 	.globl _P1MDIN
                                    243 	.globl _ADC0CF
                                    244 	.globl _AMX0SL
                                    245 	.globl _AMX0CF
                                    246 	.globl _SADEN0
                                    247 	.globl _IP
                                    248 	.globl _FLACL
                                    249 	.globl _FLSCL
                                    250 	.globl _P74OUT
                                    251 	.globl _OSCICN
                                    252 	.globl _OSCXCN
                                    253 	.globl _P3
                                    254 	.globl __XPAGE
                                    255 	.globl _EMI0CN
                                    256 	.globl _SADEN1
                                    257 	.globl _P3IF
                                    258 	.globl _AMX1SL
                                    259 	.globl _ADC1CF
                                    260 	.globl _ADC1CN
                                    261 	.globl _SADDR0
                                    262 	.globl _IE
                                    263 	.globl _P3MDOUT
                                    264 	.globl _PRT3CF
                                    265 	.globl _P2MDOUT
                                    266 	.globl _PRT2CF
                                    267 	.globl _P1MDOUT
                                    268 	.globl _PRT1CF
                                    269 	.globl _P0MDOUT
                                    270 	.globl _PRT0CF
                                    271 	.globl _EMI0CF
                                    272 	.globl _EMI0TC
                                    273 	.globl _P2
                                    274 	.globl _CPT1CN
                                    275 	.globl _CPT0CN
                                    276 	.globl _SPI0CKR
                                    277 	.globl _ADC1
                                    278 	.globl _SPI0DAT
                                    279 	.globl _SPI0CFG
                                    280 	.globl _SBUF0
                                    281 	.globl _SBUF
                                    282 	.globl _SCON0
                                    283 	.globl _SCON
                                    284 	.globl _P7
                                    285 	.globl _TMR3H
                                    286 	.globl _TMR3L
                                    287 	.globl _TMR3RLH
                                    288 	.globl _TMR3RLL
                                    289 	.globl _TMR3CN
                                    290 	.globl _P1
                                    291 	.globl _PSCTL
                                    292 	.globl _CKCON
                                    293 	.globl _TH1
                                    294 	.globl _TH0
                                    295 	.globl _TL1
                                    296 	.globl _TL0
                                    297 	.globl _TMOD
                                    298 	.globl _TCON
                                    299 	.globl _PCON
                                    300 	.globl _P6
                                    301 	.globl _P5
                                    302 	.globl _P4
                                    303 	.globl _DPH
                                    304 	.globl _DPL
                                    305 	.globl _SP
                                    306 	.globl _P0
                                    307 	.globl _SERVO_PW
                                    308 	.globl _PW_LEFT
                                    309 	.globl _PW_RIGHT
                                    310 	.globl _PW_CENTER
                                    311 	.globl _i2c_read_data_PARM_4
                                    312 	.globl _i2c_read_data_PARM_3
                                    313 	.globl _i2c_read_data_PARM_2
                                    314 	.globl _i2c_write_data_PARM_4
                                    315 	.globl _i2c_write_data_PARM_3
                                    316 	.globl _i2c_write_data_PARM_2
                                    317 	.globl _aligned_alloc_PARM_2
                                    318 	.globl _Data2
                                    319 	.globl _lcd_print
                                    320 	.globl _lcd_clear
                                    321 	.globl _kpd_input
                                    322 	.globl _delay_time
                                    323 	.globl _i2c_start
                                    324 	.globl _i2c_write
                                    325 	.globl _i2c_write_and_stop
                                    326 	.globl _i2c_read
                                    327 	.globl _i2c_read_and_stop
                                    328 	.globl _i2c_write_data
                                    329 	.globl _i2c_read_data
                                    330 	.globl _Accel_Init
                                    331 	.globl _Accel_Init_C
                                    332 	.globl _Port_Init
                                    333 	.globl _XBR0_Init
                                    334 	.globl _PCA_Init
                                    335 	.globl _PCA_ISR
                                    336 	.globl _Steering_Servo
                                    337 	.globl _Turn
                                    338 	.globl _CalibrateSteering
                                    339 ;--------------------------------------------------------
                                    340 ; special function registers
                                    341 ;--------------------------------------------------------
                                    342 	.area RSEG    (ABS,DATA)
      000000                        343 	.org 0x0000
                           000080   344 G$P0$0$0 == 0x0080
                           000080   345 _P0	=	0x0080
                           000081   346 G$SP$0$0 == 0x0081
                           000081   347 _SP	=	0x0081
                           000082   348 G$DPL$0$0 == 0x0082
                           000082   349 _DPL	=	0x0082
                           000083   350 G$DPH$0$0 == 0x0083
                           000083   351 _DPH	=	0x0083
                           000084   352 G$P4$0$0 == 0x0084
                           000084   353 _P4	=	0x0084
                           000085   354 G$P5$0$0 == 0x0085
                           000085   355 _P5	=	0x0085
                           000086   356 G$P6$0$0 == 0x0086
                           000086   357 _P6	=	0x0086
                           000087   358 G$PCON$0$0 == 0x0087
                           000087   359 _PCON	=	0x0087
                           000088   360 G$TCON$0$0 == 0x0088
                           000088   361 _TCON	=	0x0088
                           000089   362 G$TMOD$0$0 == 0x0089
                           000089   363 _TMOD	=	0x0089
                           00008A   364 G$TL0$0$0 == 0x008a
                           00008A   365 _TL0	=	0x008a
                           00008B   366 G$TL1$0$0 == 0x008b
                           00008B   367 _TL1	=	0x008b
                           00008C   368 G$TH0$0$0 == 0x008c
                           00008C   369 _TH0	=	0x008c
                           00008D   370 G$TH1$0$0 == 0x008d
                           00008D   371 _TH1	=	0x008d
                           00008E   372 G$CKCON$0$0 == 0x008e
                           00008E   373 _CKCON	=	0x008e
                           00008F   374 G$PSCTL$0$0 == 0x008f
                           00008F   375 _PSCTL	=	0x008f
                           000090   376 G$P1$0$0 == 0x0090
                           000090   377 _P1	=	0x0090
                           000091   378 G$TMR3CN$0$0 == 0x0091
                           000091   379 _TMR3CN	=	0x0091
                           000092   380 G$TMR3RLL$0$0 == 0x0092
                           000092   381 _TMR3RLL	=	0x0092
                           000093   382 G$TMR3RLH$0$0 == 0x0093
                           000093   383 _TMR3RLH	=	0x0093
                           000094   384 G$TMR3L$0$0 == 0x0094
                           000094   385 _TMR3L	=	0x0094
                           000095   386 G$TMR3H$0$0 == 0x0095
                           000095   387 _TMR3H	=	0x0095
                           000096   388 G$P7$0$0 == 0x0096
                           000096   389 _P7	=	0x0096
                           000098   390 G$SCON$0$0 == 0x0098
                           000098   391 _SCON	=	0x0098
                           000098   392 G$SCON0$0$0 == 0x0098
                           000098   393 _SCON0	=	0x0098
                           000099   394 G$SBUF$0$0 == 0x0099
                           000099   395 _SBUF	=	0x0099
                           000099   396 G$SBUF0$0$0 == 0x0099
                           000099   397 _SBUF0	=	0x0099
                           00009A   398 G$SPI0CFG$0$0 == 0x009a
                           00009A   399 _SPI0CFG	=	0x009a
                           00009B   400 G$SPI0DAT$0$0 == 0x009b
                           00009B   401 _SPI0DAT	=	0x009b
                           00009C   402 G$ADC1$0$0 == 0x009c
                           00009C   403 _ADC1	=	0x009c
                           00009D   404 G$SPI0CKR$0$0 == 0x009d
                           00009D   405 _SPI0CKR	=	0x009d
                           00009E   406 G$CPT0CN$0$0 == 0x009e
                           00009E   407 _CPT0CN	=	0x009e
                           00009F   408 G$CPT1CN$0$0 == 0x009f
                           00009F   409 _CPT1CN	=	0x009f
                           0000A0   410 G$P2$0$0 == 0x00a0
                           0000A0   411 _P2	=	0x00a0
                           0000A1   412 G$EMI0TC$0$0 == 0x00a1
                           0000A1   413 _EMI0TC	=	0x00a1
                           0000A3   414 G$EMI0CF$0$0 == 0x00a3
                           0000A3   415 _EMI0CF	=	0x00a3
                           0000A4   416 G$PRT0CF$0$0 == 0x00a4
                           0000A4   417 _PRT0CF	=	0x00a4
                           0000A4   418 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   419 _P0MDOUT	=	0x00a4
                           0000A5   420 G$PRT1CF$0$0 == 0x00a5
                           0000A5   421 _PRT1CF	=	0x00a5
                           0000A5   422 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   423 _P1MDOUT	=	0x00a5
                           0000A6   424 G$PRT2CF$0$0 == 0x00a6
                           0000A6   425 _PRT2CF	=	0x00a6
                           0000A6   426 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   427 _P2MDOUT	=	0x00a6
                           0000A7   428 G$PRT3CF$0$0 == 0x00a7
                           0000A7   429 _PRT3CF	=	0x00a7
                           0000A7   430 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   431 _P3MDOUT	=	0x00a7
                           0000A8   432 G$IE$0$0 == 0x00a8
                           0000A8   433 _IE	=	0x00a8
                           0000A9   434 G$SADDR0$0$0 == 0x00a9
                           0000A9   435 _SADDR0	=	0x00a9
                           0000AA   436 G$ADC1CN$0$0 == 0x00aa
                           0000AA   437 _ADC1CN	=	0x00aa
                           0000AB   438 G$ADC1CF$0$0 == 0x00ab
                           0000AB   439 _ADC1CF	=	0x00ab
                           0000AC   440 G$AMX1SL$0$0 == 0x00ac
                           0000AC   441 _AMX1SL	=	0x00ac
                           0000AD   442 G$P3IF$0$0 == 0x00ad
                           0000AD   443 _P3IF	=	0x00ad
                           0000AE   444 G$SADEN1$0$0 == 0x00ae
                           0000AE   445 _SADEN1	=	0x00ae
                           0000AF   446 G$EMI0CN$0$0 == 0x00af
                           0000AF   447 _EMI0CN	=	0x00af
                           0000AF   448 G$_XPAGE$0$0 == 0x00af
                           0000AF   449 __XPAGE	=	0x00af
                           0000B0   450 G$P3$0$0 == 0x00b0
                           0000B0   451 _P3	=	0x00b0
                           0000B1   452 G$OSCXCN$0$0 == 0x00b1
                           0000B1   453 _OSCXCN	=	0x00b1
                           0000B2   454 G$OSCICN$0$0 == 0x00b2
                           0000B2   455 _OSCICN	=	0x00b2
                           0000B5   456 G$P74OUT$0$0 == 0x00b5
                           0000B5   457 _P74OUT	=	0x00b5
                           0000B6   458 G$FLSCL$0$0 == 0x00b6
                           0000B6   459 _FLSCL	=	0x00b6
                           0000B7   460 G$FLACL$0$0 == 0x00b7
                           0000B7   461 _FLACL	=	0x00b7
                           0000B8   462 G$IP$0$0 == 0x00b8
                           0000B8   463 _IP	=	0x00b8
                           0000B9   464 G$SADEN0$0$0 == 0x00b9
                           0000B9   465 _SADEN0	=	0x00b9
                           0000BA   466 G$AMX0CF$0$0 == 0x00ba
                           0000BA   467 _AMX0CF	=	0x00ba
                           0000BB   468 G$AMX0SL$0$0 == 0x00bb
                           0000BB   469 _AMX0SL	=	0x00bb
                           0000BC   470 G$ADC0CF$0$0 == 0x00bc
                           0000BC   471 _ADC0CF	=	0x00bc
                           0000BD   472 G$P1MDIN$0$0 == 0x00bd
                           0000BD   473 _P1MDIN	=	0x00bd
                           0000BE   474 G$ADC0L$0$0 == 0x00be
                           0000BE   475 _ADC0L	=	0x00be
                           0000BF   476 G$ADC0H$0$0 == 0x00bf
                           0000BF   477 _ADC0H	=	0x00bf
                           0000C0   478 G$SMB0CN$0$0 == 0x00c0
                           0000C0   479 _SMB0CN	=	0x00c0
                           0000C1   480 G$SMB0STA$0$0 == 0x00c1
                           0000C1   481 _SMB0STA	=	0x00c1
                           0000C2   482 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   483 _SMB0DAT	=	0x00c2
                           0000C3   484 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   485 _SMB0ADR	=	0x00c3
                           0000C4   486 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   487 _ADC0GTL	=	0x00c4
                           0000C5   488 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   489 _ADC0GTH	=	0x00c5
                           0000C6   490 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   491 _ADC0LTL	=	0x00c6
                           0000C7   492 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   493 _ADC0LTH	=	0x00c7
                           0000C8   494 G$T2CON$0$0 == 0x00c8
                           0000C8   495 _T2CON	=	0x00c8
                           0000C9   496 G$T4CON$0$0 == 0x00c9
                           0000C9   497 _T4CON	=	0x00c9
                           0000CA   498 G$RCAP2L$0$0 == 0x00ca
                           0000CA   499 _RCAP2L	=	0x00ca
                           0000CB   500 G$RCAP2H$0$0 == 0x00cb
                           0000CB   501 _RCAP2H	=	0x00cb
                           0000CC   502 G$TL2$0$0 == 0x00cc
                           0000CC   503 _TL2	=	0x00cc
                           0000CD   504 G$TH2$0$0 == 0x00cd
                           0000CD   505 _TH2	=	0x00cd
                           0000CF   506 G$SMB0CR$0$0 == 0x00cf
                           0000CF   507 _SMB0CR	=	0x00cf
                           0000D0   508 G$PSW$0$0 == 0x00d0
                           0000D0   509 _PSW	=	0x00d0
                           0000D1   510 G$REF0CN$0$0 == 0x00d1
                           0000D1   511 _REF0CN	=	0x00d1
                           0000D2   512 G$DAC0L$0$0 == 0x00d2
                           0000D2   513 _DAC0L	=	0x00d2
                           0000D3   514 G$DAC0H$0$0 == 0x00d3
                           0000D3   515 _DAC0H	=	0x00d3
                           0000D4   516 G$DAC0CN$0$0 == 0x00d4
                           0000D4   517 _DAC0CN	=	0x00d4
                           0000D5   518 G$DAC1L$0$0 == 0x00d5
                           0000D5   519 _DAC1L	=	0x00d5
                           0000D6   520 G$DAC1H$0$0 == 0x00d6
                           0000D6   521 _DAC1H	=	0x00d6
                           0000D7   522 G$DAC1CN$0$0 == 0x00d7
                           0000D7   523 _DAC1CN	=	0x00d7
                           0000D8   524 G$PCA0CN$0$0 == 0x00d8
                           0000D8   525 _PCA0CN	=	0x00d8
                           0000D9   526 G$PCA0MD$0$0 == 0x00d9
                           0000D9   527 _PCA0MD	=	0x00d9
                           0000DA   528 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   529 _PCA0CPM0	=	0x00da
                           0000DB   530 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   531 _PCA0CPM1	=	0x00db
                           0000DC   532 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   533 _PCA0CPM2	=	0x00dc
                           0000DD   534 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   535 _PCA0CPM3	=	0x00dd
                           0000DE   536 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   537 _PCA0CPM4	=	0x00de
                           0000E0   538 G$ACC$0$0 == 0x00e0
                           0000E0   539 _ACC	=	0x00e0
                           0000E1   540 G$XBR0$0$0 == 0x00e1
                           0000E1   541 _XBR0	=	0x00e1
                           0000E2   542 G$XBR1$0$0 == 0x00e2
                           0000E2   543 _XBR1	=	0x00e2
                           0000E3   544 G$XBR2$0$0 == 0x00e3
                           0000E3   545 _XBR2	=	0x00e3
                           0000E4   546 G$RCAP4L$0$0 == 0x00e4
                           0000E4   547 _RCAP4L	=	0x00e4
                           0000E5   548 G$RCAP4H$0$0 == 0x00e5
                           0000E5   549 _RCAP4H	=	0x00e5
                           0000E6   550 G$EIE1$0$0 == 0x00e6
                           0000E6   551 _EIE1	=	0x00e6
                           0000E7   552 G$EIE2$0$0 == 0x00e7
                           0000E7   553 _EIE2	=	0x00e7
                           0000E8   554 G$ADC0CN$0$0 == 0x00e8
                           0000E8   555 _ADC0CN	=	0x00e8
                           0000E9   556 G$PCA0L$0$0 == 0x00e9
                           0000E9   557 _PCA0L	=	0x00e9
                           0000EA   558 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   559 _PCA0CPL0	=	0x00ea
                           0000EB   560 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   561 _PCA0CPL1	=	0x00eb
                           0000EC   562 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   563 _PCA0CPL2	=	0x00ec
                           0000ED   564 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   565 _PCA0CPL3	=	0x00ed
                           0000EE   566 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   567 _PCA0CPL4	=	0x00ee
                           0000EF   568 G$RSTSRC$0$0 == 0x00ef
                           0000EF   569 _RSTSRC	=	0x00ef
                           0000F0   570 G$B$0$0 == 0x00f0
                           0000F0   571 _B	=	0x00f0
                           0000F1   572 G$SCON1$0$0 == 0x00f1
                           0000F1   573 _SCON1	=	0x00f1
                           0000F2   574 G$SBUF1$0$0 == 0x00f2
                           0000F2   575 _SBUF1	=	0x00f2
                           0000F3   576 G$SADDR1$0$0 == 0x00f3
                           0000F3   577 _SADDR1	=	0x00f3
                           0000F4   578 G$TL4$0$0 == 0x00f4
                           0000F4   579 _TL4	=	0x00f4
                           0000F5   580 G$TH4$0$0 == 0x00f5
                           0000F5   581 _TH4	=	0x00f5
                           0000F6   582 G$EIP1$0$0 == 0x00f6
                           0000F6   583 _EIP1	=	0x00f6
                           0000F7   584 G$EIP2$0$0 == 0x00f7
                           0000F7   585 _EIP2	=	0x00f7
                           0000F8   586 G$SPI0CN$0$0 == 0x00f8
                           0000F8   587 _SPI0CN	=	0x00f8
                           0000F9   588 G$PCA0H$0$0 == 0x00f9
                           0000F9   589 _PCA0H	=	0x00f9
                           0000FA   590 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   591 _PCA0CPH0	=	0x00fa
                           0000FB   592 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   593 _PCA0CPH1	=	0x00fb
                           0000FC   594 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   595 _PCA0CPH2	=	0x00fc
                           0000FD   596 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   597 _PCA0CPH3	=	0x00fd
                           0000FE   598 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   599 _PCA0CPH4	=	0x00fe
                           0000FF   600 G$WDTCN$0$0 == 0x00ff
                           0000FF   601 _WDTCN	=	0x00ff
                           008C8A   602 G$TMR0$0$0 == 0x8c8a
                           008C8A   603 _TMR0	=	0x8c8a
                           008D8B   604 G$TMR1$0$0 == 0x8d8b
                           008D8B   605 _TMR1	=	0x8d8b
                           00CDCC   606 G$TMR2$0$0 == 0xcdcc
                           00CDCC   607 _TMR2	=	0xcdcc
                           00CBCA   608 G$RCAP2$0$0 == 0xcbca
                           00CBCA   609 _RCAP2	=	0xcbca
                           009594   610 G$TMR3$0$0 == 0x9594
                           009594   611 _TMR3	=	0x9594
                           009392   612 G$TMR3RL$0$0 == 0x9392
                           009392   613 _TMR3RL	=	0x9392
                           00F5F4   614 G$TMR4$0$0 == 0xf5f4
                           00F5F4   615 _TMR4	=	0xf5f4
                           00E5E4   616 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   617 _RCAP4	=	0xe5e4
                           00BFBE   618 G$ADC0$0$0 == 0xbfbe
                           00BFBE   619 _ADC0	=	0xbfbe
                           00C5C4   620 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   621 _ADC0GT	=	0xc5c4
                           00C7C6   622 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   623 _ADC0LT	=	0xc7c6
                           00D3D2   624 G$DAC0$0$0 == 0xd3d2
                           00D3D2   625 _DAC0	=	0xd3d2
                           00D6D5   626 G$DAC1$0$0 == 0xd6d5
                           00D6D5   627 _DAC1	=	0xd6d5
                           00F9E9   628 G$PCA0$0$0 == 0xf9e9
                           00F9E9   629 _PCA0	=	0xf9e9
                           00FAEA   630 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   631 _PCA0CP0	=	0xfaea
                           00FBEB   632 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   633 _PCA0CP1	=	0xfbeb
                           00FCEC   634 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   635 _PCA0CP2	=	0xfcec
                           00FDED   636 G$PCA0CP3$0$0 == 0xfded
                           00FDED   637 _PCA0CP3	=	0xfded
                           00FEEE   638 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   639 _PCA0CP4	=	0xfeee
                                    640 ;--------------------------------------------------------
                                    641 ; special function bits
                                    642 ;--------------------------------------------------------
                                    643 	.area RSEG    (ABS,DATA)
      000000                        644 	.org 0x0000
                           000080   645 G$P0_0$0$0 == 0x0080
                           000080   646 _P0_0	=	0x0080
                           000081   647 G$P0_1$0$0 == 0x0081
                           000081   648 _P0_1	=	0x0081
                           000082   649 G$P0_2$0$0 == 0x0082
                           000082   650 _P0_2	=	0x0082
                           000083   651 G$P0_3$0$0 == 0x0083
                           000083   652 _P0_3	=	0x0083
                           000084   653 G$P0_4$0$0 == 0x0084
                           000084   654 _P0_4	=	0x0084
                           000085   655 G$P0_5$0$0 == 0x0085
                           000085   656 _P0_5	=	0x0085
                           000086   657 G$P0_6$0$0 == 0x0086
                           000086   658 _P0_6	=	0x0086
                           000087   659 G$P0_7$0$0 == 0x0087
                           000087   660 _P0_7	=	0x0087
                           000088   661 G$IT0$0$0 == 0x0088
                           000088   662 _IT0	=	0x0088
                           000089   663 G$IE0$0$0 == 0x0089
                           000089   664 _IE0	=	0x0089
                           00008A   665 G$IT1$0$0 == 0x008a
                           00008A   666 _IT1	=	0x008a
                           00008B   667 G$IE1$0$0 == 0x008b
                           00008B   668 _IE1	=	0x008b
                           00008C   669 G$TR0$0$0 == 0x008c
                           00008C   670 _TR0	=	0x008c
                           00008D   671 G$TF0$0$0 == 0x008d
                           00008D   672 _TF0	=	0x008d
                           00008E   673 G$TR1$0$0 == 0x008e
                           00008E   674 _TR1	=	0x008e
                           00008F   675 G$TF1$0$0 == 0x008f
                           00008F   676 _TF1	=	0x008f
                           000090   677 G$P1_0$0$0 == 0x0090
                           000090   678 _P1_0	=	0x0090
                           000091   679 G$P1_1$0$0 == 0x0091
                           000091   680 _P1_1	=	0x0091
                           000092   681 G$P1_2$0$0 == 0x0092
                           000092   682 _P1_2	=	0x0092
                           000093   683 G$P1_3$0$0 == 0x0093
                           000093   684 _P1_3	=	0x0093
                           000094   685 G$P1_4$0$0 == 0x0094
                           000094   686 _P1_4	=	0x0094
                           000095   687 G$P1_5$0$0 == 0x0095
                           000095   688 _P1_5	=	0x0095
                           000096   689 G$P1_6$0$0 == 0x0096
                           000096   690 _P1_6	=	0x0096
                           000097   691 G$P1_7$0$0 == 0x0097
                           000097   692 _P1_7	=	0x0097
                           000098   693 G$RI$0$0 == 0x0098
                           000098   694 _RI	=	0x0098
                           000098   695 G$RI0$0$0 == 0x0098
                           000098   696 _RI0	=	0x0098
                           000099   697 G$TI$0$0 == 0x0099
                           000099   698 _TI	=	0x0099
                           000099   699 G$TI0$0$0 == 0x0099
                           000099   700 _TI0	=	0x0099
                           00009A   701 G$RB8$0$0 == 0x009a
                           00009A   702 _RB8	=	0x009a
                           00009A   703 G$RB80$0$0 == 0x009a
                           00009A   704 _RB80	=	0x009a
                           00009B   705 G$TB8$0$0 == 0x009b
                           00009B   706 _TB8	=	0x009b
                           00009B   707 G$TB80$0$0 == 0x009b
                           00009B   708 _TB80	=	0x009b
                           00009C   709 G$REN$0$0 == 0x009c
                           00009C   710 _REN	=	0x009c
                           00009C   711 G$REN0$0$0 == 0x009c
                           00009C   712 _REN0	=	0x009c
                           00009D   713 G$SM2$0$0 == 0x009d
                           00009D   714 _SM2	=	0x009d
                           00009D   715 G$SM20$0$0 == 0x009d
                           00009D   716 _SM20	=	0x009d
                           00009D   717 G$MCE0$0$0 == 0x009d
                           00009D   718 _MCE0	=	0x009d
                           00009E   719 G$SM1$0$0 == 0x009e
                           00009E   720 _SM1	=	0x009e
                           00009E   721 G$SM10$0$0 == 0x009e
                           00009E   722 _SM10	=	0x009e
                           00009F   723 G$SM0$0$0 == 0x009f
                           00009F   724 _SM0	=	0x009f
                           00009F   725 G$SM00$0$0 == 0x009f
                           00009F   726 _SM00	=	0x009f
                           00009F   727 G$S0MODE$0$0 == 0x009f
                           00009F   728 _S0MODE	=	0x009f
                           0000A0   729 G$P2_0$0$0 == 0x00a0
                           0000A0   730 _P2_0	=	0x00a0
                           0000A1   731 G$P2_1$0$0 == 0x00a1
                           0000A1   732 _P2_1	=	0x00a1
                           0000A2   733 G$P2_2$0$0 == 0x00a2
                           0000A2   734 _P2_2	=	0x00a2
                           0000A3   735 G$P2_3$0$0 == 0x00a3
                           0000A3   736 _P2_3	=	0x00a3
                           0000A4   737 G$P2_4$0$0 == 0x00a4
                           0000A4   738 _P2_4	=	0x00a4
                           0000A5   739 G$P2_5$0$0 == 0x00a5
                           0000A5   740 _P2_5	=	0x00a5
                           0000A6   741 G$P2_6$0$0 == 0x00a6
                           0000A6   742 _P2_6	=	0x00a6
                           0000A7   743 G$P2_7$0$0 == 0x00a7
                           0000A7   744 _P2_7	=	0x00a7
                           0000A8   745 G$EX0$0$0 == 0x00a8
                           0000A8   746 _EX0	=	0x00a8
                           0000A9   747 G$ET0$0$0 == 0x00a9
                           0000A9   748 _ET0	=	0x00a9
                           0000AA   749 G$EX1$0$0 == 0x00aa
                           0000AA   750 _EX1	=	0x00aa
                           0000AB   751 G$ET1$0$0 == 0x00ab
                           0000AB   752 _ET1	=	0x00ab
                           0000AC   753 G$ES0$0$0 == 0x00ac
                           0000AC   754 _ES0	=	0x00ac
                           0000AC   755 G$ES$0$0 == 0x00ac
                           0000AC   756 _ES	=	0x00ac
                           0000AD   757 G$ET2$0$0 == 0x00ad
                           0000AD   758 _ET2	=	0x00ad
                           0000AF   759 G$EA$0$0 == 0x00af
                           0000AF   760 _EA	=	0x00af
                           0000B0   761 G$P3_0$0$0 == 0x00b0
                           0000B0   762 _P3_0	=	0x00b0
                           0000B1   763 G$P3_1$0$0 == 0x00b1
                           0000B1   764 _P3_1	=	0x00b1
                           0000B2   765 G$P3_2$0$0 == 0x00b2
                           0000B2   766 _P3_2	=	0x00b2
                           0000B3   767 G$P3_3$0$0 == 0x00b3
                           0000B3   768 _P3_3	=	0x00b3
                           0000B4   769 G$P3_4$0$0 == 0x00b4
                           0000B4   770 _P3_4	=	0x00b4
                           0000B5   771 G$P3_5$0$0 == 0x00b5
                           0000B5   772 _P3_5	=	0x00b5
                           0000B6   773 G$P3_6$0$0 == 0x00b6
                           0000B6   774 _P3_6	=	0x00b6
                           0000B7   775 G$P3_7$0$0 == 0x00b7
                           0000B7   776 _P3_7	=	0x00b7
                           0000B8   777 G$PX0$0$0 == 0x00b8
                           0000B8   778 _PX0	=	0x00b8
                           0000B9   779 G$PT0$0$0 == 0x00b9
                           0000B9   780 _PT0	=	0x00b9
                           0000BA   781 G$PX1$0$0 == 0x00ba
                           0000BA   782 _PX1	=	0x00ba
                           0000BB   783 G$PT1$0$0 == 0x00bb
                           0000BB   784 _PT1	=	0x00bb
                           0000BC   785 G$PS0$0$0 == 0x00bc
                           0000BC   786 _PS0	=	0x00bc
                           0000BC   787 G$PS$0$0 == 0x00bc
                           0000BC   788 _PS	=	0x00bc
                           0000BD   789 G$PT2$0$0 == 0x00bd
                           0000BD   790 _PT2	=	0x00bd
                           0000C0   791 G$SMBTOE$0$0 == 0x00c0
                           0000C0   792 _SMBTOE	=	0x00c0
                           0000C1   793 G$SMBFTE$0$0 == 0x00c1
                           0000C1   794 _SMBFTE	=	0x00c1
                           0000C2   795 G$AA$0$0 == 0x00c2
                           0000C2   796 _AA	=	0x00c2
                           0000C3   797 G$SI$0$0 == 0x00c3
                           0000C3   798 _SI	=	0x00c3
                           0000C4   799 G$STO$0$0 == 0x00c4
                           0000C4   800 _STO	=	0x00c4
                           0000C5   801 G$STA$0$0 == 0x00c5
                           0000C5   802 _STA	=	0x00c5
                           0000C6   803 G$ENSMB$0$0 == 0x00c6
                           0000C6   804 _ENSMB	=	0x00c6
                           0000C7   805 G$BUSY$0$0 == 0x00c7
                           0000C7   806 _BUSY	=	0x00c7
                           0000C8   807 G$CPRL2$0$0 == 0x00c8
                           0000C8   808 _CPRL2	=	0x00c8
                           0000C9   809 G$CT2$0$0 == 0x00c9
                           0000C9   810 _CT2	=	0x00c9
                           0000CA   811 G$TR2$0$0 == 0x00ca
                           0000CA   812 _TR2	=	0x00ca
                           0000CB   813 G$EXEN2$0$0 == 0x00cb
                           0000CB   814 _EXEN2	=	0x00cb
                           0000CC   815 G$TCLK$0$0 == 0x00cc
                           0000CC   816 _TCLK	=	0x00cc
                           0000CD   817 G$RCLK$0$0 == 0x00cd
                           0000CD   818 _RCLK	=	0x00cd
                           0000CE   819 G$EXF2$0$0 == 0x00ce
                           0000CE   820 _EXF2	=	0x00ce
                           0000CF   821 G$TF2$0$0 == 0x00cf
                           0000CF   822 _TF2	=	0x00cf
                           0000D0   823 G$P$0$0 == 0x00d0
                           0000D0   824 _P	=	0x00d0
                           0000D1   825 G$F1$0$0 == 0x00d1
                           0000D1   826 _F1	=	0x00d1
                           0000D2   827 G$OV$0$0 == 0x00d2
                           0000D2   828 _OV	=	0x00d2
                           0000D3   829 G$RS0$0$0 == 0x00d3
                           0000D3   830 _RS0	=	0x00d3
                           0000D4   831 G$RS1$0$0 == 0x00d4
                           0000D4   832 _RS1	=	0x00d4
                           0000D5   833 G$F0$0$0 == 0x00d5
                           0000D5   834 _F0	=	0x00d5
                           0000D6   835 G$AC$0$0 == 0x00d6
                           0000D6   836 _AC	=	0x00d6
                           0000D7   837 G$CY$0$0 == 0x00d7
                           0000D7   838 _CY	=	0x00d7
                           0000D8   839 G$CCF0$0$0 == 0x00d8
                           0000D8   840 _CCF0	=	0x00d8
                           0000D9   841 G$CCF1$0$0 == 0x00d9
                           0000D9   842 _CCF1	=	0x00d9
                           0000DA   843 G$CCF2$0$0 == 0x00da
                           0000DA   844 _CCF2	=	0x00da
                           0000DB   845 G$CCF3$0$0 == 0x00db
                           0000DB   846 _CCF3	=	0x00db
                           0000DC   847 G$CCF4$0$0 == 0x00dc
                           0000DC   848 _CCF4	=	0x00dc
                           0000DE   849 G$CR$0$0 == 0x00de
                           0000DE   850 _CR	=	0x00de
                           0000DF   851 G$CF$0$0 == 0x00df
                           0000DF   852 _CF	=	0x00df
                           0000E8   853 G$ADLJST$0$0 == 0x00e8
                           0000E8   854 _ADLJST	=	0x00e8
                           0000E8   855 G$AD0LJST$0$0 == 0x00e8
                           0000E8   856 _AD0LJST	=	0x00e8
                           0000E9   857 G$ADWINT$0$0 == 0x00e9
                           0000E9   858 _ADWINT	=	0x00e9
                           0000E9   859 G$AD0WINT$0$0 == 0x00e9
                           0000E9   860 _AD0WINT	=	0x00e9
                           0000EA   861 G$ADSTM0$0$0 == 0x00ea
                           0000EA   862 _ADSTM0	=	0x00ea
                           0000EA   863 G$AD0CM0$0$0 == 0x00ea
                           0000EA   864 _AD0CM0	=	0x00ea
                           0000EB   865 G$ADSTM1$0$0 == 0x00eb
                           0000EB   866 _ADSTM1	=	0x00eb
                           0000EB   867 G$AD0CM1$0$0 == 0x00eb
                           0000EB   868 _AD0CM1	=	0x00eb
                           0000EC   869 G$ADBUSY$0$0 == 0x00ec
                           0000EC   870 _ADBUSY	=	0x00ec
                           0000EC   871 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   872 _AD0BUSY	=	0x00ec
                           0000ED   873 G$ADCINT$0$0 == 0x00ed
                           0000ED   874 _ADCINT	=	0x00ed
                           0000ED   875 G$AD0INT$0$0 == 0x00ed
                           0000ED   876 _AD0INT	=	0x00ed
                           0000EE   877 G$ADCTM$0$0 == 0x00ee
                           0000EE   878 _ADCTM	=	0x00ee
                           0000EE   879 G$AD0TM$0$0 == 0x00ee
                           0000EE   880 _AD0TM	=	0x00ee
                           0000EF   881 G$ADCEN$0$0 == 0x00ef
                           0000EF   882 _ADCEN	=	0x00ef
                           0000EF   883 G$AD0EN$0$0 == 0x00ef
                           0000EF   884 _AD0EN	=	0x00ef
                           0000F8   885 G$SPIEN$0$0 == 0x00f8
                           0000F8   886 _SPIEN	=	0x00f8
                           0000F9   887 G$MSTEN$0$0 == 0x00f9
                           0000F9   888 _MSTEN	=	0x00f9
                           0000FA   889 G$SLVSEL$0$0 == 0x00fa
                           0000FA   890 _SLVSEL	=	0x00fa
                           0000FB   891 G$TXBSY$0$0 == 0x00fb
                           0000FB   892 _TXBSY	=	0x00fb
                           0000FC   893 G$RXOVRN$0$0 == 0x00fc
                           0000FC   894 _RXOVRN	=	0x00fc
                           0000FD   895 G$MODF$0$0 == 0x00fd
                           0000FD   896 _MODF	=	0x00fd
                           0000FE   897 G$WCOL$0$0 == 0x00fe
                           0000FE   898 _WCOL	=	0x00fe
                           0000FF   899 G$SPIF$0$0 == 0x00ff
                           0000FF   900 _SPIF	=	0x00ff
                           0000C7   901 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   902 _BUS_BUSY	=	0x00c7
                           0000C6   903 G$BUS_EN$0$0 == 0x00c6
                           0000C6   904 _BUS_EN	=	0x00c6
                           0000C5   905 G$BUS_START$0$0 == 0x00c5
                           0000C5   906 _BUS_START	=	0x00c5
                           0000C4   907 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   908 _BUS_STOP	=	0x00c4
                           0000C3   909 G$BUS_INT$0$0 == 0x00c3
                           0000C3   910 _BUS_INT	=	0x00c3
                           0000C2   911 G$BUS_AA$0$0 == 0x00c2
                           0000C2   912 _BUS_AA	=	0x00c2
                           0000C1   913 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   914 _BUS_FTE	=	0x00c1
                           0000C0   915 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   916 _BUS_TOE	=	0x00c0
                           000083   917 G$BUS_SCL$0$0 == 0x0083
                           000083   918 _BUS_SCL	=	0x0083
                                    919 ;--------------------------------------------------------
                                    920 ; overlayable register banks
                                    921 ;--------------------------------------------------------
                                    922 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        923 	.ds 8
                                    924 ;--------------------------------------------------------
                                    925 ; internal ram data
                                    926 ;--------------------------------------------------------
                                    927 	.area DSEG    (DATA)
                           000000   928 G$Data2$0$0==.
      000000                        929 _Data2::
      000000                        930 	.ds 3
                           000003   931 LLab3_2_SteeringCalibration.aligned_alloc$size$1$39==.
      000003                        932 _aligned_alloc_PARM_2:
      000003                        933 	.ds 2
                           000005   934 LLab3_2_SteeringCalibration.lcd_clear$NumBytes$1$85==.
      000005                        935 _lcd_clear_NumBytes_1_85:
      000005                        936 	.ds 1
                           000006   937 LLab3_2_SteeringCalibration.lcd_clear$Cmd$1$85==.
      000006                        938 _lcd_clear_Cmd_1_85:
      000006                        939 	.ds 2
                           000008   940 LLab3_2_SteeringCalibration.read_keypad$Data$1$86==.
      000008                        941 _read_keypad_Data_1_86:
      000008                        942 	.ds 2
                           00000A   943 LLab3_2_SteeringCalibration.i2c_write_data$start_reg$1$105==.
      00000A                        944 _i2c_write_data_PARM_2:
      00000A                        945 	.ds 1
                           00000B   946 LLab3_2_SteeringCalibration.i2c_write_data$buffer$1$105==.
      00000B                        947 _i2c_write_data_PARM_3:
      00000B                        948 	.ds 3
                           00000E   949 LLab3_2_SteeringCalibration.i2c_write_data$num_bytes$1$105==.
      00000E                        950 _i2c_write_data_PARM_4:
      00000E                        951 	.ds 1
                           00000F   952 LLab3_2_SteeringCalibration.i2c_read_data$start_reg$1$107==.
      00000F                        953 _i2c_read_data_PARM_2:
      00000F                        954 	.ds 1
                           000010   955 LLab3_2_SteeringCalibration.i2c_read_data$buffer$1$107==.
      000010                        956 _i2c_read_data_PARM_3:
      000010                        957 	.ds 3
                           000013   958 LLab3_2_SteeringCalibration.i2c_read_data$num_bytes$1$107==.
      000013                        959 _i2c_read_data_PARM_4:
      000013                        960 	.ds 1
                           000014   961 G$PW_CENTER$0$0==.
      000014                        962 _PW_CENTER::
      000014                        963 	.ds 2
                           000016   964 G$PW_RIGHT$0$0==.
      000016                        965 _PW_RIGHT::
      000016                        966 	.ds 2
                           000018   967 G$PW_LEFT$0$0==.
      000018                        968 _PW_LEFT::
      000018                        969 	.ds 2
                           00001A   970 G$SERVO_PW$0$0==.
      00001A                        971 _SERVO_PW::
      00001A                        972 	.ds 2
                                    973 ;--------------------------------------------------------
                                    974 ; overlayable items in internal ram 
                                    975 ;--------------------------------------------------------
                                    976 	.area	OSEG    (OVR,DATA)
                                    977 	.area	OSEG    (OVR,DATA)
                                    978 	.area	OSEG    (OVR,DATA)
                                    979 	.area	OSEG    (OVR,DATA)
                                    980 	.area	OSEG    (OVR,DATA)
                                    981 	.area	OSEG    (OVR,DATA)
                                    982 	.area	OSEG    (OVR,DATA)
                                    983 ;--------------------------------------------------------
                                    984 ; Stack segment in internal ram 
                                    985 ;--------------------------------------------------------
                                    986 	.area	SSEG
      000000                        987 __start__stack:
      000000                        988 	.ds	1
                                    989 
                                    990 ;--------------------------------------------------------
                                    991 ; indirectly addressable internal ram data
                                    992 ;--------------------------------------------------------
                                    993 	.area ISEG    (DATA)
                                    994 ;--------------------------------------------------------
                                    995 ; absolute internal ram data
                                    996 ;--------------------------------------------------------
                                    997 	.area IABS    (ABS,DATA)
                                    998 	.area IABS    (ABS,DATA)
                                    999 ;--------------------------------------------------------
                                   1000 ; bit data
                                   1001 ;--------------------------------------------------------
                                   1002 	.area BSEG    (BIT)
                                   1003 ;--------------------------------------------------------
                                   1004 ; paged external ram data
                                   1005 ;--------------------------------------------------------
                                   1006 	.area PSEG    (PAG,XDATA)
                                   1007 ;--------------------------------------------------------
                                   1008 ; external ram data
                                   1009 ;--------------------------------------------------------
                                   1010 	.area XSEG    (XDATA)
                           000000  1011 LLab3_2_SteeringCalibration.lcd_print$text$1$81==.
      000000                       1012 _lcd_print_text_1_81:
      000000                       1013 	.ds 80
                                   1014 ;--------------------------------------------------------
                                   1015 ; absolute external ram data
                                   1016 ;--------------------------------------------------------
                                   1017 	.area XABS    (ABS,XDATA)
                                   1018 ;--------------------------------------------------------
                                   1019 ; external initialized ram data
                                   1020 ;--------------------------------------------------------
                                   1021 	.area XISEG   (XDATA)
                                   1022 	.area HOME    (CODE)
                                   1023 	.area GSINIT0 (CODE)
                                   1024 	.area GSINIT1 (CODE)
                                   1025 	.area GSINIT2 (CODE)
                                   1026 	.area GSINIT3 (CODE)
                                   1027 	.area GSINIT4 (CODE)
                                   1028 	.area GSINIT5 (CODE)
                                   1029 	.area GSINIT  (CODE)
                                   1030 	.area GSFINAL (CODE)
                                   1031 	.area CSEG    (CODE)
                                   1032 ;--------------------------------------------------------
                                   1033 ; interrupt vector 
                                   1034 ;--------------------------------------------------------
                                   1035 	.area HOME    (CODE)
      000000                       1036 __interrupt_vect:
      000000 02r00r00         [24] 1037 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1038 	reti
      000004                       1039 	.ds	7
      00000B 32               [24] 1040 	reti
      00000C                       1041 	.ds	7
      000013 32               [24] 1042 	reti
      000014                       1043 	.ds	7
      00001B 32               [24] 1044 	reti
      00001C                       1045 	.ds	7
      000023 32               [24] 1046 	reti
      000024                       1047 	.ds	7
      00002B 32               [24] 1048 	reti
      00002C                       1049 	.ds	7
      000033 32               [24] 1050 	reti
      000034                       1051 	.ds	7
      00003B 32               [24] 1052 	reti
      00003C                       1053 	.ds	7
      000043 32               [24] 1054 	reti
      000044                       1055 	.ds	7
      00004B 02r05r53         [24] 1056 	ljmp	_PCA_ISR
                                   1057 ;--------------------------------------------------------
                                   1058 ; global & static initialisations
                                   1059 ;--------------------------------------------------------
                                   1060 	.area HOME    (CODE)
                                   1061 	.area GSINIT  (CODE)
                                   1062 	.area GSFINAL (CODE)
                                   1063 	.area GSINIT  (CODE)
                                   1064 	.globl __sdcc_gsinit_startup
                                   1065 	.globl __sdcc_program_startup
                                   1066 	.globl __start__stack
                                   1067 	.globl __mcs51_genXINIT
                                   1068 	.globl __mcs51_genXRAMCLEAR
                                   1069 	.globl __mcs51_genRAMCLEAR
                           000000  1070 	C$Lab3_2_SteeringCalibration.c$19$1$138 ==.
                                   1071 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:19: unsigned int SERVO_PW = 0;
      000000 E4               [12] 1072 	clr	a
      000001 F5*1A            [12] 1073 	mov	_SERVO_PW,a
      000003 F5*1B            [12] 1074 	mov	(_SERVO_PW + 1),a
                                   1075 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1076 	ljmp	__sdcc_program_startup
                                   1077 ;--------------------------------------------------------
                                   1078 ; Home
                                   1079 ;--------------------------------------------------------
                                   1080 	.area HOME    (CODE)
                                   1081 	.area HOME    (CODE)
      00004E                       1082 __sdcc_program_startup:
      00004E 02r05r06         [24] 1083 	ljmp	_main
                                   1084 ;	return from main will return to caller
                                   1085 ;--------------------------------------------------------
                                   1086 ; code
                                   1087 ;--------------------------------------------------------
                                   1088 	.area CSEG    (CODE)
                                   1089 ;------------------------------------------------------------
                                   1090 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1091 ;------------------------------------------------------------
                                   1092 ;i                         Allocated to registers r6 r7 
                                   1093 ;------------------------------------------------------------
                           000000  1094 	G$SYSCLK_Init$0$0 ==.
                           000000  1095 	C$c8051_SDCC.h$62$0$0 ==.
                                   1096 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:62: void SYSCLK_Init(void)
                                   1097 ;	-----------------------------------------
                                   1098 ;	 function SYSCLK_Init
                                   1099 ;	-----------------------------------------
      000000                       1100 _SYSCLK_Init:
                           000007  1101 	ar7 = 0x07
                           000006  1102 	ar6 = 0x06
                           000005  1103 	ar5 = 0x05
                           000004  1104 	ar4 = 0x04
                           000003  1105 	ar3 = 0x03
                           000002  1106 	ar2 = 0x02
                           000001  1107 	ar1 = 0x01
                           000000  1108 	ar0 = 0x00
                           000000  1109 	C$c8051_SDCC.h$66$1$2 ==.
                                   1110 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1111 	mov	_OSCXCN,#0x67
                           000003  1112 	C$c8051_SDCC.h$69$1$2 ==.
                                   1113 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1114 	mov	r6,#0x00
      000005 7F 01            [12] 1115 	mov	r7,#0x01
      000007                       1116 00107$:
      000007 EE               [12] 1117 	mov	a,r6
      000008 24 FF            [12] 1118 	add	a,#0xff
      00000A FC               [12] 1119 	mov	r4,a
      00000B EF               [12] 1120 	mov	a,r7
      00000C 34 FF            [12] 1121 	addc	a,#0xff
      00000E FD               [12] 1122 	mov	r5,a
      00000F 8C 06            [24] 1123 	mov	ar6,r4
      000011 8D 07            [24] 1124 	mov	ar7,r5
      000013 EC               [12] 1125 	mov	a,r4
      000014 4D               [12] 1126 	orl	a,r5
      000015 70 F0            [24] 1127 	jnz	00107$
                           000017  1128 	C$c8051_SDCC.h$71$1$2 ==.
                                   1129 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1130 00102$:
      000017 E5 B1            [12] 1131 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1132 	jnb	acc.7,00102$
                           00001C  1133 	C$c8051_SDCC.h$73$1$2 ==.
                                   1134 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1135 	mov	_OSCICN,#0x88
                           00001F  1136 	C$c8051_SDCC.h$76$1$2 ==.
                           00001F  1137 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1138 	ret
                                   1139 ;------------------------------------------------------------
                                   1140 ;Allocation info for local variables in function 'UART0_Init'
                                   1141 ;------------------------------------------------------------
                           000020  1142 	G$UART0_Init$0$0 ==.
                           000020  1143 	C$c8051_SDCC.h$84$1$2 ==.
                                   1144 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:84: void UART0_Init(void)
                                   1145 ;	-----------------------------------------
                                   1146 ;	 function UART0_Init
                                   1147 ;	-----------------------------------------
      000020                       1148 _UART0_Init:
                           000020  1149 	C$c8051_SDCC.h$86$1$4 ==.
                                   1150 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1151 	mov	_SCON0,#0x50
                           000023  1152 	C$c8051_SDCC.h$87$1$4 ==.
                                   1153 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:87: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1154 	mov	_TMOD,#0x20
                           000026  1155 	C$c8051_SDCC.h$88$1$4 ==.
                                   1156 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1157 	mov	_TH1,#0xdc
                           000029  1158 	C$c8051_SDCC.h$89$1$4 ==.
                                   1159 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1160 	setb	_TR1
                           00002B  1161 	C$c8051_SDCC.h$90$1$4 ==.
                                   1162 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:90: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1163 	orl	_CKCON,#0x10
                           00002E  1164 	C$c8051_SDCC.h$91$1$4 ==.
                                   1165 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1166 	orl	_PCON,#0x80
                           000031  1167 	C$c8051_SDCC.h$93$1$4 ==.
                                   1168 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:93: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1169 	setb	_TI0
                           000033  1170 	C$c8051_SDCC.h$94$1$4 ==.
                                   1171 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:94: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1172 	orl	_P0MDOUT,#0x01
                           000036  1173 	C$c8051_SDCC.h$95$1$4 ==.
                           000036  1174 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1175 	ret
                                   1176 ;------------------------------------------------------------
                                   1177 ;Allocation info for local variables in function 'Sys_Init'
                                   1178 ;------------------------------------------------------------
                           000037  1179 	G$Sys_Init$0$0 ==.
                           000037  1180 	C$c8051_SDCC.h$103$1$4 ==.
                                   1181 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:103: void Sys_Init(void)
                                   1182 ;	-----------------------------------------
                                   1183 ;	 function Sys_Init
                                   1184 ;	-----------------------------------------
      000037                       1185 _Sys_Init:
                           000037  1186 	C$c8051_SDCC.h$105$1$6 ==.
                                   1187 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:105: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1188 	mov	_WDTCN,#0xde
                           00003A  1189 	C$c8051_SDCC.h$106$1$6 ==.
                                   1190 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:106: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1191 	mov	_WDTCN,#0xad
                           00003D  1192 	C$c8051_SDCC.h$108$1$6 ==.
                                   1193 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1194 	lcall	_SYSCLK_Init
                           000040  1195 	C$c8051_SDCC.h$109$1$6 ==.
                                   1196 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:109: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1197 	lcall	_UART0_Init
                           000043  1198 	C$c8051_SDCC.h$111$1$6 ==.
                                   1199 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1200 	orl	_XBR0,#0x04
                           000046  1201 	C$c8051_SDCC.h$112$1$6 ==.
                                   1202 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1203 	orl	_XBR2,#0x40
                           000049  1204 	C$c8051_SDCC.h$113$1$6 ==.
                           000049  1205 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1206 	ret
                                   1207 ;------------------------------------------------------------
                                   1208 ;Allocation info for local variables in function 'putchar'
                                   1209 ;------------------------------------------------------------
                                   1210 ;c                         Allocated to registers r7 
                                   1211 ;------------------------------------------------------------
                           00004A  1212 	G$putchar$0$0 ==.
                           00004A  1213 	C$c8051_SDCC.h$129$1$6 ==.
                                   1214 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: void putchar(char c)
                                   1215 ;	-----------------------------------------
                                   1216 ;	 function putchar
                                   1217 ;	-----------------------------------------
      00004A                       1218 _putchar:
      00004A AF 82            [24] 1219 	mov	r7,dpl
                           00004C  1220 	C$c8051_SDCC.h$132$1$8 ==.
                                   1221 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:132: while (!TI0); 
      00004C                       1222 00101$:
                           00004C  1223 	C$c8051_SDCC.h$133$1$8 ==.
                                   1224 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:133: TI0 = 0;
      00004C 10 99 02         [24] 1225 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1226 	sjmp	00101$
      000051                       1227 00112$:
                           000051  1228 	C$c8051_SDCC.h$134$1$8 ==.
                                   1229 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:134: SBUF0 = c;
      000051 8F 99            [24] 1230 	mov	_SBUF0,r7
                           000053  1231 	C$c8051_SDCC.h$135$1$8 ==.
                           000053  1232 	XG$putchar$0$0 ==.
      000053 22               [24] 1233 	ret
                                   1234 ;------------------------------------------------------------
                                   1235 ;Allocation info for local variables in function 'getchar'
                                   1236 ;------------------------------------------------------------
                                   1237 ;c                         Allocated to registers r7 
                                   1238 ;------------------------------------------------------------
                           000054  1239 	G$getchar$0$0 ==.
                           000054  1240 	C$c8051_SDCC.h$154$1$8 ==.
                                   1241 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:154: char getchar(void)
                                   1242 ;	-----------------------------------------
                                   1243 ;	 function getchar
                                   1244 ;	-----------------------------------------
      000054                       1245 _getchar:
                           000054  1246 	C$c8051_SDCC.h$157$1$10 ==.
                                   1247 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:157: while (!RI0);
      000054                       1248 00101$:
                           000054  1249 	C$c8051_SDCC.h$158$1$10 ==.
                                   1250 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:158: RI0 = 0;
      000054 10 98 02         [24] 1251 	jbc	_RI0,00112$
      000057 80 FB            [24] 1252 	sjmp	00101$
      000059                       1253 00112$:
                           000059  1254 	C$c8051_SDCC.h$159$1$10 ==.
                                   1255 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:159: c = SBUF0;
      000059 AF 99            [24] 1256 	mov	r7,_SBUF0
                           00005B  1257 	C$c8051_SDCC.h$160$1$10 ==.
                                   1258 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:160: putchar(c);                          // echo to terminal
      00005B 8F 82            [24] 1259 	mov	dpl,r7
      00005D C0 07            [24] 1260 	push	ar7
      00005F 12r00r4A         [24] 1261 	lcall	_putchar
      000062 D0 07            [24] 1262 	pop	ar7
                           000064  1263 	C$c8051_SDCC.h$161$1$10 ==.
                                   1264 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:161: return c;
      000064 8F 82            [24] 1265 	mov	dpl,r7
                           000066  1266 	C$c8051_SDCC.h$162$1$10 ==.
                           000066  1267 	XG$getchar$0$0 ==.
      000066 22               [24] 1268 	ret
                                   1269 ;------------------------------------------------------------
                                   1270 ;Allocation info for local variables in function 'getchar_nw'
                                   1271 ;------------------------------------------------------------
                                   1272 ;c                         Allocated to registers 
                                   1273 ;------------------------------------------------------------
                           000067  1274 	G$getchar_nw$0$0 ==.
                           000067  1275 	C$c8051_SDCC.h$168$1$10 ==.
                                   1276 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:168: char getchar_nw(void)
                                   1277 ;	-----------------------------------------
                                   1278 ;	 function getchar_nw
                                   1279 ;	-----------------------------------------
      000067                       1280 _getchar_nw:
                           000067  1281 	C$c8051_SDCC.h$171$1$12 ==.
                                   1282 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:171: if (!RI0) return 0xFF;
      000067 20 98 05         [24] 1283 	jb	_RI0,00102$
      00006A 75 82 FF         [24] 1284 	mov	dpl,#0xff
      00006D 80 0B            [24] 1285 	sjmp	00104$
      00006F                       1286 00102$:
                           00006F  1287 	C$c8051_SDCC.h$174$2$13 ==.
                                   1288 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:174: RI0 = 0;
      00006F C2 98            [12] 1289 	clr	_RI0
                           000071  1290 	C$c8051_SDCC.h$175$2$13 ==.
                                   1291 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:175: c = SBUF0;
      000071 85 99 82         [24] 1292 	mov	dpl,_SBUF0
                           000074  1293 	C$c8051_SDCC.h$176$2$13 ==.
                                   1294 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:176: putchar(c);                          // echo to terminal
      000074 12r00r4A         [24] 1295 	lcall	_putchar
                           000077  1296 	C$c8051_SDCC.h$177$2$13 ==.
                                   1297 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:177: return SBUF0;
      000077 85 99 82         [24] 1298 	mov	dpl,_SBUF0
      00007A                       1299 00104$:
                           00007A  1300 	C$c8051_SDCC.h$179$1$12 ==.
                           00007A  1301 	XG$getchar_nw$0$0 ==.
      00007A 22               [24] 1302 	ret
                                   1303 ;------------------------------------------------------------
                                   1304 ;Allocation info for local variables in function 'lcd_print'
                                   1305 ;------------------------------------------------------------
                                   1306 ;fmt                       Allocated to stack - _bp -5
                                   1307 ;len                       Allocated to registers r6 
                                   1308 ;i                         Allocated to registers 
                                   1309 ;ap                        Allocated to registers 
                                   1310 ;text                      Allocated with name '_lcd_print_text_1_81'
                                   1311 ;------------------------------------------------------------
                           00007B  1312 	G$lcd_print$0$0 ==.
                           00007B  1313 	C$i2c.h$84$1$12 ==.
                                   1314 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:84: void lcd_print(const char *fmt, ...)
                                   1315 ;	-----------------------------------------
                                   1316 ;	 function lcd_print
                                   1317 ;	-----------------------------------------
      00007B                       1318 _lcd_print:
      00007B C0*00            [24] 1319 	push	_bp
      00007D 85 81*00         [24] 1320 	mov	_bp,sp
                           000080  1321 	C$i2c.h$90$1$81 ==.
                                   1322 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: if ( strlen(fmt) <= 0 ) return;         //If there is no data to print, return
      000080 E5*00            [12] 1323 	mov	a,_bp
      000082 24 FB            [12] 1324 	add	a,#0xfb
      000084 F8               [12] 1325 	mov	r0,a
      000085 86 82            [24] 1326 	mov	dpl,@r0
      000087 08               [12] 1327 	inc	r0
      000088 86 83            [24] 1328 	mov	dph,@r0
      00008A 08               [12] 1329 	inc	r0
      00008B 86 F0            [24] 1330 	mov	b,@r0
      00008D 12r00r00         [24] 1331 	lcall	_strlen
      000090 E5 82            [12] 1332 	mov	a,dpl
      000092 85 83 F0         [24] 1333 	mov	b,dph
      000095 45 F0            [12] 1334 	orl	a,b
      000097 70 02            [24] 1335 	jnz	00102$
      000099 80 62            [24] 1336 	sjmp	00109$
      00009B                       1337 00102$:
                           00009B  1338 	C$i2c.h$92$2$82 ==.
                                   1339 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:92: va_start(ap, fmt);
      00009B E5*00            [12] 1340 	mov	a,_bp
      00009D 24 FB            [12] 1341 	add	a,#0xfb
      00009F FF               [12] 1342 	mov	r7,a
      0000A0 8F*00            [24] 1343 	mov	_vsprintf_PARM_3,r7
                           0000A2  1344 	C$i2c.h$93$1$81 ==.
                                   1345 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: vsprintf(text, fmt, ap);
      0000A2 E5*00            [12] 1346 	mov	a,_bp
      0000A4 24 FB            [12] 1347 	add	a,#0xfb
      0000A6 F8               [12] 1348 	mov	r0,a
      0000A7 86*00            [24] 1349 	mov	_vsprintf_PARM_2,@r0
      0000A9 08               [12] 1350 	inc	r0
      0000AA 86*01            [24] 1351 	mov	(_vsprintf_PARM_2 + 1),@r0
      0000AC 08               [12] 1352 	inc	r0
      0000AD 86*02            [24] 1353 	mov	(_vsprintf_PARM_2 + 2),@r0
      0000AF 90r00r00         [24] 1354 	mov	dptr,#_lcd_print_text_1_81
      0000B2 75 F0 00         [24] 1355 	mov	b,#0x00
      0000B5 12r00r00         [24] 1356 	lcall	_vsprintf
                           0000B8  1357 	C$i2c.h$96$1$81 ==.
                                   1358 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: len = strlen(text);
      0000B8 90r00r00         [24] 1359 	mov	dptr,#_lcd_print_text_1_81
      0000BB 75 F0 00         [24] 1360 	mov	b,#0x00
      0000BE 12r00r00         [24] 1361 	lcall	_strlen
      0000C1 AE 82            [24] 1362 	mov	r6,dpl
                           0000C3  1363 	C$i2c.h$97$1$81 ==.
                                   1364 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000C3 7F 00            [12] 1365 	mov	r7,#0x00
      0000C5                       1366 00107$:
      0000C5 C3               [12] 1367 	clr	c
      0000C6 EF               [12] 1368 	mov	a,r7
      0000C7 9E               [12] 1369 	subb	a,r6
      0000C8 50 1F            [24] 1370 	jnc	00105$
                           0000CA  1371 	C$i2c.h$99$2$84 ==.
                                   1372 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000CA EF               [12] 1373 	mov	a,r7
      0000CB 24r00            [12] 1374 	add	a,#_lcd_print_text_1_81
      0000CD F5 82            [12] 1375 	mov	dpl,a
      0000CF E4               [12] 1376 	clr	a
      0000D0 34s00            [12] 1377 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000D2 F5 83            [12] 1378 	mov	dph,a
      0000D4 E0               [24] 1379 	movx	a,@dptr
      0000D5 FD               [12] 1380 	mov	r5,a
      0000D6 BD 0A 0D         [24] 1381 	cjne	r5,#0x0a,00108$
      0000D9 EF               [12] 1382 	mov	a,r7
      0000DA 24r00            [12] 1383 	add	a,#_lcd_print_text_1_81
      0000DC F5 82            [12] 1384 	mov	dpl,a
      0000DE E4               [12] 1385 	clr	a
      0000DF 34s00            [12] 1386 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000E1 F5 83            [12] 1387 	mov	dph,a
      0000E3 74 0D            [12] 1388 	mov	a,#0x0d
      0000E5 F0               [24] 1389 	movx	@dptr,a
      0000E6                       1390 00108$:
                           0000E6  1391 	C$i2c.h$97$1$81 ==.
                                   1392 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000E6 0F               [12] 1393 	inc	r7
      0000E7 80 DC            [24] 1394 	sjmp	00107$
      0000E9                       1395 00105$:
                           0000E9  1396 	C$i2c.h$102$1$81 ==.
                                   1397 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:102: i2c_write_data(0xC6, 0x00, text, len);
      0000E9 75*0Br00         [24] 1398 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_81
      0000EC 75*0Cs00         [24] 1399 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_81 >> 8)
      0000EF 75*0D 00         [24] 1400 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000F2 75*0A 00         [24] 1401 	mov	_i2c_write_data_PARM_2,#0x00
      0000F5 8E*0E            [24] 1402 	mov	_i2c_write_data_PARM_4,r6
      0000F7 75 82 C6         [24] 1403 	mov	dpl,#0xc6
      0000FA 12r03r8C         [24] 1404 	lcall	_i2c_write_data
      0000FD                       1405 00109$:
      0000FD D0*00            [24] 1406 	pop	_bp
                           0000FF  1407 	C$i2c.h$103$1$81 ==.
                           0000FF  1408 	XG$lcd_print$0$0 ==.
      0000FF 22               [24] 1409 	ret
                                   1410 ;------------------------------------------------------------
                                   1411 ;Allocation info for local variables in function 'lcd_clear'
                                   1412 ;------------------------------------------------------------
                                   1413 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_85'
                                   1414 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_85'
                                   1415 ;------------------------------------------------------------
                           000100  1416 	G$lcd_clear$0$0 ==.
                           000100  1417 	C$i2c.h$106$1$81 ==.
                                   1418 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:106: void lcd_clear()
                                   1419 ;	-----------------------------------------
                                   1420 ;	 function lcd_clear
                                   1421 ;	-----------------------------------------
      000100                       1422 _lcd_clear:
                           000100  1423 	C$i2c.h$108$1$81 ==.
                                   1424 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:108: unsigned char NumBytes=0, Cmd[2];
      000100 75*05 00         [24] 1425 	mov	_lcd_clear_NumBytes_1_85,#0x00
                           000103  1426 	C$i2c.h$110$1$85 ==.
                                   1427 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      000103                       1428 00101$:
      000103 74 C0            [12] 1429 	mov	a,#0x100 - 0x40
      000105 25*05            [12] 1430 	add	a,_lcd_clear_NumBytes_1_85
      000107 40 17            [24] 1431 	jc	00103$
      000109 75*10r05         [24] 1432 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_85
      00010C 75*11 00         [24] 1433 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00010F 75*12 40         [24] 1434 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000112 75*0F 00         [24] 1435 	mov	_i2c_read_data_PARM_2,#0x00
      000115 75*13 01         [24] 1436 	mov	_i2c_read_data_PARM_4,#0x01
      000118 75 82 C6         [24] 1437 	mov	dpl,#0xc6
      00011B 12r04r06         [24] 1438 	lcall	_i2c_read_data
      00011E 80 E3            [24] 1439 	sjmp	00101$
      000120                       1440 00103$:
                           000120  1441 	C$i2c.h$112$1$85 ==.
                                   1442 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:112: Cmd[0] = 12;
      000120 75*06 0C         [24] 1443 	mov	_lcd_clear_Cmd_1_85,#0x0c
                           000123  1444 	C$i2c.h$113$1$85 ==.
                                   1445 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:113: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000123 75*0Br06         [24] 1446 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_85
      000126 75*0C 00         [24] 1447 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000129 75*0D 40         [24] 1448 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00012C 75*0A 00         [24] 1449 	mov	_i2c_write_data_PARM_2,#0x00
      00012F 75*0E 01         [24] 1450 	mov	_i2c_write_data_PARM_4,#0x01
      000132 75 82 C6         [24] 1451 	mov	dpl,#0xc6
      000135 12r03r8C         [24] 1452 	lcall	_i2c_write_data
                           000138  1453 	C$i2c.h$114$1$85 ==.
                           000138  1454 	XG$lcd_clear$0$0 ==.
      000138 22               [24] 1455 	ret
                                   1456 ;------------------------------------------------------------
                                   1457 ;Allocation info for local variables in function 'read_keypad'
                                   1458 ;------------------------------------------------------------
                                   1459 ;i                         Allocated to registers r7 
                                   1460 ;Data                      Allocated with name '_read_keypad_Data_1_86'
                                   1461 ;------------------------------------------------------------
                           000139  1462 	G$read_keypad$0$0 ==.
                           000139  1463 	C$i2c.h$117$1$85 ==.
                                   1464 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:117: char read_keypad()
                                   1465 ;	-----------------------------------------
                                   1466 ;	 function read_keypad
                                   1467 ;	-----------------------------------------
      000139                       1468 _read_keypad:
                           000139  1469 	C$i2c.h$121$1$86 ==.
                                   1470 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      000139 75*10r08         [24] 1471 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_86
      00013C 75*11 00         [24] 1472 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00013F 75*12 40         [24] 1473 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000142 75*0F 01         [24] 1474 	mov	_i2c_read_data_PARM_2,#0x01
      000145 75*13 02         [24] 1475 	mov	_i2c_read_data_PARM_4,#0x02
      000148 75 82 C6         [24] 1476 	mov	dpl,#0xc6
      00014B 12r04r06         [24] 1477 	lcall	_i2c_read_data
                           00014E  1478 	C$i2c.h$122$1$86 ==.
                                   1479 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:122: if(Data[0] == 0xFF) return 0;   //No response on bus, no display
      00014E 74 FF            [12] 1480 	mov	a,#0xff
      000150 B5*08 05         [24] 1481 	cjne	a,_read_keypad_Data_1_86,00102$
      000153 75 82 00         [24] 1482 	mov	dpl,#0x00
      000156 80 5F            [24] 1483 	sjmp	00116$
      000158                       1484 00102$:
                           000158  1485 	C$i2c.h$124$1$86 ==.
                                   1486 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000158 7F 00            [12] 1487 	mov	r7,#0x00
      00015A 8F 06            [24] 1488 	mov	ar6,r7
      00015C                       1489 00114$:
                           00015C  1490 	C$i2c.h$126$2$87 ==.
                                   1491 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:126: if(Data[0] & (0x01 << i))   //find the ASCII value of the keypad read, if it is the current loop value
      00015C 8E F0            [24] 1492 	mov	b,r6
      00015E 05 F0            [12] 1493 	inc	b
      000160 7C 01            [12] 1494 	mov	r4,#0x01
      000162 7D 00            [12] 1495 	mov	r5,#0x00
      000164 80 06            [24] 1496 	sjmp	00145$
      000166                       1497 00144$:
      000166 EC               [12] 1498 	mov	a,r4
      000167 2C               [12] 1499 	add	a,r4
      000168 FC               [12] 1500 	mov	r4,a
      000169 ED               [12] 1501 	mov	a,r5
      00016A 33               [12] 1502 	rlc	a
      00016B FD               [12] 1503 	mov	r5,a
      00016C                       1504 00145$:
      00016C D5 F0 F7         [24] 1505 	djnz	b,00144$
      00016F AA*08            [24] 1506 	mov	r2,_read_keypad_Data_1_86
      000171 7B 00            [12] 1507 	mov	r3,#0x00
      000173 EA               [12] 1508 	mov	a,r2
      000174 52 04            [12] 1509 	anl	ar4,a
      000176 EB               [12] 1510 	mov	a,r3
      000177 52 05            [12] 1511 	anl	ar5,a
      000179 EC               [12] 1512 	mov	a,r4
      00017A 4D               [12] 1513 	orl	a,r5
      00017B 60 07            [24] 1514 	jz	00115$
                           00017D  1515 	C$i2c.h$127$2$87 ==.
                                   1516 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: return i+49;
      00017D 74 31            [12] 1517 	mov	a,#0x31
      00017F 2F               [12] 1518 	add	a,r7
      000180 F5 82            [12] 1519 	mov	dpl,a
      000182 80 33            [24] 1520 	sjmp	00116$
      000184                       1521 00115$:
                           000184  1522 	C$i2c.h$124$1$86 ==.
                                   1523 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000184 0E               [12] 1524 	inc	r6
      000185 8E 07            [24] 1525 	mov	ar7,r6
      000187 BE 08 00         [24] 1526 	cjne	r6,#0x08,00147$
      00018A                       1527 00147$:
      00018A 40 D0            [24] 1528 	jc	00114$
                           00018C  1529 	C$i2c.h$130$1$86 ==.
                                   1530 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:130: if(Data[1] & 0x01) return '9';  //if the value is equal to 9 return 9.
      00018C E5*09            [12] 1531 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00018E 30 E0 05         [24] 1532 	jnb	acc.0,00107$
      000191 75 82 39         [24] 1533 	mov	dpl,#0x39
      000194 80 21            [24] 1534 	sjmp	00116$
      000196                       1535 00107$:
                           000196  1536 	C$i2c.h$132$1$86 ==.
                                   1537 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:132: if(Data[1] & 0x02) return '*';  //if the value is equal to the star.
      000196 E5*09            [12] 1538 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      000198 30 E1 05         [24] 1539 	jnb	acc.1,00109$
      00019B 75 82 2A         [24] 1540 	mov	dpl,#0x2a
      00019E 80 17            [24] 1541 	sjmp	00116$
      0001A0                       1542 00109$:
                           0001A0  1543 	C$i2c.h$134$1$86 ==.
                                   1544 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:134: if(Data[1] & 0x04) return '0';  //if the value is equal to the 0 key
      0001A0 E5*09            [12] 1545 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001A2 30 E2 05         [24] 1546 	jnb	acc.2,00111$
      0001A5 75 82 30         [24] 1547 	mov	dpl,#0x30
      0001A8 80 0D            [24] 1548 	sjmp	00116$
      0001AA                       1549 00111$:
                           0001AA  1550 	C$i2c.h$136$1$86 ==.
                                   1551 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:136: if(Data[1] & 0x08) return '#';  //if the value is equal to the pound key
      0001AA E5*09            [12] 1552 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001AC 30 E3 05         [24] 1553 	jnb	acc.3,00113$
      0001AF 75 82 23         [24] 1554 	mov	dpl,#0x23
      0001B2 80 03            [24] 1555 	sjmp	00116$
      0001B4                       1556 00113$:
                           0001B4  1557 	C$i2c.h$138$1$86 ==.
                                   1558 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:138: return 0xFF;                    //else return a numerical -1 (0xFF)
      0001B4 75 82 FF         [24] 1559 	mov	dpl,#0xff
      0001B7                       1560 00116$:
                           0001B7  1561 	C$i2c.h$139$1$86 ==.
                           0001B7  1562 	XG$read_keypad$0$0 ==.
      0001B7 22               [24] 1563 	ret
                                   1564 ;------------------------------------------------------------
                                   1565 ;Allocation info for local variables in function 'kpd_input'
                                   1566 ;------------------------------------------------------------
                                   1567 ;mode                      Allocated to registers r7 
                                   1568 ;sum                       Allocated to registers r5 r6 
                                   1569 ;key                       Allocated to registers r3 
                                   1570 ;i                         Allocated to registers 
                                   1571 ;------------------------------------------------------------
                           0001B8  1572 	G$kpd_input$0$0 ==.
                           0001B8  1573 	C$i2c.h$151$1$86 ==.
                                   1574 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:151: unsigned int kpd_input(char mode)
                                   1575 ;	-----------------------------------------
                                   1576 ;	 function kpd_input
                                   1577 ;	-----------------------------------------
      0001B8                       1578 _kpd_input:
      0001B8 AF 82            [24] 1579 	mov	r7,dpl
                           0001BA  1580 	C$i2c.h$156$1$89 ==.
                                   1581 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: sum = 0;
                           0001BA  1582 	C$i2c.h$159$1$89 ==.
                                   1583 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:159: if(mode==0)lcd_print("\nType digits; end w/#");
      0001BA E4               [12] 1584 	clr	a
      0001BB FD               [12] 1585 	mov	r5,a
      0001BC FE               [12] 1586 	mov	r6,a
      0001BD EF               [12] 1587 	mov	a,r7
      0001BE 70 1D            [24] 1588 	jnz	00102$
      0001C0 C0 06            [24] 1589 	push	ar6
      0001C2 C0 05            [24] 1590 	push	ar5
      0001C4 74r00            [12] 1591 	mov	a,#___str_0
      0001C6 C0 E0            [24] 1592 	push	acc
      0001C8 74s00            [12] 1593 	mov	a,#(___str_0 >> 8)
      0001CA C0 E0            [24] 1594 	push	acc
      0001CC 74 80            [12] 1595 	mov	a,#0x80
      0001CE C0 E0            [24] 1596 	push	acc
      0001D0 12r00r7B         [24] 1597 	lcall	_lcd_print
      0001D3 15 81            [12] 1598 	dec	sp
      0001D5 15 81            [12] 1599 	dec	sp
      0001D7 15 81            [12] 1600 	dec	sp
      0001D9 D0 05            [24] 1601 	pop	ar5
      0001DB D0 06            [24] 1602 	pop	ar6
      0001DD                       1603 00102$:
                           0001DD  1604 	C$i2c.h$161$1$89 ==.
                                   1605 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:161: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001DD C0 06            [24] 1606 	push	ar6
      0001DF C0 05            [24] 1607 	push	ar5
      0001E1 74 08            [12] 1608 	mov	a,#0x08
      0001E3 C0 E0            [24] 1609 	push	acc
      0001E5 E4               [12] 1610 	clr	a
      0001E6 C0 E0            [24] 1611 	push	acc
      0001E8 74 08            [12] 1612 	mov	a,#0x08
      0001EA C0 E0            [24] 1613 	push	acc
      0001EC E4               [12] 1614 	clr	a
      0001ED C0 E0            [24] 1615 	push	acc
      0001EF 74 08            [12] 1616 	mov	a,#0x08
      0001F1 C0 E0            [24] 1617 	push	acc
      0001F3 E4               [12] 1618 	clr	a
      0001F4 C0 E0            [24] 1619 	push	acc
      0001F6 74 08            [12] 1620 	mov	a,#0x08
      0001F8 C0 E0            [24] 1621 	push	acc
      0001FA E4               [12] 1622 	clr	a
      0001FB C0 E0            [24] 1623 	push	acc
      0001FD 74 08            [12] 1624 	mov	a,#0x08
      0001FF C0 E0            [24] 1625 	push	acc
      000201 E4               [12] 1626 	clr	a
      000202 C0 E0            [24] 1627 	push	acc
      000204 74r16            [12] 1628 	mov	a,#___str_1
      000206 C0 E0            [24] 1629 	push	acc
      000208 74s00            [12] 1630 	mov	a,#(___str_1 >> 8)
      00020A C0 E0            [24] 1631 	push	acc
      00020C 74 80            [12] 1632 	mov	a,#0x80
      00020E C0 E0            [24] 1633 	push	acc
      000210 12r00r7B         [24] 1634 	lcall	_lcd_print
      000213 E5 81            [12] 1635 	mov	a,sp
      000215 24 F3            [12] 1636 	add	a,#0xf3
      000217 F5 81            [12] 1637 	mov	sp,a
                           000219  1638 	C$i2c.h$163$1$89 ==.
                                   1639 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:163: delay_time(500000);             //Add 20ms delay before reading i2c in loop
      000219 90 A1 20         [24] 1640 	mov	dptr,#0xa120
      00021C 75 F0 07         [24] 1641 	mov	b,#0x07
      00021F E4               [12] 1642 	clr	a
      000220 12r03r27         [24] 1643 	lcall	_delay_time
      000223 D0 05            [24] 1644 	pop	ar5
      000225 D0 06            [24] 1645 	pop	ar6
                           000227  1646 	C$i2c.h$167$1$89 ==.
                                   1647 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000227 7F 00            [12] 1648 	mov	r7,#0x00
                           000229  1649 	C$i2c.h$169$3$92 ==.
                                   1650 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(((key=read_keypad()) == 0xFF) || (key == '*'))delay_time(10000);
      000229                       1651 00104$:
      000229 C0 07            [24] 1652 	push	ar7
      00022B C0 06            [24] 1653 	push	ar6
      00022D C0 05            [24] 1654 	push	ar5
      00022F 12r01r39         [24] 1655 	lcall	_read_keypad
      000232 AC 82            [24] 1656 	mov	r4,dpl
      000234 D0 05            [24] 1657 	pop	ar5
      000236 D0 06            [24] 1658 	pop	ar6
      000238 D0 07            [24] 1659 	pop	ar7
      00023A 8C 03            [24] 1660 	mov	ar3,r4
      00023C BC FF 02         [24] 1661 	cjne	r4,#0xff,00146$
      00023F 80 03            [24] 1662 	sjmp	00105$
      000241                       1663 00146$:
      000241 BB 2A 17         [24] 1664 	cjne	r3,#0x2a,00106$
      000244                       1665 00105$:
      000244 90 27 10         [24] 1666 	mov	dptr,#0x2710
      000247 E4               [12] 1667 	clr	a
      000248 F5 F0            [12] 1668 	mov	b,a
      00024A C0 07            [24] 1669 	push	ar7
      00024C C0 06            [24] 1670 	push	ar6
      00024E C0 05            [24] 1671 	push	ar5
      000250 12r03r27         [24] 1672 	lcall	_delay_time
      000253 D0 05            [24] 1673 	pop	ar5
      000255 D0 06            [24] 1674 	pop	ar6
      000257 D0 07            [24] 1675 	pop	ar7
      000259 80 CE            [24] 1676 	sjmp	00104$
      00025B                       1677 00106$:
                           00025B  1678 	C$i2c.h$170$2$90 ==.
                                   1679 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: if(key == '#')
      00025B BB 23 2A         [24] 1680 	cjne	r3,#0x23,00114$
                           00025E  1681 	C$i2c.h$172$3$91 ==.
                                   1682 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:172: while(read_keypad() == '#')delay_time(10000);
      00025E                       1683 00107$:
      00025E C0 06            [24] 1684 	push	ar6
      000260 C0 05            [24] 1685 	push	ar5
      000262 12r01r39         [24] 1686 	lcall	_read_keypad
      000265 AC 82            [24] 1687 	mov	r4,dpl
      000267 D0 05            [24] 1688 	pop	ar5
      000269 D0 06            [24] 1689 	pop	ar6
      00026B BC 23 13         [24] 1690 	cjne	r4,#0x23,00109$
      00026E 90 27 10         [24] 1691 	mov	dptr,#0x2710
      000271 E4               [12] 1692 	clr	a
      000272 F5 F0            [12] 1693 	mov	b,a
      000274 C0 06            [24] 1694 	push	ar6
      000276 C0 05            [24] 1695 	push	ar5
      000278 12r03r27         [24] 1696 	lcall	_delay_time
      00027B D0 05            [24] 1697 	pop	ar5
      00027D D0 06            [24] 1698 	pop	ar6
      00027F 80 DD            [24] 1699 	sjmp	00107$
      000281                       1700 00109$:
                           000281  1701 	C$i2c.h$173$3$91 ==.
                                   1702 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:173: return sum;
      000281 8D 82            [24] 1703 	mov	dpl,r5
      000283 8E 83            [24] 1704 	mov	dph,r6
      000285 02r03r26         [24] 1705 	ljmp	00119$
      000288                       1706 00114$:
                           000288  1707 	C$i2c.h$177$3$92 ==.
                                   1708 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:177: lcd_print("%c", key);
      000288 8B 02            [24] 1709 	mov	ar2,r3
      00028A 7C 00            [12] 1710 	mov	r4,#0x00
      00028C C0 07            [24] 1711 	push	ar7
      00028E C0 06            [24] 1712 	push	ar6
      000290 C0 05            [24] 1713 	push	ar5
      000292 C0 04            [24] 1714 	push	ar4
      000294 C0 03            [24] 1715 	push	ar3
      000296 C0 02            [24] 1716 	push	ar2
      000298 C0 02            [24] 1717 	push	ar2
      00029A C0 04            [24] 1718 	push	ar4
      00029C 74r26            [12] 1719 	mov	a,#___str_2
      00029E C0 E0            [24] 1720 	push	acc
      0002A0 74s00            [12] 1721 	mov	a,#(___str_2 >> 8)
      0002A2 C0 E0            [24] 1722 	push	acc
      0002A4 74 80            [12] 1723 	mov	a,#0x80
      0002A6 C0 E0            [24] 1724 	push	acc
      0002A8 12r00r7B         [24] 1725 	lcall	_lcd_print
      0002AB E5 81            [12] 1726 	mov	a,sp
      0002AD 24 FB            [12] 1727 	add	a,#0xfb
      0002AF F5 81            [12] 1728 	mov	sp,a
      0002B1 D0 02            [24] 1729 	pop	ar2
      0002B3 D0 03            [24] 1730 	pop	ar3
      0002B5 D0 04            [24] 1731 	pop	ar4
      0002B7 D0 05            [24] 1732 	pop	ar5
      0002B9 D0 06            [24] 1733 	pop	ar6
                           0002BB  1734 	C$i2c.h$178$1$89 ==.
                                   1735 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:178: sum = sum*10 + key - '0';
      0002BB 8D*00            [24] 1736 	mov	__mulint_PARM_2,r5
      0002BD 8E*01            [24] 1737 	mov	(__mulint_PARM_2 + 1),r6
      0002BF 90 00 0A         [24] 1738 	mov	dptr,#0x000a
      0002C2 C0 04            [24] 1739 	push	ar4
      0002C4 C0 03            [24] 1740 	push	ar3
      0002C6 C0 02            [24] 1741 	push	ar2
      0002C8 12r00r00         [24] 1742 	lcall	__mulint
      0002CB A8 82            [24] 1743 	mov	r0,dpl
      0002CD A9 83            [24] 1744 	mov	r1,dph
      0002CF D0 02            [24] 1745 	pop	ar2
      0002D1 D0 03            [24] 1746 	pop	ar3
      0002D3 D0 04            [24] 1747 	pop	ar4
      0002D5 D0 07            [24] 1748 	pop	ar7
      0002D7 EA               [12] 1749 	mov	a,r2
      0002D8 28               [12] 1750 	add	a,r0
      0002D9 F8               [12] 1751 	mov	r0,a
      0002DA EC               [12] 1752 	mov	a,r4
      0002DB 39               [12] 1753 	addc	a,r1
      0002DC F9               [12] 1754 	mov	r1,a
      0002DD E8               [12] 1755 	mov	a,r0
      0002DE 24 D0            [12] 1756 	add	a,#0xd0
      0002E0 FD               [12] 1757 	mov	r5,a
      0002E1 E9               [12] 1758 	mov	a,r1
      0002E2 34 FF            [12] 1759 	addc	a,#0xff
      0002E4 FE               [12] 1760 	mov	r6,a
                           0002E5  1761 	C$i2c.h$179$3$92 ==.
                                   1762 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002E5                       1763 00110$:
      0002E5 C0 07            [24] 1764 	push	ar7
      0002E7 C0 06            [24] 1765 	push	ar6
      0002E9 C0 05            [24] 1766 	push	ar5
      0002EB C0 03            [24] 1767 	push	ar3
      0002ED 12r01r39         [24] 1768 	lcall	_read_keypad
      0002F0 AC 82            [24] 1769 	mov	r4,dpl
      0002F2 D0 03            [24] 1770 	pop	ar3
      0002F4 D0 05            [24] 1771 	pop	ar5
      0002F6 D0 06            [24] 1772 	pop	ar6
      0002F8 D0 07            [24] 1773 	pop	ar7
      0002FA EC               [12] 1774 	mov	a,r4
      0002FB B5 03 1B         [24] 1775 	cjne	a,ar3,00118$
      0002FE 90 27 10         [24] 1776 	mov	dptr,#0x2710
      000301 E4               [12] 1777 	clr	a
      000302 F5 F0            [12] 1778 	mov	b,a
      000304 C0 07            [24] 1779 	push	ar7
      000306 C0 06            [24] 1780 	push	ar6
      000308 C0 05            [24] 1781 	push	ar5
      00030A C0 03            [24] 1782 	push	ar3
      00030C 12r03r27         [24] 1783 	lcall	_delay_time
      00030F D0 03            [24] 1784 	pop	ar3
      000311 D0 05            [24] 1785 	pop	ar5
      000313 D0 06            [24] 1786 	pop	ar6
      000315 D0 07            [24] 1787 	pop	ar7
      000317 80 CC            [24] 1788 	sjmp	00110$
      000319                       1789 00118$:
                           000319  1790 	C$i2c.h$167$1$89 ==.
                                   1791 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000319 0F               [12] 1792 	inc	r7
      00031A BF 05 00         [24] 1793 	cjne	r7,#0x05,00155$
      00031D                       1794 00155$:
      00031D 50 03            [24] 1795 	jnc	00156$
      00031F 02r02r29         [24] 1796 	ljmp	00104$
      000322                       1797 00156$:
                           000322  1798 	C$i2c.h$182$1$89 ==.
                                   1799 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:182: return sum;
      000322 8D 82            [24] 1800 	mov	dpl,r5
      000324 8E 83            [24] 1801 	mov	dph,r6
      000326                       1802 00119$:
                           000326  1803 	C$i2c.h$183$1$89 ==.
                           000326  1804 	XG$kpd_input$0$0 ==.
      000326 22               [24] 1805 	ret
                                   1806 ;------------------------------------------------------------
                                   1807 ;Allocation info for local variables in function 'delay_time'
                                   1808 ;------------------------------------------------------------
                                   1809 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1810 ;index                     Allocated to registers 
                                   1811 ;------------------------------------------------------------
                           000327  1812 	G$delay_time$0$0 ==.
                           000327  1813 	C$i2c.h$192$1$89 ==.
                                   1814 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: void delay_time (unsigned long time_end)
                                   1815 ;	-----------------------------------------
                                   1816 ;	 function delay_time
                                   1817 ;	-----------------------------------------
      000327                       1818 _delay_time:
      000327 AC 82            [24] 1819 	mov	r4,dpl
      000329 AD 83            [24] 1820 	mov	r5,dph
      00032B AE F0            [24] 1821 	mov	r6,b
      00032D FF               [12] 1822 	mov	r7,a
                           00032E  1823 	C$i2c.h$196$1$94 ==.
                                   1824 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:196: for (index = 0; index < time_end; index++); //for loop delay
      00032E 78 00            [12] 1825 	mov	r0,#0x00
      000330 79 00            [12] 1826 	mov	r1,#0x00
      000332 7A 00            [12] 1827 	mov	r2,#0x00
      000334 7B 00            [12] 1828 	mov	r3,#0x00
      000336                       1829 00103$:
      000336 C3               [12] 1830 	clr	c
      000337 E8               [12] 1831 	mov	a,r0
      000338 9C               [12] 1832 	subb	a,r4
      000339 E9               [12] 1833 	mov	a,r1
      00033A 9D               [12] 1834 	subb	a,r5
      00033B EA               [12] 1835 	mov	a,r2
      00033C 9E               [12] 1836 	subb	a,r6
      00033D EB               [12] 1837 	mov	a,r3
      00033E 9F               [12] 1838 	subb	a,r7
      00033F 50 0F            [24] 1839 	jnc	00105$
      000341 08               [12] 1840 	inc	r0
      000342 B8 00 09         [24] 1841 	cjne	r0,#0x00,00115$
      000345 09               [12] 1842 	inc	r1
      000346 B9 00 05         [24] 1843 	cjne	r1,#0x00,00115$
      000349 0A               [12] 1844 	inc	r2
      00034A BA 00 E9         [24] 1845 	cjne	r2,#0x00,00103$
      00034D 0B               [12] 1846 	inc	r3
      00034E                       1847 00115$:
      00034E 80 E6            [24] 1848 	sjmp	00103$
      000350                       1849 00105$:
                           000350  1850 	C$i2c.h$197$1$94 ==.
                           000350  1851 	XG$delay_time$0$0 ==.
      000350 22               [24] 1852 	ret
                                   1853 ;------------------------------------------------------------
                                   1854 ;Allocation info for local variables in function 'i2c_start'
                                   1855 ;------------------------------------------------------------
                           000351  1856 	G$i2c_start$0$0 ==.
                           000351  1857 	C$i2c.h$200$1$94 ==.
                                   1858 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:200: void i2c_start(void)
                                   1859 ;	-----------------------------------------
                                   1860 ;	 function i2c_start
                                   1861 ;	-----------------------------------------
      000351                       1862 _i2c_start:
                           000351  1863 	C$i2c.h$202$1$96 ==.
                                   1864 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: while(BUSY);                //Wait until SMBus0 is free
      000351                       1865 00101$:
      000351 20 C7 FD         [24] 1866 	jb	_BUSY,00101$
                           000354  1867 	C$i2c.h$203$1$96 ==.
                                   1868 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:203: STA = 1;                    //Set Start Bit
      000354 D2 C5            [12] 1869 	setb	_STA
                           000356  1870 	C$i2c.h$204$1$96 ==.
                                   1871 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:204: while(!SI);                 //Wait until start sent
      000356                       1872 00104$:
      000356 30 C3 FD         [24] 1873 	jnb	_SI,00104$
                           000359  1874 	C$i2c.h$205$1$96 ==.
                                   1875 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:205: STA = 0;                    //Clear start bit
      000359 C2 C5            [12] 1876 	clr	_STA
                           00035B  1877 	C$i2c.h$206$1$96 ==.
                                   1878 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:206: SI = 0;                     //Clear SI
      00035B C2 C3            [12] 1879 	clr	_SI
                           00035D  1880 	C$i2c.h$207$1$96 ==.
                           00035D  1881 	XG$i2c_start$0$0 ==.
      00035D 22               [24] 1882 	ret
                                   1883 ;------------------------------------------------------------
                                   1884 ;Allocation info for local variables in function 'i2c_write'
                                   1885 ;------------------------------------------------------------
                                   1886 ;output_data               Allocated to registers 
                                   1887 ;------------------------------------------------------------
                           00035E  1888 	G$i2c_write$0$0 ==.
                           00035E  1889 	C$i2c.h$210$1$96 ==.
                                   1890 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:210: void i2c_write(unsigned char output_data)
                                   1891 ;	-----------------------------------------
                                   1892 ;	 function i2c_write
                                   1893 ;	-----------------------------------------
      00035E                       1894 _i2c_write:
      00035E 85 82 C2         [24] 1895 	mov	_SMB0DAT,dpl
                           000361  1896 	C$i2c.h$213$1$98 ==.
                                   1897 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:213: while(!SI);                 //Wait until send is complete
      000361                       1898 00101$:
                           000361  1899 	C$i2c.h$214$1$98 ==.
                                   1900 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:214: SI = 0;                     //Clear SI
      000361 10 C3 02         [24] 1901 	jbc	_SI,00112$
      000364 80 FB            [24] 1902 	sjmp	00101$
      000366                       1903 00112$:
                           000366  1904 	C$i2c.h$215$1$98 ==.
                           000366  1905 	XG$i2c_write$0$0 ==.
      000366 22               [24] 1906 	ret
                                   1907 ;------------------------------------------------------------
                                   1908 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1909 ;------------------------------------------------------------
                                   1910 ;output_data               Allocated to registers 
                                   1911 ;------------------------------------------------------------
                           000367  1912 	G$i2c_write_and_stop$0$0 ==.
                           000367  1913 	C$i2c.h$218$1$98 ==.
                                   1914 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:218: void i2c_write_and_stop(unsigned char output_data)
                                   1915 ;	-----------------------------------------
                                   1916 ;	 function i2c_write_and_stop
                                   1917 ;	-----------------------------------------
      000367                       1918 _i2c_write_and_stop:
      000367 85 82 C2         [24] 1919 	mov	_SMB0DAT,dpl
                           00036A  1920 	C$i2c.h$221$1$100 ==.
                                   1921 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:221: STO = 1;                    //Set stop bit
      00036A D2 C4            [12] 1922 	setb	_STO
                           00036C  1923 	C$i2c.h$222$1$100 ==.
                                   1924 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:222: while(!SI);                 //Wait until send is complete
      00036C                       1925 00101$:
                           00036C  1926 	C$i2c.h$223$1$100 ==.
                                   1927 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:223: SI = 0;                     //Clear SI
      00036C 10 C3 02         [24] 1928 	jbc	_SI,00112$
      00036F 80 FB            [24] 1929 	sjmp	00101$
      000371                       1930 00112$:
                           000371  1931 	C$i2c.h$224$1$100 ==.
                           000371  1932 	XG$i2c_write_and_stop$0$0 ==.
      000371 22               [24] 1933 	ret
                                   1934 ;------------------------------------------------------------
                                   1935 ;Allocation info for local variables in function 'i2c_read'
                                   1936 ;------------------------------------------------------------
                                   1937 ;input_data                Allocated to registers 
                                   1938 ;------------------------------------------------------------
                           000372  1939 	G$i2c_read$0$0 ==.
                           000372  1940 	C$i2c.h$227$1$100 ==.
                                   1941 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:227: unsigned char i2c_read(void)
                                   1942 ;	-----------------------------------------
                                   1943 ;	 function i2c_read
                                   1944 ;	-----------------------------------------
      000372                       1945 _i2c_read:
                           000372  1946 	C$i2c.h$231$1$102 ==.
                                   1947 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:231: while(!SI);                 //Wait until we have data to read
      000372                       1948 00101$:
      000372 30 C3 FD         [24] 1949 	jnb	_SI,00101$
                           000375  1950 	C$i2c.h$232$1$102 ==.
                                   1951 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:232: input_data = SMB0DAT;       //Read the data
      000375 85 C2 82         [24] 1952 	mov	dpl,_SMB0DAT
                           000378  1953 	C$i2c.h$233$1$102 ==.
                                   1954 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:233: SI = 0;                     //Clear SI
      000378 C2 C3            [12] 1955 	clr	_SI
                           00037A  1956 	C$i2c.h$234$1$102 ==.
                                   1957 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:234: return input_data;          //Return the read data
                           00037A  1958 	C$i2c.h$235$1$102 ==.
                           00037A  1959 	XG$i2c_read$0$0 ==.
      00037A 22               [24] 1960 	ret
                                   1961 ;------------------------------------------------------------
                                   1962 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   1963 ;------------------------------------------------------------
                                   1964 ;input_data                Allocated to registers r7 
                                   1965 ;------------------------------------------------------------
                           00037B  1966 	G$i2c_read_and_stop$0$0 ==.
                           00037B  1967 	C$i2c.h$238$1$102 ==.
                                   1968 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:238: unsigned char i2c_read_and_stop(void)
                                   1969 ;	-----------------------------------------
                                   1970 ;	 function i2c_read_and_stop
                                   1971 ;	-----------------------------------------
      00037B                       1972 _i2c_read_and_stop:
                           00037B  1973 	C$i2c.h$242$1$104 ==.
                                   1974 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: while(!SI);                 //Wait until we have data to read
      00037B                       1975 00101$:
      00037B 30 C3 FD         [24] 1976 	jnb	_SI,00101$
                           00037E  1977 	C$i2c.h$243$1$104 ==.
                                   1978 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:243: input_data = SMB0DAT;       //Read the data
      00037E AF C2            [24] 1979 	mov	r7,_SMB0DAT
                           000380  1980 	C$i2c.h$244$1$104 ==.
                                   1981 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:244: SI = 0;                     //Clear SI
      000380 C2 C3            [12] 1982 	clr	_SI
                           000382  1983 	C$i2c.h$245$1$104 ==.
                                   1984 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:245: STO = 1;                    //Set stop bit
      000382 D2 C4            [12] 1985 	setb	_STO
                           000384  1986 	C$i2c.h$246$1$104 ==.
                                   1987 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:246: while(!SI);                 //Wait for stop
      000384                       1988 00104$:
                           000384  1989 	C$i2c.h$247$1$104 ==.
                                   1990 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:247: SI = 0;
      000384 10 C3 02         [24] 1991 	jbc	_SI,00122$
      000387 80 FB            [24] 1992 	sjmp	00104$
      000389                       1993 00122$:
                           000389  1994 	C$i2c.h$248$1$104 ==.
                                   1995 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:248: return input_data;          //Return the read data
      000389 8F 82            [24] 1996 	mov	dpl,r7
                           00038B  1997 	C$i2c.h$249$1$104 ==.
                           00038B  1998 	XG$i2c_read_and_stop$0$0 ==.
      00038B 22               [24] 1999 	ret
                                   2000 ;------------------------------------------------------------
                                   2001 ;Allocation info for local variables in function 'i2c_write_data'
                                   2002 ;------------------------------------------------------------
                                   2003 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2004 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2005 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2006 ;addr                      Allocated to registers r7 
                                   2007 ;i                         Allocated to registers 
                                   2008 ;------------------------------------------------------------
                           00038C  2009 	G$i2c_write_data$0$0 ==.
                           00038C  2010 	C$i2c.h$252$1$104 ==.
                                   2011 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:252: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2012 ;	-----------------------------------------
                                   2013 ;	 function i2c_write_data
                                   2014 ;	-----------------------------------------
      00038C                       2015 _i2c_write_data:
      00038C AF 82            [24] 2016 	mov	r7,dpl
                           00038E  2017 	C$i2c.h$256$1$106 ==.
                                   2018 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:256: EA = 0;                     //Don't allow interrupts during I2C work
      00038E C2 AF            [12] 2019 	clr	_EA
                           000390  2020 	C$i2c.h$257$1$106 ==.
                                   2021 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:257: i2c_start();                //Initiate I2C transfer
      000390 C0 07            [24] 2022 	push	ar7
      000392 12r03r51         [24] 2023 	lcall	_i2c_start
      000395 D0 07            [24] 2024 	pop	ar7
                           000397  2025 	C$i2c.h$258$1$106 ==.
                                   2026 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:258: i2c_write(addr & ~0x01);    //Write the desired address to the bus
      000397 74 FE            [12] 2027 	mov	a,#0xfe
      000399 5F               [12] 2028 	anl	a,r7
      00039A F5 82            [12] 2029 	mov	dpl,a
      00039C 12r03r5E         [24] 2030 	lcall	_i2c_write
                           00039F  2031 	C$i2c.h$259$1$106 ==.
                                   2032 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:259: i2c_write(start_reg);       //Write the start register to the bus
      00039F 85*0A 82         [24] 2033 	mov	dpl,_i2c_write_data_PARM_2
      0003A2 12r03r5E         [24] 2034 	lcall	_i2c_write
                           0003A5  2035 	C$i2c.h$260$1$106 ==.
                                   2036 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003A5 7F 00            [12] 2037 	mov	r7,#0x00
      0003A7                       2038 00103$:
      0003A7 AD*0E            [24] 2039 	mov	r5,_i2c_write_data_PARM_4
      0003A9 7E 00            [12] 2040 	mov	r6,#0x00
      0003AB 1D               [12] 2041 	dec	r5
      0003AC BD FF 01         [24] 2042 	cjne	r5,#0xff,00114$
      0003AF 1E               [12] 2043 	dec	r6
      0003B0                       2044 00114$:
      0003B0 8F 03            [24] 2045 	mov	ar3,r7
      0003B2 7C 00            [12] 2046 	mov	r4,#0x00
      0003B4 C3               [12] 2047 	clr	c
      0003B5 EB               [12] 2048 	mov	a,r3
      0003B6 9D               [12] 2049 	subb	a,r5
      0003B7 EC               [12] 2050 	mov	a,r4
      0003B8 64 80            [12] 2051 	xrl	a,#0x80
      0003BA 8E F0            [24] 2052 	mov	b,r6
      0003BC 63 F0 80         [24] 2053 	xrl	b,#0x80
      0003BF 95 F0            [12] 2054 	subb	a,b
      0003C1 50 1F            [24] 2055 	jnc	00101$
                           0003C3  2056 	C$i2c.h$261$1$106 ==.
                                   2057 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:261: i2c_write(buffer[i]);
      0003C3 EF               [12] 2058 	mov	a,r7
      0003C4 25*0B            [12] 2059 	add	a,_i2c_write_data_PARM_3
      0003C6 FC               [12] 2060 	mov	r4,a
      0003C7 E4               [12] 2061 	clr	a
      0003C8 35*0C            [12] 2062 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003CA FD               [12] 2063 	mov	r5,a
      0003CB AE*0D            [24] 2064 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003CD 8C 82            [24] 2065 	mov	dpl,r4
      0003CF 8D 83            [24] 2066 	mov	dph,r5
      0003D1 8E F0            [24] 2067 	mov	b,r6
      0003D3 12r00r00         [24] 2068 	lcall	__gptrget
      0003D6 F5 82            [12] 2069 	mov	dpl,a
      0003D8 C0 07            [24] 2070 	push	ar7
      0003DA 12r03r5E         [24] 2071 	lcall	_i2c_write
      0003DD D0 07            [24] 2072 	pop	ar7
                           0003DF  2073 	C$i2c.h$260$1$106 ==.
                                   2074 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003DF 0F               [12] 2075 	inc	r7
      0003E0 80 C5            [24] 2076 	sjmp	00103$
      0003E2                       2077 00101$:
                           0003E2  2078 	C$i2c.h$262$1$106 ==.
                                   2079 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:262: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003E2 AE*0E            [24] 2080 	mov	r6,_i2c_write_data_PARM_4
      0003E4 7F 00            [12] 2081 	mov	r7,#0x00
      0003E6 1E               [12] 2082 	dec	r6
      0003E7 BE FF 01         [24] 2083 	cjne	r6,#0xff,00116$
      0003EA 1F               [12] 2084 	dec	r7
      0003EB                       2085 00116$:
      0003EB EE               [12] 2086 	mov	a,r6
      0003EC 25*0B            [12] 2087 	add	a,_i2c_write_data_PARM_3
      0003EE FE               [12] 2088 	mov	r6,a
      0003EF EF               [12] 2089 	mov	a,r7
      0003F0 35*0C            [12] 2090 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003F2 FF               [12] 2091 	mov	r7,a
      0003F3 AD*0D            [24] 2092 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003F5 8E 82            [24] 2093 	mov	dpl,r6
      0003F7 8F 83            [24] 2094 	mov	dph,r7
      0003F9 8D F0            [24] 2095 	mov	b,r5
      0003FB 12r00r00         [24] 2096 	lcall	__gptrget
      0003FE F5 82            [12] 2097 	mov	dpl,a
      000400 12r03r67         [24] 2098 	lcall	_i2c_write_and_stop
                           000403  2099 	C$i2c.h$263$1$106 ==.
                                   2100 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:263: EA = 1;                     //Re-Enable interrupts
      000403 D2 AF            [12] 2101 	setb	_EA
                           000405  2102 	C$i2c.h$264$1$106 ==.
                           000405  2103 	XG$i2c_write_data$0$0 ==.
      000405 22               [24] 2104 	ret
                                   2105 ;------------------------------------------------------------
                                   2106 ;Allocation info for local variables in function 'i2c_read_data'
                                   2107 ;------------------------------------------------------------
                                   2108 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2109 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2110 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2111 ;addr                      Allocated to registers r7 
                                   2112 ;j                         Allocated to registers 
                                   2113 ;------------------------------------------------------------
                           000406  2114 	G$i2c_read_data$0$0 ==.
                           000406  2115 	C$i2c.h$267$1$106 ==.
                                   2116 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2117 ;	-----------------------------------------
                                   2118 ;	 function i2c_read_data
                                   2119 ;	-----------------------------------------
      000406                       2120 _i2c_read_data:
      000406 AF 82            [24] 2121 	mov	r7,dpl
                           000408  2122 	C$i2c.h$271$1$108 ==.
                                   2123 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:271: EA = 0;                     //Don't allow interrupts during I2C work
      000408 C2 AF            [12] 2124 	clr	_EA
                           00040A  2125 	C$i2c.h$272$1$108 ==.
                                   2126 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: i2c_start();                //Start I2C transfer
      00040A C0 07            [24] 2127 	push	ar7
      00040C 12r03r51         [24] 2128 	lcall	_i2c_start
      00040F D0 07            [24] 2129 	pop	ar7
                           000411  2130 	C$i2c.h$273$1$108 ==.
                                   2131 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:273: i2c_write(addr & ~0x01);    //Write address of device that will be written to, send 0
      000411 74 FE            [12] 2132 	mov	a,#0xfe
      000413 5F               [12] 2133 	anl	a,r7
      000414 F5 82            [12] 2134 	mov	dpl,a
      000416 C0 07            [24] 2135 	push	ar7
      000418 12r03r5E         [24] 2136 	lcall	_i2c_write
                           00041B  2137 	C$i2c.h$274$1$108 ==.
                                   2138 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:274: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      00041B 85*0F 82         [24] 2139 	mov	dpl,_i2c_read_data_PARM_2
      00041E 12r03r67         [24] 2140 	lcall	_i2c_write_and_stop
                           000421  2141 	C$i2c.h$275$1$108 ==.
                                   2142 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:275: i2c_start();                //Start I2C transfer
      000421 12r03r51         [24] 2143 	lcall	_i2c_start
      000424 D0 07            [24] 2144 	pop	ar7
                           000426  2145 	C$i2c.h$276$1$108 ==.
                                   2146 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:276: i2c_write(addr | 0x01);     //Write address again, this time indicating a read operation
      000426 74 01            [12] 2147 	mov	a,#0x01
      000428 4F               [12] 2148 	orl	a,r7
      000429 F5 82            [12] 2149 	mov	dpl,a
      00042B 12r03r5E         [24] 2150 	lcall	_i2c_write
                           00042E  2151 	C$i2c.h$277$1$108 ==.
                                   2152 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      00042E 7F 00            [12] 2153 	mov	r7,#0x00
      000430                       2154 00103$:
      000430 AD*13            [24] 2155 	mov	r5,_i2c_read_data_PARM_4
      000432 7E 00            [12] 2156 	mov	r6,#0x00
      000434 1D               [12] 2157 	dec	r5
      000435 BD FF 01         [24] 2158 	cjne	r5,#0xff,00114$
      000438 1E               [12] 2159 	dec	r6
      000439                       2160 00114$:
      000439 8F 03            [24] 2161 	mov	ar3,r7
      00043B 7C 00            [12] 2162 	mov	r4,#0x00
      00043D C3               [12] 2163 	clr	c
      00043E EB               [12] 2164 	mov	a,r3
      00043F 9D               [12] 2165 	subb	a,r5
      000440 EC               [12] 2166 	mov	a,r4
      000441 64 80            [12] 2167 	xrl	a,#0x80
      000443 8E F0            [24] 2168 	mov	b,r6
      000445 63 F0 80         [24] 2169 	xrl	b,#0x80
      000448 95 F0            [12] 2170 	subb	a,b
      00044A 50 2E            [24] 2171 	jnc	00101$
                           00044C  2172 	C$i2c.h$279$2$109 ==.
                                   2173 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:279: AA = 1;                 //Set acknowledge bit
      00044C D2 C2            [12] 2174 	setb	_AA
                           00044E  2175 	C$i2c.h$280$2$109 ==.
                                   2176 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:280: buffer[j] = i2c_read(); //Read data, save it in buffer
      00044E EF               [12] 2177 	mov	a,r7
      00044F 25*10            [12] 2178 	add	a,_i2c_read_data_PARM_3
      000451 FC               [12] 2179 	mov	r4,a
      000452 E4               [12] 2180 	clr	a
      000453 35*11            [12] 2181 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000455 FD               [12] 2182 	mov	r5,a
      000456 AE*12            [24] 2183 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      000458 C0 07            [24] 2184 	push	ar7
      00045A C0 06            [24] 2185 	push	ar6
      00045C C0 05            [24] 2186 	push	ar5
      00045E C0 04            [24] 2187 	push	ar4
      000460 12r03r72         [24] 2188 	lcall	_i2c_read
      000463 AB 82            [24] 2189 	mov	r3,dpl
      000465 D0 04            [24] 2190 	pop	ar4
      000467 D0 05            [24] 2191 	pop	ar5
      000469 D0 06            [24] 2192 	pop	ar6
      00046B D0 07            [24] 2193 	pop	ar7
      00046D 8C 82            [24] 2194 	mov	dpl,r4
      00046F 8D 83            [24] 2195 	mov	dph,r5
      000471 8E F0            [24] 2196 	mov	b,r6
      000473 EB               [12] 2197 	mov	a,r3
      000474 12r00r00         [24] 2198 	lcall	__gptrput
                           000477  2199 	C$i2c.h$277$1$108 ==.
                                   2200 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      000477 0F               [12] 2201 	inc	r7
      000478 80 B6            [24] 2202 	sjmp	00103$
      00047A                       2203 00101$:
                           00047A  2204 	C$i2c.h$282$1$108 ==.
                                   2205 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:282: AA = 0;
      00047A C2 C2            [12] 2206 	clr	_AA
                           00047C  2207 	C$i2c.h$283$1$108 ==.
                                   2208 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:283: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00047C AE*13            [24] 2209 	mov	r6,_i2c_read_data_PARM_4
      00047E 7F 00            [12] 2210 	mov	r7,#0x00
      000480 1E               [12] 2211 	dec	r6
      000481 BE FF 01         [24] 2212 	cjne	r6,#0xff,00116$
      000484 1F               [12] 2213 	dec	r7
      000485                       2214 00116$:
      000485 EE               [12] 2215 	mov	a,r6
      000486 25*10            [12] 2216 	add	a,_i2c_read_data_PARM_3
      000488 FE               [12] 2217 	mov	r6,a
      000489 EF               [12] 2218 	mov	a,r7
      00048A 35*11            [12] 2219 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00048C FF               [12] 2220 	mov	r7,a
      00048D AD*12            [24] 2221 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      00048F C0 07            [24] 2222 	push	ar7
      000491 C0 06            [24] 2223 	push	ar6
      000493 C0 05            [24] 2224 	push	ar5
      000495 12r03r7B         [24] 2225 	lcall	_i2c_read_and_stop
      000498 AC 82            [24] 2226 	mov	r4,dpl
      00049A D0 05            [24] 2227 	pop	ar5
      00049C D0 06            [24] 2228 	pop	ar6
      00049E D0 07            [24] 2229 	pop	ar7
      0004A0 8E 82            [24] 2230 	mov	dpl,r6
      0004A2 8F 83            [24] 2231 	mov	dph,r7
      0004A4 8D F0            [24] 2232 	mov	b,r5
      0004A6 EC               [12] 2233 	mov	a,r4
      0004A7 12r00r00         [24] 2234 	lcall	__gptrput
                           0004AA  2235 	C$i2c.h$284$1$108 ==.
                                   2236 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:284: EA = 1;                     //Re-Enable interrupts
      0004AA D2 AF            [12] 2237 	setb	_EA
                           0004AC  2238 	C$i2c.h$285$1$108 ==.
                           0004AC  2239 	XG$i2c_read_data$0$0 ==.
      0004AC 22               [24] 2240 	ret
                                   2241 ;------------------------------------------------------------
                                   2242 ;Allocation info for local variables in function 'Accel_Init'
                                   2243 ;------------------------------------------------------------
                           0004AD  2244 	G$Accel_Init$0$0 ==.
                           0004AD  2245 	C$i2c.h$294$1$108 ==.
                                   2246 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:294: void Accel_Init(void)
                                   2247 ;	-----------------------------------------
                                   2248 ;	 function Accel_Init
                                   2249 ;	-----------------------------------------
      0004AD                       2250 _Accel_Init:
                           0004AD  2251 	C$i2c.h$298$1$111 ==.
                                   2252 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:298: Data2[0]=0x23;  //normal power mode, 50Hz ODR, y & x axes enabled
      0004AD 75*00 23         [24] 2253 	mov	_Data2,#0x23
                           0004B0  2254 	C$i2c.h$300$1$111 ==.
                                   2255 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:300: Data2[1]=0x00;  //default - no filtering
      0004B0 75*01 00         [24] 2256 	mov	(_Data2 + 0x0001),#0x00
                           0004B3  2257 	C$i2c.h$301$1$111 ==.
                                   2258 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:301: Data2[1]=0x10;  //filtered data selected, HPF = 1.0->0.125Hz
      0004B3 75*01 10         [24] 2259 	mov	(_Data2 + 0x0001),#0x10
                           0004B6  2260 	C$i2c.h$302$1$111 ==.
                                   2261 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:302: Data2[2]=0x00;  //default - no interrupts enabled
      0004B6 75*02 00         [24] 2262 	mov	(_Data2 + 0x0002),#0x00
                           0004B9  2263 	C$i2c.h$304$1$111 ==.
                                   2264 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:304: i2c_write_data(addr_accel, 0x20, Data2, 1);
      0004B9 75*0Br00         [24] 2265 	mov	_i2c_write_data_PARM_3,#_Data2
      0004BC 75*0C 00         [24] 2266 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004BF 75*0D 40         [24] 2267 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C2 75*0A 20         [24] 2268 	mov	_i2c_write_data_PARM_2,#0x20
      0004C5 75*0E 01         [24] 2269 	mov	_i2c_write_data_PARM_4,#0x01
      0004C8 75 82 30         [24] 2270 	mov	dpl,#0x30
      0004CB 12r03r8C         [24] 2271 	lcall	_i2c_write_data
                           0004CE  2272 	C$i2c.h$310$1$111 ==.
                           0004CE  2273 	XG$Accel_Init$0$0 ==.
      0004CE 22               [24] 2274 	ret
                                   2275 ;------------------------------------------------------------
                                   2276 ;Allocation info for local variables in function 'Accel_Init_C'
                                   2277 ;------------------------------------------------------------
                           0004CF  2278 	G$Accel_Init_C$0$0 ==.
                           0004CF  2279 	C$i2c.h$313$1$111 ==.
                                   2280 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:313: void Accel_Init_C(void)
                                   2281 ;	-----------------------------------------
                                   2282 ;	 function Accel_Init_C
                                   2283 ;	-----------------------------------------
      0004CF                       2284 _Accel_Init_C:
                           0004CF  2285 	C$i2c.h$318$1$113 ==.
                                   2286 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:318: Data2[0]=0x04;  //set register address auto increment bit
      0004CF 75*00 04         [24] 2287 	mov	_Data2,#0x04
                           0004D2  2288 	C$i2c.h$319$1$113 ==.
                                   2289 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:319: i2c_write_data(addr_accelC, 0x23, Data2, 1);
      0004D2 75*0Br00         [24] 2290 	mov	_i2c_write_data_PARM_3,#_Data2
      0004D5 75*0C 00         [24] 2291 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004D8 75*0D 40         [24] 2292 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004DB 75*0A 23         [24] 2293 	mov	_i2c_write_data_PARM_2,#0x23
      0004DE 75*0E 01         [24] 2294 	mov	_i2c_write_data_PARM_4,#0x01
      0004E1 75 82 3A         [24] 2295 	mov	dpl,#0x3a
      0004E4 12r03r8C         [24] 2296 	lcall	_i2c_write_data
                           0004E7  2297 	C$i2c.h$321$1$113 ==.
                                   2298 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:321: Data2[0]=0x6B;  //R20 normal power mode, 800Hz ODR, y & x axes enabled
      0004E7 75*00 6B         [24] 2299 	mov	_Data2,#0x6b
                           0004EA  2300 	C$i2c.h$323$1$113 ==.
                                   2301 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:323: Data2[1]=0x00;  //R21 Default - no HP filtering
      0004EA 75*01 00         [24] 2302 	mov	(_Data2 + 0x0001),#0x00
                           0004ED  2303 	C$i2c.h$325$1$113 ==.
                                   2304 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:325: Data2[2]=0x00;  //R22 Default - no interrupts enabled
      0004ED 75*02 00         [24] 2305 	mov	(_Data2 + 0x0002),#0x00
                           0004F0  2306 	C$i2c.h$326$1$113 ==.
                                   2307 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:326: i2c_write_data(addr_accelC, 0x20, Data2, 1);
      0004F0 75*0Br00         [24] 2308 	mov	_i2c_write_data_PARM_3,#_Data2
      0004F3 75*0C 00         [24] 2309 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004F6 75*0D 40         [24] 2310 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004F9 75*0A 20         [24] 2311 	mov	_i2c_write_data_PARM_2,#0x20
      0004FC 75*0E 01         [24] 2312 	mov	_i2c_write_data_PARM_4,#0x01
      0004FF 75 82 3A         [24] 2313 	mov	dpl,#0x3a
      000502 12r03r8C         [24] 2314 	lcall	_i2c_write_data
                           000505  2315 	C$i2c.h$328$1$113 ==.
                           000505  2316 	XG$Accel_Init_C$0$0 ==.
      000505 22               [24] 2317 	ret
                                   2318 ;------------------------------------------------------------
                                   2319 ;Allocation info for local variables in function 'main'
                                   2320 ;------------------------------------------------------------
                           000506  2321 	G$main$0$0 ==.
                           000506  2322 	C$Lab3_2_SteeringCalibration.c$29$1$113 ==.
                                   2323 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:29: void main(void)
                                   2324 ;	-----------------------------------------
                                   2325 ;	 function main
                                   2326 ;	-----------------------------------------
      000506                       2327 _main:
                           000506  2328 	C$Lab3_2_SteeringCalibration.c$32$1$121 ==.
                                   2329 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:32: Sys_Init();
      000506 12r00r37         [24] 2330 	lcall	_Sys_Init
                           000509  2331 	C$Lab3_2_SteeringCalibration.c$33$1$121 ==.
                                   2332 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:33: putchar(' '); //the quotes in this line may not format correctly
      000509 75 82 20         [24] 2333 	mov	dpl,#0x20
      00050C 12r00r4A         [24] 2334 	lcall	_putchar
                           00050F  2335 	C$Lab3_2_SteeringCalibration.c$34$1$121 ==.
                                   2336 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:34: Port_Init();
      00050F 12r05r3C         [24] 2337 	lcall	_Port_Init
                           000512  2338 	C$Lab3_2_SteeringCalibration.c$35$1$121 ==.
                                   2339 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:35: XBR0_Init();
      000512 12r05r40         [24] 2340 	lcall	_XBR0_Init
                           000515  2341 	C$Lab3_2_SteeringCalibration.c$36$1$121 ==.
                                   2342 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:36: PCA_Init();
      000515 12r05r44         [24] 2343 	lcall	_PCA_Init
                           000518  2344 	C$Lab3_2_SteeringCalibration.c$38$1$121 ==.
                                   2345 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:38: printf("Embedded Control Steering Calibration\n");
      000518 74r29            [12] 2346 	mov	a,#___str_3
      00051A C0 E0            [24] 2347 	push	acc
      00051C 74s00            [12] 2348 	mov	a,#(___str_3 >> 8)
      00051E C0 E0            [24] 2349 	push	acc
      000520 74 80            [12] 2350 	mov	a,#0x80
      000522 C0 E0            [24] 2351 	push	acc
      000524 12r00r00         [24] 2352 	lcall	_printf
      000527 15 81            [12] 2353 	dec	sp
      000529 15 81            [12] 2354 	dec	sp
      00052B 15 81            [12] 2355 	dec	sp
                           00052D  2356 	C$Lab3_2_SteeringCalibration.c$40$1$121 ==.
                                   2357 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:40: SERVO_PW = PW_CENTER;
      00052D 85*14*1A         [24] 2358 	mov	_SERVO_PW,_PW_CENTER
      000530 85*15*1B         [24] 2359 	mov	(_SERVO_PW + 1),(_PW_CENTER + 1)
                           000533  2360 	C$Lab3_2_SteeringCalibration.c$41$1$121 ==.
                                   2361 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:41: CalibrateSteering(); // Calibrate boundries once
      000533 12r06r0D         [24] 2362 	lcall	_CalibrateSteering
                           000536  2363 	C$Lab3_2_SteeringCalibration.c$42$1$121 ==.
                                   2364 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:42: while(1)
      000536                       2365 00102$:
                           000536  2366 	C$Lab3_2_SteeringCalibration.c$43$1$121 ==.
                                   2367 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:43: Steering_Servo();
      000536 12r05r62         [24] 2368 	lcall	_Steering_Servo
      000539 80 FB            [24] 2369 	sjmp	00102$
                           00053B  2370 	C$Lab3_2_SteeringCalibration.c$44$1$121 ==.
                           00053B  2371 	XG$main$0$0 ==.
      00053B 22               [24] 2372 	ret
                                   2373 ;------------------------------------------------------------
                                   2374 ;Allocation info for local variables in function 'Port_Init'
                                   2375 ;------------------------------------------------------------
                           00053C  2376 	G$Port_Init$0$0 ==.
                           00053C  2377 	C$Lab3_2_SteeringCalibration.c$51$1$121 ==.
                                   2378 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:51: void Port_Init()
                                   2379 ;	-----------------------------------------
                                   2380 ;	 function Port_Init
                                   2381 ;	-----------------------------------------
      00053C                       2382 _Port_Init:
                           00053C  2383 	C$Lab3_2_SteeringCalibration.c$53$1$122 ==.
                                   2384 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:53: P1MDOUT = 0x0F ;//set output pin for CEX0 in push-pull mode
      00053C 75 A5 0F         [24] 2385 	mov	_P1MDOUT,#0x0f
                           00053F  2386 	C$Lab3_2_SteeringCalibration.c$54$1$122 ==.
                           00053F  2387 	XG$Port_Init$0$0 ==.
      00053F 22               [24] 2388 	ret
                                   2389 ;------------------------------------------------------------
                                   2390 ;Allocation info for local variables in function 'XBR0_Init'
                                   2391 ;------------------------------------------------------------
                           000540  2392 	G$XBR0_Init$0$0 ==.
                           000540  2393 	C$Lab3_2_SteeringCalibration.c$61$1$122 ==.
                                   2394 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:61: void XBR0_Init()
                                   2395 ;	-----------------------------------------
                                   2396 ;	 function XBR0_Init
                                   2397 ;	-----------------------------------------
      000540                       2398 _XBR0_Init:
                           000540  2399 	C$Lab3_2_SteeringCalibration.c$63$1$123 ==.
                                   2400 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:63: XBR0 = 0x27;     // set up URART0, SPI, SMB, and CEX 0-3
      000540 75 E1 27         [24] 2401 	mov	_XBR0,#0x27
                           000543  2402 	C$Lab3_2_SteeringCalibration.c$65$1$123 ==.
                           000543  2403 	XG$XBR0_Init$0$0 ==.
      000543 22               [24] 2404 	ret
                                   2405 ;------------------------------------------------------------
                                   2406 ;Allocation info for local variables in function 'PCA_Init'
                                   2407 ;------------------------------------------------------------
                           000544  2408 	G$PCA_Init$0$0 ==.
                           000544  2409 	C$Lab3_2_SteeringCalibration.c$72$1$123 ==.
                                   2410 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:72: void PCA_Init(void)
                                   2411 ;	-----------------------------------------
                                   2412 ;	 function PCA_Init
                                   2413 ;	-----------------------------------------
      000544                       2414 _PCA_Init:
                           000544  2415 	C$Lab3_2_SteeringCalibration.c$74$1$125 ==.
                                   2416 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:74: EA = 1; // Enable all interrupts
      000544 D2 AF            [12] 2417 	setb	_EA
                           000546  2418 	C$Lab3_2_SteeringCalibration.c$75$1$125 ==.
                                   2419 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:75: EIE1 |= 0x08; // Enable PCA0 interrupts
      000546 43 E6 08         [24] 2420 	orl	_EIE1,#0x08
                           000549  2421 	C$Lab3_2_SteeringCalibration.c$76$1$125 ==.
                                   2422 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:76: PCA0MD = 0x81;   // SYSCLK/12, enable CF interrupts, suspend when idle
      000549 75 D9 81         [24] 2423 	mov	_PCA0MD,#0x81
                           00054C  2424 	C$Lab3_2_SteeringCalibration.c$77$1$125 ==.
                                   2425 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:77: PCA0CPM0 = 0xC2; // 16 bit, enable compare, enable PWM
      00054C 75 DA C2         [24] 2426 	mov	_PCA0CPM0,#0xc2
                           00054F  2427 	C$Lab3_2_SteeringCalibration.c$78$1$125 ==.
                                   2428 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:78: PCA0CN |= 0x40;  // enable PCA
      00054F 43 D8 40         [24] 2429 	orl	_PCA0CN,#0x40
                           000552  2430 	C$Lab3_2_SteeringCalibration.c$79$1$125 ==.
                           000552  2431 	XG$PCA_Init$0$0 ==.
      000552 22               [24] 2432 	ret
                                   2433 ;------------------------------------------------------------
                                   2434 ;Allocation info for local variables in function 'PCA_ISR'
                                   2435 ;------------------------------------------------------------
                           000553  2436 	G$PCA_ISR$0$0 ==.
                           000553  2437 	C$Lab3_2_SteeringCalibration.c$86$1$125 ==.
                                   2438 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:86: void PCA_ISR ( void ) __interrupt 9
                                   2439 ;	-----------------------------------------
                                   2440 ;	 function PCA_ISR
                                   2441 ;	-----------------------------------------
      000553                       2442 _PCA_ISR:
                           000553  2443 	C$Lab3_2_SteeringCalibration.c$88$1$127 ==.
                                   2444 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:88: if (CF)
                           000553  2445 	C$Lab3_2_SteeringCalibration.c$90$2$128 ==.
                                   2446 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:90: CF = 0; // Clear overflow flag
      000553 10 DF 02         [24] 2447 	jbc	_CF,00108$
      000556 80 06            [24] 2448 	sjmp	00102$
      000558                       2449 00108$:
                           000558  2450 	C$Lab3_2_SteeringCalibration.c$91$2$128 ==.
                                   2451 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:91: PCA0 = PCA_START; // Set period for 20ms
      000558 75 E9 00         [24] 2452 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      00055B 75 F9 70         [24] 2453 	mov	((_PCA0 >> 8) & 0xFF),#0x70
      00055E                       2454 00102$:
                           00055E  2455 	C$Lab3_2_SteeringCalibration.c$94$1$127 ==.
                                   2456 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:94: PCA0CN &= 0x40; // Clear other PCI interrupt sources
      00055E 53 D8 40         [24] 2457 	anl	_PCA0CN,#0x40
                           000561  2458 	C$Lab3_2_SteeringCalibration.c$95$1$127 ==.
                           000561  2459 	XG$PCA_ISR$0$0 ==.
      000561 32               [24] 2460 	reti
                                   2461 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2462 ;	eliminated unneeded push/pop psw
                                   2463 ;	eliminated unneeded push/pop dpl
                                   2464 ;	eliminated unneeded push/pop dph
                                   2465 ;	eliminated unneeded push/pop b
                                   2466 ;	eliminated unneeded push/pop acc
                                   2467 ;------------------------------------------------------------
                                   2468 ;Allocation info for local variables in function 'Steering_Servo'
                                   2469 ;------------------------------------------------------------
                                   2470 ;input                     Allocated to registers r7 
                                   2471 ;------------------------------------------------------------
                           000562  2472 	G$Steering_Servo$0$0 ==.
                           000562  2473 	C$Lab3_2_SteeringCalibration.c$97$1$127 ==.
                                   2474 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:97: void Steering_Servo()
                                   2475 ;	-----------------------------------------
                                   2476 ;	 function Steering_Servo
                                   2477 ;	-----------------------------------------
      000562                       2478 _Steering_Servo:
                           000562  2479 	C$Lab3_2_SteeringCalibration.c$101$1$129 ==.
                                   2480 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:101: input = getchar();
      000562 12r00r54         [24] 2481 	lcall	_getchar
      000565 AF 82            [24] 2482 	mov	r7,dpl
                           000567  2483 	C$Lab3_2_SteeringCalibration.c$102$1$129 ==.
                                   2484 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:102: if(input == 'r') //if 'r' is pressed by the user
      000567 BF 72 1F         [24] 2485 	cjne	r7,#0x72,00108$
                           00056A  2486 	C$Lab3_2_SteeringCalibration.c$104$2$130 ==.
                                   2487 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:104: if(SERVO_PW+10 < PW_RIGHT)
      00056A 74 0A            [12] 2488 	mov	a,#0x0a
      00056C 25*1A            [12] 2489 	add	a,_SERVO_PW
      00056E FD               [12] 2490 	mov	r5,a
      00056F E4               [12] 2491 	clr	a
      000570 35*1B            [12] 2492 	addc	a,(_SERVO_PW + 1)
      000572 FE               [12] 2493 	mov	r6,a
      000573 C3               [12] 2494 	clr	c
      000574 ED               [12] 2495 	mov	a,r5
      000575 95*16            [12] 2496 	subb	a,_PW_RIGHT
      000577 EE               [12] 2497 	mov	a,r6
      000578 95*17            [12] 2498 	subb	a,(_PW_RIGHT + 1)
      00057A 50 2F            [24] 2499 	jnc	00109$
                           00057C  2500 	C$Lab3_2_SteeringCalibration.c$105$2$130 ==.
                                   2501 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:105: SERVO_PW = SERVO_PW + 10; //increase the steering pulsewidth by 10
      00057C 74 0A            [12] 2502 	mov	a,#0x0a
      00057E 25*1A            [12] 2503 	add	a,_SERVO_PW
      000580 F5*1A            [12] 2504 	mov	_SERVO_PW,a
      000582 E4               [12] 2505 	clr	a
      000583 35*1B            [12] 2506 	addc	a,(_SERVO_PW + 1)
      000585 F5*1B            [12] 2507 	mov	(_SERVO_PW + 1),a
      000587 80 22            [24] 2508 	sjmp	00109$
      000589                       2509 00108$:
                           000589  2510 	C$Lab3_2_SteeringCalibration.c$107$1$129 ==.
                                   2511 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:107: else if(input == 'l') //if 'l' is pressed by the user
      000589 BF 6C 1F         [24] 2512 	cjne	r7,#0x6c,00109$
                           00058C  2513 	C$Lab3_2_SteeringCalibration.c$109$2$131 ==.
                                   2514 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:109: if(SERVO_PW-10 > PW_LEFT)
      00058C E5*1A            [12] 2515 	mov	a,_SERVO_PW
      00058E 24 F6            [12] 2516 	add	a,#0xf6
      000590 FE               [12] 2517 	mov	r6,a
      000591 E5*1B            [12] 2518 	mov	a,(_SERVO_PW + 1)
      000593 34 FF            [12] 2519 	addc	a,#0xff
      000595 FF               [12] 2520 	mov	r7,a
      000596 C3               [12] 2521 	clr	c
      000597 E5*18            [12] 2522 	mov	a,_PW_LEFT
      000599 9E               [12] 2523 	subb	a,r6
      00059A E5*19            [12] 2524 	mov	a,(_PW_LEFT + 1)
      00059C 9F               [12] 2525 	subb	a,r7
      00059D 50 0C            [24] 2526 	jnc	00109$
                           00059F  2527 	C$Lab3_2_SteeringCalibration.c$110$2$131 ==.
                                   2528 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:110: SERVO_PW = SERVO_PW - 10; //decrease the steering pulsewidth by 10
      00059F E5*1A            [12] 2529 	mov	a,_SERVO_PW
      0005A1 24 F6            [12] 2530 	add	a,#0xf6
      0005A3 F5*1A            [12] 2531 	mov	_SERVO_PW,a
      0005A5 E5*1B            [12] 2532 	mov	a,(_SERVO_PW + 1)
      0005A7 34 FF            [12] 2533 	addc	a,#0xff
      0005A9 F5*1B            [12] 2534 	mov	(_SERVO_PW + 1),a
      0005AB                       2535 00109$:
                           0005AB  2536 	C$Lab3_2_SteeringCalibration.c$112$1$129 ==.
                                   2537 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:112: PCA0CP0 = 0xFFFF - SERVO_PW; // Set CEX0 compare value (May need to break up into high and low to work)
      0005AB 74 FF            [12] 2538 	mov	a,#0xff
      0005AD C3               [12] 2539 	clr	c
      0005AE 95*1A            [12] 2540 	subb	a,_SERVO_PW
      0005B0 F5 EA            [12] 2541 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      0005B2 74 FF            [12] 2542 	mov	a,#0xff
      0005B4 95*1B            [12] 2543 	subb	a,(_SERVO_PW + 1)
      0005B6 F5 FA            [12] 2544 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           0005B8  2545 	C$Lab3_2_SteeringCalibration.c$113$1$129 ==.
                                   2546 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:113: printf("\r\nSERVO_PW: %u\n", SERVO_PW);
      0005B8 C0*1A            [24] 2547 	push	_SERVO_PW
      0005BA C0*1B            [24] 2548 	push	(_SERVO_PW + 1)
      0005BC 74r50            [12] 2549 	mov	a,#___str_4
      0005BE C0 E0            [24] 2550 	push	acc
      0005C0 74s00            [12] 2551 	mov	a,#(___str_4 >> 8)
      0005C2 C0 E0            [24] 2552 	push	acc
      0005C4 74 80            [12] 2553 	mov	a,#0x80
      0005C6 C0 E0            [24] 2554 	push	acc
      0005C8 12r00r00         [24] 2555 	lcall	_printf
      0005CB E5 81            [12] 2556 	mov	a,sp
      0005CD 24 FB            [12] 2557 	add	a,#0xfb
      0005CF F5 81            [12] 2558 	mov	sp,a
                           0005D1  2559 	C$Lab3_2_SteeringCalibration.c$115$1$129 ==.
                           0005D1  2560 	XG$Steering_Servo$0$0 ==.
      0005D1 22               [24] 2561 	ret
                                   2562 ;------------------------------------------------------------
                                   2563 ;Allocation info for local variables in function 'Turn'
                                   2564 ;------------------------------------------------------------
                                   2565 ;input                     Allocated to registers r7 
                                   2566 ;------------------------------------------------------------
                           0005D2  2567 	G$Turn$0$0 ==.
                           0005D2  2568 	C$Lab3_2_SteeringCalibration.c$117$1$129 ==.
                                   2569 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:117: void Turn(void) // Turns the car left and right, Press k to escape.
                                   2570 ;	-----------------------------------------
                                   2571 ;	 function Turn
                                   2572 ;	-----------------------------------------
      0005D2                       2573 _Turn:
                           0005D2  2574 	C$Lab3_2_SteeringCalibration.c$119$1$129 ==.
                                   2575 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:119: char input = 0;
      0005D2 7F 00            [12] 2576 	mov	r7,#0x00
                           0005D4  2577 	C$Lab3_2_SteeringCalibration.c$120$1$133 ==.
                                   2578 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:120: while (input != 'k')
      0005D4                       2579 00106$:
      0005D4 BF 6B 02         [24] 2580 	cjne	r7,#0x6b,00123$
      0005D7 80 33            [24] 2581 	sjmp	00109$
      0005D9                       2582 00123$:
                           0005D9  2583 	C$Lab3_2_SteeringCalibration.c$122$2$134 ==.
                                   2584 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:122: input = getchar();
      0005D9 12r00r54         [24] 2585 	lcall	_getchar
      0005DC AF 82            [24] 2586 	mov	r7,dpl
                           0005DE  2587 	C$Lab3_2_SteeringCalibration.c$123$2$134 ==.
                                   2588 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:123: if(input == 'r') //if 'r' is pressed by the user
      0005DE BF 72 0D         [24] 2589 	cjne	r7,#0x72,00104$
                           0005E1  2590 	C$Lab3_2_SteeringCalibration.c$125$3$135 ==.
                                   2591 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:125: SERVO_PW = SERVO_PW + 10; //increase the steering pulsewidth by 10
      0005E1 74 0A            [12] 2592 	mov	a,#0x0a
      0005E3 25*1A            [12] 2593 	add	a,_SERVO_PW
      0005E5 F5*1A            [12] 2594 	mov	_SERVO_PW,a
      0005E7 E4               [12] 2595 	clr	a
      0005E8 35*1B            [12] 2596 	addc	a,(_SERVO_PW + 1)
      0005EA F5*1B            [12] 2597 	mov	(_SERVO_PW + 1),a
      0005EC 80 0F            [24] 2598 	sjmp	00105$
      0005EE                       2599 00104$:
                           0005EE  2600 	C$Lab3_2_SteeringCalibration.c$127$2$134 ==.
                                   2601 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:127: else if(input == 'l') //if 'l' is pressed by the user
      0005EE BF 6C 0C         [24] 2602 	cjne	r7,#0x6c,00105$
                           0005F1  2603 	C$Lab3_2_SteeringCalibration.c$129$3$136 ==.
                                   2604 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:129: SERVO_PW = SERVO_PW - 10; //decrease the steering pulsewidth by 10
      0005F1 E5*1A            [12] 2605 	mov	a,_SERVO_PW
      0005F3 24 F6            [12] 2606 	add	a,#0xf6
      0005F5 F5*1A            [12] 2607 	mov	_SERVO_PW,a
      0005F7 E5*1B            [12] 2608 	mov	a,(_SERVO_PW + 1)
      0005F9 34 FF            [12] 2609 	addc	a,#0xff
      0005FB F5*1B            [12] 2610 	mov	(_SERVO_PW + 1),a
      0005FD                       2611 00105$:
                           0005FD  2612 	C$Lab3_2_SteeringCalibration.c$131$2$134 ==.
                                   2613 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:131: PCA0CP0 = 0xFFFF - SERVO_PW; // Set CEX0 compare value (May need to break up into high and low to work)
      0005FD 74 FF            [12] 2614 	mov	a,#0xff
      0005FF C3               [12] 2615 	clr	c
      000600 95*1A            [12] 2616 	subb	a,_SERVO_PW
      000602 F5 EA            [12] 2617 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000604 74 FF            [12] 2618 	mov	a,#0xff
      000606 95*1B            [12] 2619 	subb	a,(_SERVO_PW + 1)
      000608 F5 FA            [12] 2620 	mov	((_PCA0CP0 >> 8) & 0xFF),a
      00060A 80 C8            [24] 2621 	sjmp	00106$
      00060C                       2622 00109$:
                           00060C  2623 	C$Lab3_2_SteeringCalibration.c$133$1$133 ==.
                           00060C  2624 	XG$Turn$0$0 ==.
      00060C 22               [24] 2625 	ret
                                   2626 ;------------------------------------------------------------
                                   2627 ;Allocation info for local variables in function 'CalibrateSteering'
                                   2628 ;------------------------------------------------------------
                           00060D  2629 	G$CalibrateSteering$0$0 ==.
                           00060D  2630 	C$Lab3_2_SteeringCalibration.c$135$1$133 ==.
                                   2631 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:135: void CalibrateSteering(void)
                                   2632 ;	-----------------------------------------
                                   2633 ;	 function CalibrateSteering
                                   2634 ;	-----------------------------------------
      00060D                       2635 _CalibrateSteering:
                           00060D  2636 	C$Lab3_2_SteeringCalibration.c$137$1$138 ==.
                                   2637 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:137: SERVO_PW = 2765; // Set initial pulse width to 1.5ms (approx center)
      00060D 75*1A CD         [24] 2638 	mov	_SERVO_PW,#0xcd
      000610 75*1B 0A         [24] 2639 	mov	(_SERVO_PW + 1),#0x0a
                           000613  2640 	C$Lab3_2_SteeringCalibration.c$138$1$138 ==.
                                   2641 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:138: PCA0CP0 = 0xFFFF - SERVO_PW; // Set pulse width (May need to break up into high and low to work)
      000613 75 EA 32         [24] 2642 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x32
      000616 75 FA F5         [24] 2643 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xf5
                           000619  2644 	C$Lab3_2_SteeringCalibration.c$143$1$138 ==.
                                   2645 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:143: printf("\r\n Please center the car. \r\nUse l and r to turn left and right. Press k when done.");
      000619 74r60            [12] 2646 	mov	a,#___str_5
      00061B C0 E0            [24] 2647 	push	acc
      00061D 74s00            [12] 2648 	mov	a,#(___str_5 >> 8)
      00061F C0 E0            [24] 2649 	push	acc
      000621 74 80            [12] 2650 	mov	a,#0x80
      000623 C0 E0            [24] 2651 	push	acc
      000625 12r00r00         [24] 2652 	lcall	_printf
      000628 15 81            [12] 2653 	dec	sp
      00062A 15 81            [12] 2654 	dec	sp
      00062C 15 81            [12] 2655 	dec	sp
                           00062E  2656 	C$Lab3_2_SteeringCalibration.c$144$1$138 ==.
                                   2657 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:144: Turn();
      00062E 12r05rD2         [24] 2658 	lcall	_Turn
                           000631  2659 	C$Lab3_2_SteeringCalibration.c$146$1$138 ==.
                                   2660 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:146: PW_CENTER = SERVO_PW; // Save center PW
      000631 85*1A*14         [24] 2661 	mov	_PW_CENTER,_SERVO_PW
      000634 85*1B*15         [24] 2662 	mov	(_PW_CENTER + 1),(_SERVO_PW + 1)
                           000637  2663 	C$Lab3_2_SteeringCalibration.c$152$1$138 ==.
                                   2664 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:152: printf("\r\n Please turn the car all the way to the right without straining it. \r\nUse l and r to turn left and right. Press k when done.");
      000637 74rB3            [12] 2665 	mov	a,#___str_6
      000639 C0 E0            [24] 2666 	push	acc
      00063B 74s00            [12] 2667 	mov	a,#(___str_6 >> 8)
      00063D C0 E0            [24] 2668 	push	acc
      00063F 74 80            [12] 2669 	mov	a,#0x80
      000641 C0 E0            [24] 2670 	push	acc
      000643 12r00r00         [24] 2671 	lcall	_printf
      000646 15 81            [12] 2672 	dec	sp
      000648 15 81            [12] 2673 	dec	sp
      00064A 15 81            [12] 2674 	dec	sp
                           00064C  2675 	C$Lab3_2_SteeringCalibration.c$153$1$138 ==.
                                   2676 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:153: Turn();
      00064C 12r05rD2         [24] 2677 	lcall	_Turn
                           00064F  2678 	C$Lab3_2_SteeringCalibration.c$155$1$138 ==.
                                   2679 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:155: PW_RIGHT = SERVO_PW; // Save right PW
      00064F 85*1A*16         [24] 2680 	mov	_PW_RIGHT,_SERVO_PW
      000652 85*1B*17         [24] 2681 	mov	(_PW_RIGHT + 1),(_SERVO_PW + 1)
                           000655  2682 	C$Lab3_2_SteeringCalibration.c$161$1$138 ==.
                                   2683 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:161: printf("\r\n Please turn the car all the way to the left without straining it. \r\nUse l and r to turn left and right. Press k when done.");
      000655 74r32            [12] 2684 	mov	a,#___str_7
      000657 C0 E0            [24] 2685 	push	acc
      000659 74s01            [12] 2686 	mov	a,#(___str_7 >> 8)
      00065B C0 E0            [24] 2687 	push	acc
      00065D 74 80            [12] 2688 	mov	a,#0x80
      00065F C0 E0            [24] 2689 	push	acc
      000661 12r00r00         [24] 2690 	lcall	_printf
      000664 15 81            [12] 2691 	dec	sp
      000666 15 81            [12] 2692 	dec	sp
      000668 15 81            [12] 2693 	dec	sp
                           00066A  2694 	C$Lab3_2_SteeringCalibration.c$162$1$138 ==.
                                   2695 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:162: Turn();
      00066A 12r05rD2         [24] 2696 	lcall	_Turn
                           00066D  2697 	C$Lab3_2_SteeringCalibration.c$164$1$138 ==.
                                   2698 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:164: PW_LEFT = SERVO_PW; // Save left PW
      00066D 85*1A*18         [24] 2699 	mov	_PW_LEFT,_SERVO_PW
      000670 85*1B*19         [24] 2700 	mov	(_PW_LEFT + 1),(_SERVO_PW + 1)
                           000673  2701 	C$Lab3_2_SteeringCalibration.c$166$1$138 ==.
                                   2702 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-2\Lab3-2_SteeringCalibration.c:166: printf("\r\nPW_CENTER = %u \r\nPW_RIGHT = %u \r\nPW_LEFT = %u \r\n",PW_CENTER,PW_RIGHT,PW_LEFT); // Print all values
      000673 C0*18            [24] 2703 	push	_PW_LEFT
      000675 C0*19            [24] 2704 	push	(_PW_LEFT + 1)
      000677 C0*16            [24] 2705 	push	_PW_RIGHT
      000679 C0*17            [24] 2706 	push	(_PW_RIGHT + 1)
      00067B C0*14            [24] 2707 	push	_PW_CENTER
      00067D C0*15            [24] 2708 	push	(_PW_CENTER + 1)
      00067F 74rB0            [12] 2709 	mov	a,#___str_8
      000681 C0 E0            [24] 2710 	push	acc
      000683 74s01            [12] 2711 	mov	a,#(___str_8 >> 8)
      000685 C0 E0            [24] 2712 	push	acc
      000687 74 80            [12] 2713 	mov	a,#0x80
      000689 C0 E0            [24] 2714 	push	acc
      00068B 12r00r00         [24] 2715 	lcall	_printf
      00068E E5 81            [12] 2716 	mov	a,sp
      000690 24 F7            [12] 2717 	add	a,#0xf7
      000692 F5 81            [12] 2718 	mov	sp,a
                           000694  2719 	C$Lab3_2_SteeringCalibration.c$167$1$138 ==.
                           000694  2720 	XG$CalibrateSteering$0$0 ==.
      000694 22               [24] 2721 	ret
                                   2722 	.area CSEG    (CODE)
                                   2723 	.area CONST   (CODE)
                           000000  2724 FLab3_2_SteeringCalibration$__str_0$0$0 == .
      000000                       2725 ___str_0:
      000000 0A                    2726 	.db 0x0a
      000001 54 79 70 65 20 64 69  2727 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    2728 	.db 0x00
                           000016  2729 FLab3_2_SteeringCalibration$__str_1$0$0 == .
      000016                       2730 ___str_1:
      000016 20 20 20 20 20 25 63  2731 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    2732 	.db 0x00
                           000026  2733 FLab3_2_SteeringCalibration$__str_2$0$0 == .
      000026                       2734 ___str_2:
      000026 25 63                 2735 	.ascii "%c"
      000028 00                    2736 	.db 0x00
                           000029  2737 FLab3_2_SteeringCalibration$__str_3$0$0 == .
      000029                       2738 ___str_3:
      000029 45 6D 62 65 64 64 65  2739 	.ascii "Embedded Control Steering Calibration"
             64 20 43 6F 6E 74 72
             6F 6C 20 53 74 65 65
             72 69 6E 67 20 43 61
             6C 69 62 72 61 74 69
             6F 6E
      00004E 0A                    2740 	.db 0x0a
      00004F 00                    2741 	.db 0x00
                           000050  2742 FLab3_2_SteeringCalibration$__str_4$0$0 == .
      000050                       2743 ___str_4:
      000050 0D                    2744 	.db 0x0d
      000051 0A                    2745 	.db 0x0a
      000052 53 45 52 56 4F 5F 50  2746 	.ascii "SERVO_PW: %u"
             57 3A 20 25 75
      00005E 0A                    2747 	.db 0x0a
      00005F 00                    2748 	.db 0x00
                           000060  2749 FLab3_2_SteeringCalibration$__str_5$0$0 == .
      000060                       2750 ___str_5:
      000060 0D                    2751 	.db 0x0d
      000061 0A                    2752 	.db 0x0a
      000062 20 50 6C 65 61 73 65  2753 	.ascii " Please center the car. "
             20 63 65 6E 74 65 72
             20 74 68 65 20 63 61
             72 2E 20
      00007A 0D                    2754 	.db 0x0d
      00007B 0A                    2755 	.db 0x0a
      00007C 55 73 65 20 6C 20 61  2756 	.ascii "Use l and r to turn left and rig"
             6E 64 20 72 20 74 6F
             20 74 75 72 6E 20 6C
             65 66 74 20 61 6E 64
             20 72 69 67
      00009C 68 74 2E 20 50 72 65  2757 	.ascii "ht. Press k when done."
             73 73 20 6B 20 77 68
             65 6E 20 64 6F 6E 65
             2E
      0000B2 00                    2758 	.db 0x00
                           0000B3  2759 FLab3_2_SteeringCalibration$__str_6$0$0 == .
      0000B3                       2760 ___str_6:
      0000B3 0D                    2761 	.db 0x0d
      0000B4 0A                    2762 	.db 0x0a
      0000B5 20 50 6C 65 61 73 65  2763 	.ascii " Please turn the car all the way to the right without stra"
             20 74 75 72 6E 20 74
             68 65 20 63 61 72 20
             61 6C 6C 20 74 68 65
             20 77 61 79 20 74 6F
             20 74 68 65 20 72 69
             67 68 74 20 77 69 74
             68 6F 75 74 20 73 74
             72 61
      0000EF 69 6E 69 6E 67 20 69  2764 	.ascii "ining it. "
             74 2E 20
      0000F9 0D                    2765 	.db 0x0d
      0000FA 0A                    2766 	.db 0x0a
      0000FB 55 73 65 20 6C 20 61  2767 	.ascii "Use l and r to turn left and right. Press k when"
             6E 64 20 72 20 74 6F
             20 74 75 72 6E 20 6C
             65 66 74 20 61 6E 64
             20 72 69 67 68 74 2E
             20 50 72 65 73 73 20
             6B 20 77 68 65 6E
      00012B 20 64 6F 6E 65 2E     2768 	.ascii " done."
      000131 00                    2769 	.db 0x00
                           000132  2770 FLab3_2_SteeringCalibration$__str_7$0$0 == .
      000132                       2771 ___str_7:
      000132 0D                    2772 	.db 0x0d
      000133 0A                    2773 	.db 0x0a
      000134 20 50 6C 65 61 73 65  2774 	.ascii " Please turn the car all the way to the left without strai"
             20 74 75 72 6E 20 74
             68 65 20 63 61 72 20
             61 6C 6C 20 74 68 65
             20 77 61 79 20 74 6F
             20 74 68 65 20 6C 65
             66 74 20 77 69 74 68
             6F 75 74 20 73 74 72
             61 69
      00016E 6E 69 6E 67 20 69 74  2775 	.ascii "ning it. "
             2E 20
      000177 0D                    2776 	.db 0x0d
      000178 0A                    2777 	.db 0x0a
      000179 55 73 65 20 6C 20 61  2778 	.ascii "Use l and r to turn left and right. Press k when "
             6E 64 20 72 20 74 6F
             20 74 75 72 6E 20 6C
             65 66 74 20 61 6E 64
             20 72 69 67 68 74 2E
             20 50 72 65 73 73 20
             6B 20 77 68 65 6E 20
      0001AA 64 6F 6E 65 2E        2779 	.ascii "done."
      0001AF 00                    2780 	.db 0x00
                           0001B0  2781 FLab3_2_SteeringCalibration$__str_8$0$0 == .
      0001B0                       2782 ___str_8:
      0001B0 0D                    2783 	.db 0x0d
      0001B1 0A                    2784 	.db 0x0a
      0001B2 50 57 5F 43 45 4E 54  2785 	.ascii "PW_CENTER = %u "
             45 52 20 3D 20 25 75
             20
      0001C1 0D                    2786 	.db 0x0d
      0001C2 0A                    2787 	.db 0x0a
      0001C3 50 57 5F 52 49 47 48  2788 	.ascii "PW_RIGHT = %u "
             54 20 3D 20 25 75 20
      0001D1 0D                    2789 	.db 0x0d
      0001D2 0A                    2790 	.db 0x0a
      0001D3 50 57 5F 4C 45 46 54  2791 	.ascii "PW_LEFT = %u "
             20 3D 20 25 75 20
      0001E0 0D                    2792 	.db 0x0d
      0001E1 0A                    2793 	.db 0x0a
      0001E2 00                    2794 	.db 0x00
                                   2795 	.area XINIT   (CODE)
                                   2796 	.area CABS    (ABS,CODE)
