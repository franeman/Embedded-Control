                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module Lab3_3_SteeringAndCompass
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _read_keypad
                                     13 	.globl _strlen
                                     14 	.globl _putchar
                                     15 	.globl _getchar
                                     16 	.globl _vsprintf
                                     17 	.globl _printf
                                     18 	.globl _getchar_nw
                                     19 	.globl _Sys_Init
                                     20 	.globl _UART0_Init
                                     21 	.globl _SYSCLK_Init
                                     22 	.globl _TURN_EN
                                     23 	.globl _BUS_SCL
                                     24 	.globl _BUS_TOE
                                     25 	.globl _BUS_FTE
                                     26 	.globl _BUS_AA
                                     27 	.globl _BUS_INT
                                     28 	.globl _BUS_STOP
                                     29 	.globl _BUS_START
                                     30 	.globl _BUS_EN
                                     31 	.globl _BUS_BUSY
                                     32 	.globl _SPIF
                                     33 	.globl _WCOL
                                     34 	.globl _MODF
                                     35 	.globl _RXOVRN
                                     36 	.globl _TXBSY
                                     37 	.globl _SLVSEL
                                     38 	.globl _MSTEN
                                     39 	.globl _SPIEN
                                     40 	.globl _AD0EN
                                     41 	.globl _ADCEN
                                     42 	.globl _AD0TM
                                     43 	.globl _ADCTM
                                     44 	.globl _AD0INT
                                     45 	.globl _ADCINT
                                     46 	.globl _AD0BUSY
                                     47 	.globl _ADBUSY
                                     48 	.globl _AD0CM1
                                     49 	.globl _ADSTM1
                                     50 	.globl _AD0CM0
                                     51 	.globl _ADSTM0
                                     52 	.globl _AD0WINT
                                     53 	.globl _ADWINT
                                     54 	.globl _AD0LJST
                                     55 	.globl _ADLJST
                                     56 	.globl _CF
                                     57 	.globl _CR
                                     58 	.globl _CCF4
                                     59 	.globl _CCF3
                                     60 	.globl _CCF2
                                     61 	.globl _CCF1
                                     62 	.globl _CCF0
                                     63 	.globl _CY
                                     64 	.globl _AC
                                     65 	.globl _F0
                                     66 	.globl _RS1
                                     67 	.globl _RS0
                                     68 	.globl _OV
                                     69 	.globl _F1
                                     70 	.globl _P
                                     71 	.globl _TF2
                                     72 	.globl _EXF2
                                     73 	.globl _RCLK
                                     74 	.globl _TCLK
                                     75 	.globl _EXEN2
                                     76 	.globl _TR2
                                     77 	.globl _CT2
                                     78 	.globl _CPRL2
                                     79 	.globl _BUSY
                                     80 	.globl _ENSMB
                                     81 	.globl _STA
                                     82 	.globl _STO
                                     83 	.globl _SI
                                     84 	.globl _AA
                                     85 	.globl _SMBFTE
                                     86 	.globl _SMBTOE
                                     87 	.globl _PT2
                                     88 	.globl _PS
                                     89 	.globl _PS0
                                     90 	.globl _PT1
                                     91 	.globl _PX1
                                     92 	.globl _PT0
                                     93 	.globl _PX0
                                     94 	.globl _P3_7
                                     95 	.globl _P3_6
                                     96 	.globl _P3_5
                                     97 	.globl _P3_4
                                     98 	.globl _P3_3
                                     99 	.globl _P3_2
                                    100 	.globl _P3_1
                                    101 	.globl _P3_0
                                    102 	.globl _EA
                                    103 	.globl _ET2
                                    104 	.globl _ES
                                    105 	.globl _ES0
                                    106 	.globl _ET1
                                    107 	.globl _EX1
                                    108 	.globl _ET0
                                    109 	.globl _EX0
                                    110 	.globl _P2_7
                                    111 	.globl _P2_6
                                    112 	.globl _P2_5
                                    113 	.globl _P2_4
                                    114 	.globl _P2_3
                                    115 	.globl _P2_2
                                    116 	.globl _P2_1
                                    117 	.globl _P2_0
                                    118 	.globl _S0MODE
                                    119 	.globl _SM00
                                    120 	.globl _SM0
                                    121 	.globl _SM10
                                    122 	.globl _SM1
                                    123 	.globl _MCE0
                                    124 	.globl _SM20
                                    125 	.globl _SM2
                                    126 	.globl _REN0
                                    127 	.globl _REN
                                    128 	.globl _TB80
                                    129 	.globl _TB8
                                    130 	.globl _RB80
                                    131 	.globl _RB8
                                    132 	.globl _TI0
                                    133 	.globl _TI
                                    134 	.globl _RI0
                                    135 	.globl _RI
                                    136 	.globl _P1_7
                                    137 	.globl _P1_6
                                    138 	.globl _P1_5
                                    139 	.globl _P1_4
                                    140 	.globl _P1_3
                                    141 	.globl _P1_2
                                    142 	.globl _P1_1
                                    143 	.globl _P1_0
                                    144 	.globl _TF1
                                    145 	.globl _TR1
                                    146 	.globl _TF0
                                    147 	.globl _TR0
                                    148 	.globl _IE1
                                    149 	.globl _IT1
                                    150 	.globl _IE0
                                    151 	.globl _IT0
                                    152 	.globl _P0_7
                                    153 	.globl _P0_6
                                    154 	.globl _P0_5
                                    155 	.globl _P0_4
                                    156 	.globl _P0_3
                                    157 	.globl _P0_2
                                    158 	.globl _P0_1
                                    159 	.globl _P0_0
                                    160 	.globl _PCA0CP4
                                    161 	.globl _PCA0CP3
                                    162 	.globl _PCA0CP2
                                    163 	.globl _PCA0CP1
                                    164 	.globl _PCA0CP0
                                    165 	.globl _PCA0
                                    166 	.globl _DAC1
                                    167 	.globl _DAC0
                                    168 	.globl _ADC0LT
                                    169 	.globl _ADC0GT
                                    170 	.globl _ADC0
                                    171 	.globl _RCAP4
                                    172 	.globl _TMR4
                                    173 	.globl _TMR3RL
                                    174 	.globl _TMR3
                                    175 	.globl _RCAP2
                                    176 	.globl _TMR2
                                    177 	.globl _TMR1
                                    178 	.globl _TMR0
                                    179 	.globl _WDTCN
                                    180 	.globl _PCA0CPH4
                                    181 	.globl _PCA0CPH3
                                    182 	.globl _PCA0CPH2
                                    183 	.globl _PCA0CPH1
                                    184 	.globl _PCA0CPH0
                                    185 	.globl _PCA0H
                                    186 	.globl _SPI0CN
                                    187 	.globl _EIP2
                                    188 	.globl _EIP1
                                    189 	.globl _TH4
                                    190 	.globl _TL4
                                    191 	.globl _SADDR1
                                    192 	.globl _SBUF1
                                    193 	.globl _SCON1
                                    194 	.globl _B
                                    195 	.globl _RSTSRC
                                    196 	.globl _PCA0CPL4
                                    197 	.globl _PCA0CPL3
                                    198 	.globl _PCA0CPL2
                                    199 	.globl _PCA0CPL1
                                    200 	.globl _PCA0CPL0
                                    201 	.globl _PCA0L
                                    202 	.globl _ADC0CN
                                    203 	.globl _EIE2
                                    204 	.globl _EIE1
                                    205 	.globl _RCAP4H
                                    206 	.globl _RCAP4L
                                    207 	.globl _XBR2
                                    208 	.globl _XBR1
                                    209 	.globl _XBR0
                                    210 	.globl _ACC
                                    211 	.globl _PCA0CPM4
                                    212 	.globl _PCA0CPM3
                                    213 	.globl _PCA0CPM2
                                    214 	.globl _PCA0CPM1
                                    215 	.globl _PCA0CPM0
                                    216 	.globl _PCA0MD
                                    217 	.globl _PCA0CN
                                    218 	.globl _DAC1CN
                                    219 	.globl _DAC1H
                                    220 	.globl _DAC1L
                                    221 	.globl _DAC0CN
                                    222 	.globl _DAC0H
                                    223 	.globl _DAC0L
                                    224 	.globl _REF0CN
                                    225 	.globl _PSW
                                    226 	.globl _SMB0CR
                                    227 	.globl _TH2
                                    228 	.globl _TL2
                                    229 	.globl _RCAP2H
                                    230 	.globl _RCAP2L
                                    231 	.globl _T4CON
                                    232 	.globl _T2CON
                                    233 	.globl _ADC0LTH
                                    234 	.globl _ADC0LTL
                                    235 	.globl _ADC0GTH
                                    236 	.globl _ADC0GTL
                                    237 	.globl _SMB0ADR
                                    238 	.globl _SMB0DAT
                                    239 	.globl _SMB0STA
                                    240 	.globl _SMB0CN
                                    241 	.globl _ADC0H
                                    242 	.globl _ADC0L
                                    243 	.globl _P1MDIN
                                    244 	.globl _ADC0CF
                                    245 	.globl _AMX0SL
                                    246 	.globl _AMX0CF
                                    247 	.globl _SADEN0
                                    248 	.globl _IP
                                    249 	.globl _FLACL
                                    250 	.globl _FLSCL
                                    251 	.globl _P74OUT
                                    252 	.globl _OSCICN
                                    253 	.globl _OSCXCN
                                    254 	.globl _P3
                                    255 	.globl __XPAGE
                                    256 	.globl _EMI0CN
                                    257 	.globl _SADEN1
                                    258 	.globl _P3IF
                                    259 	.globl _AMX1SL
                                    260 	.globl _ADC1CF
                                    261 	.globl _ADC1CN
                                    262 	.globl _SADDR0
                                    263 	.globl _IE
                                    264 	.globl _P3MDOUT
                                    265 	.globl _PRT3CF
                                    266 	.globl _P2MDOUT
                                    267 	.globl _PRT2CF
                                    268 	.globl _P1MDOUT
                                    269 	.globl _PRT1CF
                                    270 	.globl _P0MDOUT
                                    271 	.globl _PRT0CF
                                    272 	.globl _EMI0CF
                                    273 	.globl _EMI0TC
                                    274 	.globl _P2
                                    275 	.globl _CPT1CN
                                    276 	.globl _CPT0CN
                                    277 	.globl _SPI0CKR
                                    278 	.globl _ADC1
                                    279 	.globl _SPI0DAT
                                    280 	.globl _SPI0CFG
                                    281 	.globl _SBUF0
                                    282 	.globl _SBUF
                                    283 	.globl _SCON0
                                    284 	.globl _SCON
                                    285 	.globl _P7
                                    286 	.globl _TMR3H
                                    287 	.globl _TMR3L
                                    288 	.globl _TMR3RLH
                                    289 	.globl _TMR3RLL
                                    290 	.globl _TMR3CN
                                    291 	.globl _P1
                                    292 	.globl _PSCTL
                                    293 	.globl _CKCON
                                    294 	.globl _TH1
                                    295 	.globl _TH0
                                    296 	.globl _TL1
                                    297 	.globl _TL0
                                    298 	.globl _TMOD
                                    299 	.globl _TCON
                                    300 	.globl _PCON
                                    301 	.globl _P6
                                    302 	.globl _P5
                                    303 	.globl _P4
                                    304 	.globl _DPH
                                    305 	.globl _DPL
                                    306 	.globl _SP
                                    307 	.globl _P0
                                    308 	.globl _heading
                                    309 	.globl _other
                                    310 	.globl _bearing
                                    311 	.globl _count
                                    312 	.globl _SERVO_PW
                                    313 	.globl _PW_LEFT
                                    314 	.globl _PW_RIGHT
                                    315 	.globl _PW_CENTER
                                    316 	.globl _i2c_read_data_PARM_4
                                    317 	.globl _i2c_read_data_PARM_3
                                    318 	.globl _i2c_read_data_PARM_2
                                    319 	.globl _i2c_write_data_PARM_4
                                    320 	.globl _i2c_write_data_PARM_3
                                    321 	.globl _i2c_write_data_PARM_2
                                    322 	.globl _aligned_alloc_PARM_2
                                    323 	.globl _Data2
                                    324 	.globl _lcd_print
                                    325 	.globl _lcd_clear
                                    326 	.globl _kpd_input
                                    327 	.globl _delay_time
                                    328 	.globl _i2c_start
                                    329 	.globl _i2c_write
                                    330 	.globl _i2c_write_and_stop
                                    331 	.globl _i2c_read
                                    332 	.globl _i2c_read_and_stop
                                    333 	.globl _i2c_write_data
                                    334 	.globl _i2c_read_data
                                    335 	.globl _Accel_Init
                                    336 	.globl _Accel_Init_C
                                    337 	.globl _Port_Init
                                    338 	.globl _XBR0_Init
                                    339 	.globl _PCA_Init
                                    340 	.globl _PCA_ISR
                                    341 	.globl _SMB_Init
                                    342 	.globl _Steering_Servo
                                    343 	.globl _ReadCompass
                                    344 	.globl _ErrorCorrection
                                    345 ;--------------------------------------------------------
                                    346 ; special function registers
                                    347 ;--------------------------------------------------------
                                    348 	.area RSEG    (ABS,DATA)
      000000                        349 	.org 0x0000
                           000080   350 G$P0$0$0 == 0x0080
                           000080   351 _P0	=	0x0080
                           000081   352 G$SP$0$0 == 0x0081
                           000081   353 _SP	=	0x0081
                           000082   354 G$DPL$0$0 == 0x0082
                           000082   355 _DPL	=	0x0082
                           000083   356 G$DPH$0$0 == 0x0083
                           000083   357 _DPH	=	0x0083
                           000084   358 G$P4$0$0 == 0x0084
                           000084   359 _P4	=	0x0084
                           000085   360 G$P5$0$0 == 0x0085
                           000085   361 _P5	=	0x0085
                           000086   362 G$P6$0$0 == 0x0086
                           000086   363 _P6	=	0x0086
                           000087   364 G$PCON$0$0 == 0x0087
                           000087   365 _PCON	=	0x0087
                           000088   366 G$TCON$0$0 == 0x0088
                           000088   367 _TCON	=	0x0088
                           000089   368 G$TMOD$0$0 == 0x0089
                           000089   369 _TMOD	=	0x0089
                           00008A   370 G$TL0$0$0 == 0x008a
                           00008A   371 _TL0	=	0x008a
                           00008B   372 G$TL1$0$0 == 0x008b
                           00008B   373 _TL1	=	0x008b
                           00008C   374 G$TH0$0$0 == 0x008c
                           00008C   375 _TH0	=	0x008c
                           00008D   376 G$TH1$0$0 == 0x008d
                           00008D   377 _TH1	=	0x008d
                           00008E   378 G$CKCON$0$0 == 0x008e
                           00008E   379 _CKCON	=	0x008e
                           00008F   380 G$PSCTL$0$0 == 0x008f
                           00008F   381 _PSCTL	=	0x008f
                           000090   382 G$P1$0$0 == 0x0090
                           000090   383 _P1	=	0x0090
                           000091   384 G$TMR3CN$0$0 == 0x0091
                           000091   385 _TMR3CN	=	0x0091
                           000092   386 G$TMR3RLL$0$0 == 0x0092
                           000092   387 _TMR3RLL	=	0x0092
                           000093   388 G$TMR3RLH$0$0 == 0x0093
                           000093   389 _TMR3RLH	=	0x0093
                           000094   390 G$TMR3L$0$0 == 0x0094
                           000094   391 _TMR3L	=	0x0094
                           000095   392 G$TMR3H$0$0 == 0x0095
                           000095   393 _TMR3H	=	0x0095
                           000096   394 G$P7$0$0 == 0x0096
                           000096   395 _P7	=	0x0096
                           000098   396 G$SCON$0$0 == 0x0098
                           000098   397 _SCON	=	0x0098
                           000098   398 G$SCON0$0$0 == 0x0098
                           000098   399 _SCON0	=	0x0098
                           000099   400 G$SBUF$0$0 == 0x0099
                           000099   401 _SBUF	=	0x0099
                           000099   402 G$SBUF0$0$0 == 0x0099
                           000099   403 _SBUF0	=	0x0099
                           00009A   404 G$SPI0CFG$0$0 == 0x009a
                           00009A   405 _SPI0CFG	=	0x009a
                           00009B   406 G$SPI0DAT$0$0 == 0x009b
                           00009B   407 _SPI0DAT	=	0x009b
                           00009C   408 G$ADC1$0$0 == 0x009c
                           00009C   409 _ADC1	=	0x009c
                           00009D   410 G$SPI0CKR$0$0 == 0x009d
                           00009D   411 _SPI0CKR	=	0x009d
                           00009E   412 G$CPT0CN$0$0 == 0x009e
                           00009E   413 _CPT0CN	=	0x009e
                           00009F   414 G$CPT1CN$0$0 == 0x009f
                           00009F   415 _CPT1CN	=	0x009f
                           0000A0   416 G$P2$0$0 == 0x00a0
                           0000A0   417 _P2	=	0x00a0
                           0000A1   418 G$EMI0TC$0$0 == 0x00a1
                           0000A1   419 _EMI0TC	=	0x00a1
                           0000A3   420 G$EMI0CF$0$0 == 0x00a3
                           0000A3   421 _EMI0CF	=	0x00a3
                           0000A4   422 G$PRT0CF$0$0 == 0x00a4
                           0000A4   423 _PRT0CF	=	0x00a4
                           0000A4   424 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   425 _P0MDOUT	=	0x00a4
                           0000A5   426 G$PRT1CF$0$0 == 0x00a5
                           0000A5   427 _PRT1CF	=	0x00a5
                           0000A5   428 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   429 _P1MDOUT	=	0x00a5
                           0000A6   430 G$PRT2CF$0$0 == 0x00a6
                           0000A6   431 _PRT2CF	=	0x00a6
                           0000A6   432 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   433 _P2MDOUT	=	0x00a6
                           0000A7   434 G$PRT3CF$0$0 == 0x00a7
                           0000A7   435 _PRT3CF	=	0x00a7
                           0000A7   436 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   437 _P3MDOUT	=	0x00a7
                           0000A8   438 G$IE$0$0 == 0x00a8
                           0000A8   439 _IE	=	0x00a8
                           0000A9   440 G$SADDR0$0$0 == 0x00a9
                           0000A9   441 _SADDR0	=	0x00a9
                           0000AA   442 G$ADC1CN$0$0 == 0x00aa
                           0000AA   443 _ADC1CN	=	0x00aa
                           0000AB   444 G$ADC1CF$0$0 == 0x00ab
                           0000AB   445 _ADC1CF	=	0x00ab
                           0000AC   446 G$AMX1SL$0$0 == 0x00ac
                           0000AC   447 _AMX1SL	=	0x00ac
                           0000AD   448 G$P3IF$0$0 == 0x00ad
                           0000AD   449 _P3IF	=	0x00ad
                           0000AE   450 G$SADEN1$0$0 == 0x00ae
                           0000AE   451 _SADEN1	=	0x00ae
                           0000AF   452 G$EMI0CN$0$0 == 0x00af
                           0000AF   453 _EMI0CN	=	0x00af
                           0000AF   454 G$_XPAGE$0$0 == 0x00af
                           0000AF   455 __XPAGE	=	0x00af
                           0000B0   456 G$P3$0$0 == 0x00b0
                           0000B0   457 _P3	=	0x00b0
                           0000B1   458 G$OSCXCN$0$0 == 0x00b1
                           0000B1   459 _OSCXCN	=	0x00b1
                           0000B2   460 G$OSCICN$0$0 == 0x00b2
                           0000B2   461 _OSCICN	=	0x00b2
                           0000B5   462 G$P74OUT$0$0 == 0x00b5
                           0000B5   463 _P74OUT	=	0x00b5
                           0000B6   464 G$FLSCL$0$0 == 0x00b6
                           0000B6   465 _FLSCL	=	0x00b6
                           0000B7   466 G$FLACL$0$0 == 0x00b7
                           0000B7   467 _FLACL	=	0x00b7
                           0000B8   468 G$IP$0$0 == 0x00b8
                           0000B8   469 _IP	=	0x00b8
                           0000B9   470 G$SADEN0$0$0 == 0x00b9
                           0000B9   471 _SADEN0	=	0x00b9
                           0000BA   472 G$AMX0CF$0$0 == 0x00ba
                           0000BA   473 _AMX0CF	=	0x00ba
                           0000BB   474 G$AMX0SL$0$0 == 0x00bb
                           0000BB   475 _AMX0SL	=	0x00bb
                           0000BC   476 G$ADC0CF$0$0 == 0x00bc
                           0000BC   477 _ADC0CF	=	0x00bc
                           0000BD   478 G$P1MDIN$0$0 == 0x00bd
                           0000BD   479 _P1MDIN	=	0x00bd
                           0000BE   480 G$ADC0L$0$0 == 0x00be
                           0000BE   481 _ADC0L	=	0x00be
                           0000BF   482 G$ADC0H$0$0 == 0x00bf
                           0000BF   483 _ADC0H	=	0x00bf
                           0000C0   484 G$SMB0CN$0$0 == 0x00c0
                           0000C0   485 _SMB0CN	=	0x00c0
                           0000C1   486 G$SMB0STA$0$0 == 0x00c1
                           0000C1   487 _SMB0STA	=	0x00c1
                           0000C2   488 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   489 _SMB0DAT	=	0x00c2
                           0000C3   490 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   491 _SMB0ADR	=	0x00c3
                           0000C4   492 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   493 _ADC0GTL	=	0x00c4
                           0000C5   494 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   495 _ADC0GTH	=	0x00c5
                           0000C6   496 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   497 _ADC0LTL	=	0x00c6
                           0000C7   498 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   499 _ADC0LTH	=	0x00c7
                           0000C8   500 G$T2CON$0$0 == 0x00c8
                           0000C8   501 _T2CON	=	0x00c8
                           0000C9   502 G$T4CON$0$0 == 0x00c9
                           0000C9   503 _T4CON	=	0x00c9
                           0000CA   504 G$RCAP2L$0$0 == 0x00ca
                           0000CA   505 _RCAP2L	=	0x00ca
                           0000CB   506 G$RCAP2H$0$0 == 0x00cb
                           0000CB   507 _RCAP2H	=	0x00cb
                           0000CC   508 G$TL2$0$0 == 0x00cc
                           0000CC   509 _TL2	=	0x00cc
                           0000CD   510 G$TH2$0$0 == 0x00cd
                           0000CD   511 _TH2	=	0x00cd
                           0000CF   512 G$SMB0CR$0$0 == 0x00cf
                           0000CF   513 _SMB0CR	=	0x00cf
                           0000D0   514 G$PSW$0$0 == 0x00d0
                           0000D0   515 _PSW	=	0x00d0
                           0000D1   516 G$REF0CN$0$0 == 0x00d1
                           0000D1   517 _REF0CN	=	0x00d1
                           0000D2   518 G$DAC0L$0$0 == 0x00d2
                           0000D2   519 _DAC0L	=	0x00d2
                           0000D3   520 G$DAC0H$0$0 == 0x00d3
                           0000D3   521 _DAC0H	=	0x00d3
                           0000D4   522 G$DAC0CN$0$0 == 0x00d4
                           0000D4   523 _DAC0CN	=	0x00d4
                           0000D5   524 G$DAC1L$0$0 == 0x00d5
                           0000D5   525 _DAC1L	=	0x00d5
                           0000D6   526 G$DAC1H$0$0 == 0x00d6
                           0000D6   527 _DAC1H	=	0x00d6
                           0000D7   528 G$DAC1CN$0$0 == 0x00d7
                           0000D7   529 _DAC1CN	=	0x00d7
                           0000D8   530 G$PCA0CN$0$0 == 0x00d8
                           0000D8   531 _PCA0CN	=	0x00d8
                           0000D9   532 G$PCA0MD$0$0 == 0x00d9
                           0000D9   533 _PCA0MD	=	0x00d9
                           0000DA   534 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   535 _PCA0CPM0	=	0x00da
                           0000DB   536 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   537 _PCA0CPM1	=	0x00db
                           0000DC   538 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   539 _PCA0CPM2	=	0x00dc
                           0000DD   540 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   541 _PCA0CPM3	=	0x00dd
                           0000DE   542 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   543 _PCA0CPM4	=	0x00de
                           0000E0   544 G$ACC$0$0 == 0x00e0
                           0000E0   545 _ACC	=	0x00e0
                           0000E1   546 G$XBR0$0$0 == 0x00e1
                           0000E1   547 _XBR0	=	0x00e1
                           0000E2   548 G$XBR1$0$0 == 0x00e2
                           0000E2   549 _XBR1	=	0x00e2
                           0000E3   550 G$XBR2$0$0 == 0x00e3
                           0000E3   551 _XBR2	=	0x00e3
                           0000E4   552 G$RCAP4L$0$0 == 0x00e4
                           0000E4   553 _RCAP4L	=	0x00e4
                           0000E5   554 G$RCAP4H$0$0 == 0x00e5
                           0000E5   555 _RCAP4H	=	0x00e5
                           0000E6   556 G$EIE1$0$0 == 0x00e6
                           0000E6   557 _EIE1	=	0x00e6
                           0000E7   558 G$EIE2$0$0 == 0x00e7
                           0000E7   559 _EIE2	=	0x00e7
                           0000E8   560 G$ADC0CN$0$0 == 0x00e8
                           0000E8   561 _ADC0CN	=	0x00e8
                           0000E9   562 G$PCA0L$0$0 == 0x00e9
                           0000E9   563 _PCA0L	=	0x00e9
                           0000EA   564 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   565 _PCA0CPL0	=	0x00ea
                           0000EB   566 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   567 _PCA0CPL1	=	0x00eb
                           0000EC   568 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   569 _PCA0CPL2	=	0x00ec
                           0000ED   570 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   571 _PCA0CPL3	=	0x00ed
                           0000EE   572 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   573 _PCA0CPL4	=	0x00ee
                           0000EF   574 G$RSTSRC$0$0 == 0x00ef
                           0000EF   575 _RSTSRC	=	0x00ef
                           0000F0   576 G$B$0$0 == 0x00f0
                           0000F0   577 _B	=	0x00f0
                           0000F1   578 G$SCON1$0$0 == 0x00f1
                           0000F1   579 _SCON1	=	0x00f1
                           0000F2   580 G$SBUF1$0$0 == 0x00f2
                           0000F2   581 _SBUF1	=	0x00f2
                           0000F3   582 G$SADDR1$0$0 == 0x00f3
                           0000F3   583 _SADDR1	=	0x00f3
                           0000F4   584 G$TL4$0$0 == 0x00f4
                           0000F4   585 _TL4	=	0x00f4
                           0000F5   586 G$TH4$0$0 == 0x00f5
                           0000F5   587 _TH4	=	0x00f5
                           0000F6   588 G$EIP1$0$0 == 0x00f6
                           0000F6   589 _EIP1	=	0x00f6
                           0000F7   590 G$EIP2$0$0 == 0x00f7
                           0000F7   591 _EIP2	=	0x00f7
                           0000F8   592 G$SPI0CN$0$0 == 0x00f8
                           0000F8   593 _SPI0CN	=	0x00f8
                           0000F9   594 G$PCA0H$0$0 == 0x00f9
                           0000F9   595 _PCA0H	=	0x00f9
                           0000FA   596 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   597 _PCA0CPH0	=	0x00fa
                           0000FB   598 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   599 _PCA0CPH1	=	0x00fb
                           0000FC   600 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   601 _PCA0CPH2	=	0x00fc
                           0000FD   602 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   603 _PCA0CPH3	=	0x00fd
                           0000FE   604 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   605 _PCA0CPH4	=	0x00fe
                           0000FF   606 G$WDTCN$0$0 == 0x00ff
                           0000FF   607 _WDTCN	=	0x00ff
                           008C8A   608 G$TMR0$0$0 == 0x8c8a
                           008C8A   609 _TMR0	=	0x8c8a
                           008D8B   610 G$TMR1$0$0 == 0x8d8b
                           008D8B   611 _TMR1	=	0x8d8b
                           00CDCC   612 G$TMR2$0$0 == 0xcdcc
                           00CDCC   613 _TMR2	=	0xcdcc
                           00CBCA   614 G$RCAP2$0$0 == 0xcbca
                           00CBCA   615 _RCAP2	=	0xcbca
                           009594   616 G$TMR3$0$0 == 0x9594
                           009594   617 _TMR3	=	0x9594
                           009392   618 G$TMR3RL$0$0 == 0x9392
                           009392   619 _TMR3RL	=	0x9392
                           00F5F4   620 G$TMR4$0$0 == 0xf5f4
                           00F5F4   621 _TMR4	=	0xf5f4
                           00E5E4   622 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   623 _RCAP4	=	0xe5e4
                           00BFBE   624 G$ADC0$0$0 == 0xbfbe
                           00BFBE   625 _ADC0	=	0xbfbe
                           00C5C4   626 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   627 _ADC0GT	=	0xc5c4
                           00C7C6   628 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   629 _ADC0LT	=	0xc7c6
                           00D3D2   630 G$DAC0$0$0 == 0xd3d2
                           00D3D2   631 _DAC0	=	0xd3d2
                           00D6D5   632 G$DAC1$0$0 == 0xd6d5
                           00D6D5   633 _DAC1	=	0xd6d5
                           00F9E9   634 G$PCA0$0$0 == 0xf9e9
                           00F9E9   635 _PCA0	=	0xf9e9
                           00FAEA   636 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   637 _PCA0CP0	=	0xfaea
                           00FBEB   638 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   639 _PCA0CP1	=	0xfbeb
                           00FCEC   640 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   641 _PCA0CP2	=	0xfcec
                           00FDED   642 G$PCA0CP3$0$0 == 0xfded
                           00FDED   643 _PCA0CP3	=	0xfded
                           00FEEE   644 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   645 _PCA0CP4	=	0xfeee
                                    646 ;--------------------------------------------------------
                                    647 ; special function bits
                                    648 ;--------------------------------------------------------
                                    649 	.area RSEG    (ABS,DATA)
      000000                        650 	.org 0x0000
                           000080   651 G$P0_0$0$0 == 0x0080
                           000080   652 _P0_0	=	0x0080
                           000081   653 G$P0_1$0$0 == 0x0081
                           000081   654 _P0_1	=	0x0081
                           000082   655 G$P0_2$0$0 == 0x0082
                           000082   656 _P0_2	=	0x0082
                           000083   657 G$P0_3$0$0 == 0x0083
                           000083   658 _P0_3	=	0x0083
                           000084   659 G$P0_4$0$0 == 0x0084
                           000084   660 _P0_4	=	0x0084
                           000085   661 G$P0_5$0$0 == 0x0085
                           000085   662 _P0_5	=	0x0085
                           000086   663 G$P0_6$0$0 == 0x0086
                           000086   664 _P0_6	=	0x0086
                           000087   665 G$P0_7$0$0 == 0x0087
                           000087   666 _P0_7	=	0x0087
                           000088   667 G$IT0$0$0 == 0x0088
                           000088   668 _IT0	=	0x0088
                           000089   669 G$IE0$0$0 == 0x0089
                           000089   670 _IE0	=	0x0089
                           00008A   671 G$IT1$0$0 == 0x008a
                           00008A   672 _IT1	=	0x008a
                           00008B   673 G$IE1$0$0 == 0x008b
                           00008B   674 _IE1	=	0x008b
                           00008C   675 G$TR0$0$0 == 0x008c
                           00008C   676 _TR0	=	0x008c
                           00008D   677 G$TF0$0$0 == 0x008d
                           00008D   678 _TF0	=	0x008d
                           00008E   679 G$TR1$0$0 == 0x008e
                           00008E   680 _TR1	=	0x008e
                           00008F   681 G$TF1$0$0 == 0x008f
                           00008F   682 _TF1	=	0x008f
                           000090   683 G$P1_0$0$0 == 0x0090
                           000090   684 _P1_0	=	0x0090
                           000091   685 G$P1_1$0$0 == 0x0091
                           000091   686 _P1_1	=	0x0091
                           000092   687 G$P1_2$0$0 == 0x0092
                           000092   688 _P1_2	=	0x0092
                           000093   689 G$P1_3$0$0 == 0x0093
                           000093   690 _P1_3	=	0x0093
                           000094   691 G$P1_4$0$0 == 0x0094
                           000094   692 _P1_4	=	0x0094
                           000095   693 G$P1_5$0$0 == 0x0095
                           000095   694 _P1_5	=	0x0095
                           000096   695 G$P1_6$0$0 == 0x0096
                           000096   696 _P1_6	=	0x0096
                           000097   697 G$P1_7$0$0 == 0x0097
                           000097   698 _P1_7	=	0x0097
                           000098   699 G$RI$0$0 == 0x0098
                           000098   700 _RI	=	0x0098
                           000098   701 G$RI0$0$0 == 0x0098
                           000098   702 _RI0	=	0x0098
                           000099   703 G$TI$0$0 == 0x0099
                           000099   704 _TI	=	0x0099
                           000099   705 G$TI0$0$0 == 0x0099
                           000099   706 _TI0	=	0x0099
                           00009A   707 G$RB8$0$0 == 0x009a
                           00009A   708 _RB8	=	0x009a
                           00009A   709 G$RB80$0$0 == 0x009a
                           00009A   710 _RB80	=	0x009a
                           00009B   711 G$TB8$0$0 == 0x009b
                           00009B   712 _TB8	=	0x009b
                           00009B   713 G$TB80$0$0 == 0x009b
                           00009B   714 _TB80	=	0x009b
                           00009C   715 G$REN$0$0 == 0x009c
                           00009C   716 _REN	=	0x009c
                           00009C   717 G$REN0$0$0 == 0x009c
                           00009C   718 _REN0	=	0x009c
                           00009D   719 G$SM2$0$0 == 0x009d
                           00009D   720 _SM2	=	0x009d
                           00009D   721 G$SM20$0$0 == 0x009d
                           00009D   722 _SM20	=	0x009d
                           00009D   723 G$MCE0$0$0 == 0x009d
                           00009D   724 _MCE0	=	0x009d
                           00009E   725 G$SM1$0$0 == 0x009e
                           00009E   726 _SM1	=	0x009e
                           00009E   727 G$SM10$0$0 == 0x009e
                           00009E   728 _SM10	=	0x009e
                           00009F   729 G$SM0$0$0 == 0x009f
                           00009F   730 _SM0	=	0x009f
                           00009F   731 G$SM00$0$0 == 0x009f
                           00009F   732 _SM00	=	0x009f
                           00009F   733 G$S0MODE$0$0 == 0x009f
                           00009F   734 _S0MODE	=	0x009f
                           0000A0   735 G$P2_0$0$0 == 0x00a0
                           0000A0   736 _P2_0	=	0x00a0
                           0000A1   737 G$P2_1$0$0 == 0x00a1
                           0000A1   738 _P2_1	=	0x00a1
                           0000A2   739 G$P2_2$0$0 == 0x00a2
                           0000A2   740 _P2_2	=	0x00a2
                           0000A3   741 G$P2_3$0$0 == 0x00a3
                           0000A3   742 _P2_3	=	0x00a3
                           0000A4   743 G$P2_4$0$0 == 0x00a4
                           0000A4   744 _P2_4	=	0x00a4
                           0000A5   745 G$P2_5$0$0 == 0x00a5
                           0000A5   746 _P2_5	=	0x00a5
                           0000A6   747 G$P2_6$0$0 == 0x00a6
                           0000A6   748 _P2_6	=	0x00a6
                           0000A7   749 G$P2_7$0$0 == 0x00a7
                           0000A7   750 _P2_7	=	0x00a7
                           0000A8   751 G$EX0$0$0 == 0x00a8
                           0000A8   752 _EX0	=	0x00a8
                           0000A9   753 G$ET0$0$0 == 0x00a9
                           0000A9   754 _ET0	=	0x00a9
                           0000AA   755 G$EX1$0$0 == 0x00aa
                           0000AA   756 _EX1	=	0x00aa
                           0000AB   757 G$ET1$0$0 == 0x00ab
                           0000AB   758 _ET1	=	0x00ab
                           0000AC   759 G$ES0$0$0 == 0x00ac
                           0000AC   760 _ES0	=	0x00ac
                           0000AC   761 G$ES$0$0 == 0x00ac
                           0000AC   762 _ES	=	0x00ac
                           0000AD   763 G$ET2$0$0 == 0x00ad
                           0000AD   764 _ET2	=	0x00ad
                           0000AF   765 G$EA$0$0 == 0x00af
                           0000AF   766 _EA	=	0x00af
                           0000B0   767 G$P3_0$0$0 == 0x00b0
                           0000B0   768 _P3_0	=	0x00b0
                           0000B1   769 G$P3_1$0$0 == 0x00b1
                           0000B1   770 _P3_1	=	0x00b1
                           0000B2   771 G$P3_2$0$0 == 0x00b2
                           0000B2   772 _P3_2	=	0x00b2
                           0000B3   773 G$P3_3$0$0 == 0x00b3
                           0000B3   774 _P3_3	=	0x00b3
                           0000B4   775 G$P3_4$0$0 == 0x00b4
                           0000B4   776 _P3_4	=	0x00b4
                           0000B5   777 G$P3_5$0$0 == 0x00b5
                           0000B5   778 _P3_5	=	0x00b5
                           0000B6   779 G$P3_6$0$0 == 0x00b6
                           0000B6   780 _P3_6	=	0x00b6
                           0000B7   781 G$P3_7$0$0 == 0x00b7
                           0000B7   782 _P3_7	=	0x00b7
                           0000B8   783 G$PX0$0$0 == 0x00b8
                           0000B8   784 _PX0	=	0x00b8
                           0000B9   785 G$PT0$0$0 == 0x00b9
                           0000B9   786 _PT0	=	0x00b9
                           0000BA   787 G$PX1$0$0 == 0x00ba
                           0000BA   788 _PX1	=	0x00ba
                           0000BB   789 G$PT1$0$0 == 0x00bb
                           0000BB   790 _PT1	=	0x00bb
                           0000BC   791 G$PS0$0$0 == 0x00bc
                           0000BC   792 _PS0	=	0x00bc
                           0000BC   793 G$PS$0$0 == 0x00bc
                           0000BC   794 _PS	=	0x00bc
                           0000BD   795 G$PT2$0$0 == 0x00bd
                           0000BD   796 _PT2	=	0x00bd
                           0000C0   797 G$SMBTOE$0$0 == 0x00c0
                           0000C0   798 _SMBTOE	=	0x00c0
                           0000C1   799 G$SMBFTE$0$0 == 0x00c1
                           0000C1   800 _SMBFTE	=	0x00c1
                           0000C2   801 G$AA$0$0 == 0x00c2
                           0000C2   802 _AA	=	0x00c2
                           0000C3   803 G$SI$0$0 == 0x00c3
                           0000C3   804 _SI	=	0x00c3
                           0000C4   805 G$STO$0$0 == 0x00c4
                           0000C4   806 _STO	=	0x00c4
                           0000C5   807 G$STA$0$0 == 0x00c5
                           0000C5   808 _STA	=	0x00c5
                           0000C6   809 G$ENSMB$0$0 == 0x00c6
                           0000C6   810 _ENSMB	=	0x00c6
                           0000C7   811 G$BUSY$0$0 == 0x00c7
                           0000C7   812 _BUSY	=	0x00c7
                           0000C8   813 G$CPRL2$0$0 == 0x00c8
                           0000C8   814 _CPRL2	=	0x00c8
                           0000C9   815 G$CT2$0$0 == 0x00c9
                           0000C9   816 _CT2	=	0x00c9
                           0000CA   817 G$TR2$0$0 == 0x00ca
                           0000CA   818 _TR2	=	0x00ca
                           0000CB   819 G$EXEN2$0$0 == 0x00cb
                           0000CB   820 _EXEN2	=	0x00cb
                           0000CC   821 G$TCLK$0$0 == 0x00cc
                           0000CC   822 _TCLK	=	0x00cc
                           0000CD   823 G$RCLK$0$0 == 0x00cd
                           0000CD   824 _RCLK	=	0x00cd
                           0000CE   825 G$EXF2$0$0 == 0x00ce
                           0000CE   826 _EXF2	=	0x00ce
                           0000CF   827 G$TF2$0$0 == 0x00cf
                           0000CF   828 _TF2	=	0x00cf
                           0000D0   829 G$P$0$0 == 0x00d0
                           0000D0   830 _P	=	0x00d0
                           0000D1   831 G$F1$0$0 == 0x00d1
                           0000D1   832 _F1	=	0x00d1
                           0000D2   833 G$OV$0$0 == 0x00d2
                           0000D2   834 _OV	=	0x00d2
                           0000D3   835 G$RS0$0$0 == 0x00d3
                           0000D3   836 _RS0	=	0x00d3
                           0000D4   837 G$RS1$0$0 == 0x00d4
                           0000D4   838 _RS1	=	0x00d4
                           0000D5   839 G$F0$0$0 == 0x00d5
                           0000D5   840 _F0	=	0x00d5
                           0000D6   841 G$AC$0$0 == 0x00d6
                           0000D6   842 _AC	=	0x00d6
                           0000D7   843 G$CY$0$0 == 0x00d7
                           0000D7   844 _CY	=	0x00d7
                           0000D8   845 G$CCF0$0$0 == 0x00d8
                           0000D8   846 _CCF0	=	0x00d8
                           0000D9   847 G$CCF1$0$0 == 0x00d9
                           0000D9   848 _CCF1	=	0x00d9
                           0000DA   849 G$CCF2$0$0 == 0x00da
                           0000DA   850 _CCF2	=	0x00da
                           0000DB   851 G$CCF3$0$0 == 0x00db
                           0000DB   852 _CCF3	=	0x00db
                           0000DC   853 G$CCF4$0$0 == 0x00dc
                           0000DC   854 _CCF4	=	0x00dc
                           0000DE   855 G$CR$0$0 == 0x00de
                           0000DE   856 _CR	=	0x00de
                           0000DF   857 G$CF$0$0 == 0x00df
                           0000DF   858 _CF	=	0x00df
                           0000E8   859 G$ADLJST$0$0 == 0x00e8
                           0000E8   860 _ADLJST	=	0x00e8
                           0000E8   861 G$AD0LJST$0$0 == 0x00e8
                           0000E8   862 _AD0LJST	=	0x00e8
                           0000E9   863 G$ADWINT$0$0 == 0x00e9
                           0000E9   864 _ADWINT	=	0x00e9
                           0000E9   865 G$AD0WINT$0$0 == 0x00e9
                           0000E9   866 _AD0WINT	=	0x00e9
                           0000EA   867 G$ADSTM0$0$0 == 0x00ea
                           0000EA   868 _ADSTM0	=	0x00ea
                           0000EA   869 G$AD0CM0$0$0 == 0x00ea
                           0000EA   870 _AD0CM0	=	0x00ea
                           0000EB   871 G$ADSTM1$0$0 == 0x00eb
                           0000EB   872 _ADSTM1	=	0x00eb
                           0000EB   873 G$AD0CM1$0$0 == 0x00eb
                           0000EB   874 _AD0CM1	=	0x00eb
                           0000EC   875 G$ADBUSY$0$0 == 0x00ec
                           0000EC   876 _ADBUSY	=	0x00ec
                           0000EC   877 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   878 _AD0BUSY	=	0x00ec
                           0000ED   879 G$ADCINT$0$0 == 0x00ed
                           0000ED   880 _ADCINT	=	0x00ed
                           0000ED   881 G$AD0INT$0$0 == 0x00ed
                           0000ED   882 _AD0INT	=	0x00ed
                           0000EE   883 G$ADCTM$0$0 == 0x00ee
                           0000EE   884 _ADCTM	=	0x00ee
                           0000EE   885 G$AD0TM$0$0 == 0x00ee
                           0000EE   886 _AD0TM	=	0x00ee
                           0000EF   887 G$ADCEN$0$0 == 0x00ef
                           0000EF   888 _ADCEN	=	0x00ef
                           0000EF   889 G$AD0EN$0$0 == 0x00ef
                           0000EF   890 _AD0EN	=	0x00ef
                           0000F8   891 G$SPIEN$0$0 == 0x00f8
                           0000F8   892 _SPIEN	=	0x00f8
                           0000F9   893 G$MSTEN$0$0 == 0x00f9
                           0000F9   894 _MSTEN	=	0x00f9
                           0000FA   895 G$SLVSEL$0$0 == 0x00fa
                           0000FA   896 _SLVSEL	=	0x00fa
                           0000FB   897 G$TXBSY$0$0 == 0x00fb
                           0000FB   898 _TXBSY	=	0x00fb
                           0000FC   899 G$RXOVRN$0$0 == 0x00fc
                           0000FC   900 _RXOVRN	=	0x00fc
                           0000FD   901 G$MODF$0$0 == 0x00fd
                           0000FD   902 _MODF	=	0x00fd
                           0000FE   903 G$WCOL$0$0 == 0x00fe
                           0000FE   904 _WCOL	=	0x00fe
                           0000FF   905 G$SPIF$0$0 == 0x00ff
                           0000FF   906 _SPIF	=	0x00ff
                           0000C7   907 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   908 _BUS_BUSY	=	0x00c7
                           0000C6   909 G$BUS_EN$0$0 == 0x00c6
                           0000C6   910 _BUS_EN	=	0x00c6
                           0000C5   911 G$BUS_START$0$0 == 0x00c5
                           0000C5   912 _BUS_START	=	0x00c5
                           0000C4   913 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   914 _BUS_STOP	=	0x00c4
                           0000C3   915 G$BUS_INT$0$0 == 0x00c3
                           0000C3   916 _BUS_INT	=	0x00c3
                           0000C2   917 G$BUS_AA$0$0 == 0x00c2
                           0000C2   918 _BUS_AA	=	0x00c2
                           0000C1   919 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   920 _BUS_FTE	=	0x00c1
                           0000C0   921 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   922 _BUS_TOE	=	0x00c0
                           000083   923 G$BUS_SCL$0$0 == 0x0083
                           000083   924 _BUS_SCL	=	0x0083
                           0000B7   925 G$TURN_EN$0$0 == 0x00b7
                           0000B7   926 _TURN_EN	=	0x00b7
                                    927 ;--------------------------------------------------------
                                    928 ; overlayable register banks
                                    929 ;--------------------------------------------------------
                                    930 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        931 	.ds 8
                                    932 ;--------------------------------------------------------
                                    933 ; internal ram data
                                    934 ;--------------------------------------------------------
                                    935 	.area DSEG    (DATA)
                           000000   936 G$Data2$0$0==.
      000000                        937 _Data2::
      000000                        938 	.ds 3
                           000003   939 LLab3_3_SteeringAndCompass.aligned_alloc$size$1$39==.
      000003                        940 _aligned_alloc_PARM_2:
      000003                        941 	.ds 2
                           000005   942 LLab3_3_SteeringAndCompass.lcd_clear$NumBytes$1$85==.
      000005                        943 _lcd_clear_NumBytes_1_85:
      000005                        944 	.ds 1
                           000006   945 LLab3_3_SteeringAndCompass.lcd_clear$Cmd$1$85==.
      000006                        946 _lcd_clear_Cmd_1_85:
      000006                        947 	.ds 2
                           000008   948 LLab3_3_SteeringAndCompass.read_keypad$Data$1$86==.
      000008                        949 _read_keypad_Data_1_86:
      000008                        950 	.ds 2
                           00000A   951 LLab3_3_SteeringAndCompass.i2c_write_data$start_reg$1$105==.
      00000A                        952 _i2c_write_data_PARM_2:
      00000A                        953 	.ds 1
                           00000B   954 LLab3_3_SteeringAndCompass.i2c_write_data$buffer$1$105==.
      00000B                        955 _i2c_write_data_PARM_3:
      00000B                        956 	.ds 3
                           00000E   957 LLab3_3_SteeringAndCompass.i2c_write_data$num_bytes$1$105==.
      00000E                        958 _i2c_write_data_PARM_4:
      00000E                        959 	.ds 1
                           00000F   960 LLab3_3_SteeringAndCompass.i2c_read_data$start_reg$1$107==.
      00000F                        961 _i2c_read_data_PARM_2:
      00000F                        962 	.ds 1
                           000010   963 LLab3_3_SteeringAndCompass.i2c_read_data$buffer$1$107==.
      000010                        964 _i2c_read_data_PARM_3:
      000010                        965 	.ds 3
                           000013   966 LLab3_3_SteeringAndCompass.i2c_read_data$num_bytes$1$107==.
      000013                        967 _i2c_read_data_PARM_4:
      000013                        968 	.ds 1
                           000014   969 G$PW_CENTER$0$0==.
      000014                        970 _PW_CENTER::
      000014                        971 	.ds 2
                           000016   972 G$PW_RIGHT$0$0==.
      000016                        973 _PW_RIGHT::
      000016                        974 	.ds 2
                           000018   975 G$PW_LEFT$0$0==.
      000018                        976 _PW_LEFT::
      000018                        977 	.ds 2
                           00001A   978 G$SERVO_PW$0$0==.
      00001A                        979 _SERVO_PW::
      00001A                        980 	.ds 2
                           00001C   981 G$count$0$0==.
      00001C                        982 _count::
      00001C                        983 	.ds 2
                           00001E   984 G$bearing$0$0==.
      00001E                        985 _bearing::
      00001E                        986 	.ds 2
                           000020   987 G$other$0$0==.
      000020                        988 _other::
      000020                        989 	.ds 2
                           000022   990 G$heading$0$0==.
      000022                        991 _heading::
      000022                        992 	.ds 2
                           000024   993 LLab3_3_SteeringAndCompass.ReadCompass$Data$1$136==.
      000024                        994 _ReadCompass_Data_1_136:
      000024                        995 	.ds 2
                           000026   996 LLab3_3_SteeringAndCompass.ErrorCorrection$error$1$137==.
      000026                        997 _ErrorCorrection_error_1_137:
      000026                        998 	.ds 2
                                    999 ;--------------------------------------------------------
                                   1000 ; overlayable items in internal ram 
                                   1001 ;--------------------------------------------------------
                                   1002 	.area	OSEG    (OVR,DATA)
                                   1003 	.area	OSEG    (OVR,DATA)
                                   1004 	.area	OSEG    (OVR,DATA)
                                   1005 	.area	OSEG    (OVR,DATA)
                                   1006 	.area	OSEG    (OVR,DATA)
                                   1007 	.area	OSEG    (OVR,DATA)
                                   1008 	.area	OSEG    (OVR,DATA)
                                   1009 ;--------------------------------------------------------
                                   1010 ; Stack segment in internal ram 
                                   1011 ;--------------------------------------------------------
                                   1012 	.area	SSEG
      000000                       1013 __start__stack:
      000000                       1014 	.ds	1
                                   1015 
                                   1016 ;--------------------------------------------------------
                                   1017 ; indirectly addressable internal ram data
                                   1018 ;--------------------------------------------------------
                                   1019 	.area ISEG    (DATA)
                                   1020 ;--------------------------------------------------------
                                   1021 ; absolute internal ram data
                                   1022 ;--------------------------------------------------------
                                   1023 	.area IABS    (ABS,DATA)
                                   1024 	.area IABS    (ABS,DATA)
                                   1025 ;--------------------------------------------------------
                                   1026 ; bit data
                                   1027 ;--------------------------------------------------------
                                   1028 	.area BSEG    (BIT)
                                   1029 ;--------------------------------------------------------
                                   1030 ; paged external ram data
                                   1031 ;--------------------------------------------------------
                                   1032 	.area PSEG    (PAG,XDATA)
                                   1033 ;--------------------------------------------------------
                                   1034 ; external ram data
                                   1035 ;--------------------------------------------------------
                                   1036 	.area XSEG    (XDATA)
                           000000  1037 LLab3_3_SteeringAndCompass.lcd_print$text$1$81==.
      000000                       1038 _lcd_print_text_1_81:
      000000                       1039 	.ds 80
                                   1040 ;--------------------------------------------------------
                                   1041 ; absolute external ram data
                                   1042 ;--------------------------------------------------------
                                   1043 	.area XABS    (ABS,XDATA)
                                   1044 ;--------------------------------------------------------
                                   1045 ; external initialized ram data
                                   1046 ;--------------------------------------------------------
                                   1047 	.area XISEG   (XDATA)
                                   1048 	.area HOME    (CODE)
                                   1049 	.area GSINIT0 (CODE)
                                   1050 	.area GSINIT1 (CODE)
                                   1051 	.area GSINIT2 (CODE)
                                   1052 	.area GSINIT3 (CODE)
                                   1053 	.area GSINIT4 (CODE)
                                   1054 	.area GSINIT5 (CODE)
                                   1055 	.area GSINIT  (CODE)
                                   1056 	.area GSFINAL (CODE)
                                   1057 	.area CSEG    (CODE)
                                   1058 ;--------------------------------------------------------
                                   1059 ; interrupt vector 
                                   1060 ;--------------------------------------------------------
                                   1061 	.area HOME    (CODE)
      000000                       1062 __interrupt_vect:
      000000 02r00r00         [24] 1063 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1064 	reti
      000004                       1065 	.ds	7
      00000B 32               [24] 1066 	reti
      00000C                       1067 	.ds	7
      000013 32               [24] 1068 	reti
      000014                       1069 	.ds	7
      00001B 32               [24] 1070 	reti
      00001C                       1071 	.ds	7
      000023 32               [24] 1072 	reti
      000024                       1073 	.ds	7
      00002B 32               [24] 1074 	reti
      00002C                       1075 	.ds	7
      000033 32               [24] 1076 	reti
      000034                       1077 	.ds	7
      00003B 32               [24] 1078 	reti
      00003C                       1079 	.ds	7
      000043 32               [24] 1080 	reti
      000044                       1081 	.ds	7
      00004B 02r06r04         [24] 1082 	ljmp	_PCA_ISR
                                   1083 ;--------------------------------------------------------
                                   1084 ; global & static initialisations
                                   1085 ;--------------------------------------------------------
                                   1086 	.area HOME    (CODE)
                                   1087 	.area GSINIT  (CODE)
                                   1088 	.area GSFINAL (CODE)
                                   1089 	.area GSINIT  (CODE)
                                   1090 	.globl __sdcc_gsinit_startup
                                   1091 	.globl __sdcc_program_startup
                                   1092 	.globl __start__stack
                                   1093 	.globl __mcs51_genXINIT
                                   1094 	.globl __mcs51_genXRAMCLEAR
                                   1095 	.globl __mcs51_genRAMCLEAR
                           000000  1096 	C$Lab3_3_SteeringAndCompass.c$28$1$137 ==.
                                   1097 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:28: unsigned int PW_CENTER = 2685;
      000000 75*14 7D         [24] 1098 	mov	_PW_CENTER,#0x7d
      000003 75*15 0A         [24] 1099 	mov	(_PW_CENTER + 1),#0x0a
                           000006  1100 	C$Lab3_3_SteeringAndCompass.c$29$1$137 ==.
                                   1101 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:29: unsigned int PW_RIGHT = 2005;
      000006 75*16 D5         [24] 1102 	mov	_PW_RIGHT,#0xd5
      000009 75*17 07         [24] 1103 	mov	(_PW_RIGHT + 1),#0x07
                           00000C  1104 	C$Lab3_3_SteeringAndCompass.c$30$1$137 ==.
                                   1105 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:30: unsigned int PW_LEFT = 3205;
      00000C 75*18 85         [24] 1106 	mov	_PW_LEFT,#0x85
      00000F 75*19 0C         [24] 1107 	mov	(_PW_LEFT + 1),#0x0c
                           000012  1108 	C$Lab3_3_SteeringAndCompass.c$31$1$137 ==.
                                   1109 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:31: unsigned int SERVO_PW = 0;
      000012 E4               [12] 1110 	clr	a
      000013 F5*1A            [12] 1111 	mov	_SERVO_PW,a
      000015 F5*1B            [12] 1112 	mov	(_SERVO_PW + 1),a
                           000017  1113 	C$Lab3_3_SteeringAndCompass.c$32$1$137 ==.
                                   1114 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:32: unsigned int count = 0;
      000017 F5*1C            [12] 1115 	mov	_count,a
      000019 F5*1D            [12] 1116 	mov	(_count + 1),a
                           00001B  1117 	C$Lab3_3_SteeringAndCompass.c$33$1$137 ==.
                                   1118 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:33: unsigned int bearing = 0; // used to hold compass bearing
      00001B F5*1E            [12] 1119 	mov	_bearing,a
      00001D F5*1F            [12] 1120 	mov	(_bearing + 1),a
                           00001F  1121 	C$Lab3_3_SteeringAndCompass.c$34$1$137 ==.
                                   1122 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:34: unsigned int other = 0;
      00001F F5*20            [12] 1123 	mov	_other,a
      000021 F5*21            [12] 1124 	mov	(_other + 1),a
                           000023  1125 	C$Lab3_3_SteeringAndCompass.c$35$1$137 ==.
                                   1126 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:35: unsigned int heading = 2700; // Desired car heading
      000023 75*22 8C         [24] 1127 	mov	_heading,#0x8c
      000026 75*23 0A         [24] 1128 	mov	(_heading + 1),#0x0a
                                   1129 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1130 	ljmp	__sdcc_program_startup
                                   1131 ;--------------------------------------------------------
                                   1132 ; Home
                                   1133 ;--------------------------------------------------------
                                   1134 	.area HOME    (CODE)
                                   1135 	.area HOME    (CODE)
      00004E                       1136 __sdcc_program_startup:
      00004E 02r05r06         [24] 1137 	ljmp	_main
                                   1138 ;	return from main will return to caller
                                   1139 ;--------------------------------------------------------
                                   1140 ; code
                                   1141 ;--------------------------------------------------------
                                   1142 	.area CSEG    (CODE)
                                   1143 ;------------------------------------------------------------
                                   1144 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1145 ;------------------------------------------------------------
                                   1146 ;i                         Allocated to registers r6 r7 
                                   1147 ;------------------------------------------------------------
                           000000  1148 	G$SYSCLK_Init$0$0 ==.
                           000000  1149 	C$c8051_SDCC.h$62$0$0 ==.
                                   1150 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:62: void SYSCLK_Init(void)
                                   1151 ;	-----------------------------------------
                                   1152 ;	 function SYSCLK_Init
                                   1153 ;	-----------------------------------------
      000000                       1154 _SYSCLK_Init:
                           000007  1155 	ar7 = 0x07
                           000006  1156 	ar6 = 0x06
                           000005  1157 	ar5 = 0x05
                           000004  1158 	ar4 = 0x04
                           000003  1159 	ar3 = 0x03
                           000002  1160 	ar2 = 0x02
                           000001  1161 	ar1 = 0x01
                           000000  1162 	ar0 = 0x00
                           000000  1163 	C$c8051_SDCC.h$66$1$2 ==.
                                   1164 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1165 	mov	_OSCXCN,#0x67
                           000003  1166 	C$c8051_SDCC.h$69$1$2 ==.
                                   1167 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1168 	mov	r6,#0x00
      000005 7F 01            [12] 1169 	mov	r7,#0x01
      000007                       1170 00107$:
      000007 EE               [12] 1171 	mov	a,r6
      000008 24 FF            [12] 1172 	add	a,#0xff
      00000A FC               [12] 1173 	mov	r4,a
      00000B EF               [12] 1174 	mov	a,r7
      00000C 34 FF            [12] 1175 	addc	a,#0xff
      00000E FD               [12] 1176 	mov	r5,a
      00000F 8C 06            [24] 1177 	mov	ar6,r4
      000011 8D 07            [24] 1178 	mov	ar7,r5
      000013 EC               [12] 1179 	mov	a,r4
      000014 4D               [12] 1180 	orl	a,r5
      000015 70 F0            [24] 1181 	jnz	00107$
                           000017  1182 	C$c8051_SDCC.h$71$1$2 ==.
                                   1183 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1184 00102$:
      000017 E5 B1            [12] 1185 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1186 	jnb	acc.7,00102$
                           00001C  1187 	C$c8051_SDCC.h$73$1$2 ==.
                                   1188 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1189 	mov	_OSCICN,#0x88
                           00001F  1190 	C$c8051_SDCC.h$76$1$2 ==.
                           00001F  1191 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1192 	ret
                                   1193 ;------------------------------------------------------------
                                   1194 ;Allocation info for local variables in function 'UART0_Init'
                                   1195 ;------------------------------------------------------------
                           000020  1196 	G$UART0_Init$0$0 ==.
                           000020  1197 	C$c8051_SDCC.h$84$1$2 ==.
                                   1198 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:84: void UART0_Init(void)
                                   1199 ;	-----------------------------------------
                                   1200 ;	 function UART0_Init
                                   1201 ;	-----------------------------------------
      000020                       1202 _UART0_Init:
                           000020  1203 	C$c8051_SDCC.h$86$1$4 ==.
                                   1204 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1205 	mov	_SCON0,#0x50
                           000023  1206 	C$c8051_SDCC.h$87$1$4 ==.
                                   1207 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:87: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1208 	mov	_TMOD,#0x20
                           000026  1209 	C$c8051_SDCC.h$88$1$4 ==.
                                   1210 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1211 	mov	_TH1,#0xdc
                           000029  1212 	C$c8051_SDCC.h$89$1$4 ==.
                                   1213 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1214 	setb	_TR1
                           00002B  1215 	C$c8051_SDCC.h$90$1$4 ==.
                                   1216 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:90: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1217 	orl	_CKCON,#0x10
                           00002E  1218 	C$c8051_SDCC.h$91$1$4 ==.
                                   1219 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1220 	orl	_PCON,#0x80
                           000031  1221 	C$c8051_SDCC.h$93$1$4 ==.
                                   1222 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:93: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1223 	setb	_TI0
                           000033  1224 	C$c8051_SDCC.h$94$1$4 ==.
                                   1225 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:94: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1226 	orl	_P0MDOUT,#0x01
                           000036  1227 	C$c8051_SDCC.h$95$1$4 ==.
                           000036  1228 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1229 	ret
                                   1230 ;------------------------------------------------------------
                                   1231 ;Allocation info for local variables in function 'Sys_Init'
                                   1232 ;------------------------------------------------------------
                           000037  1233 	G$Sys_Init$0$0 ==.
                           000037  1234 	C$c8051_SDCC.h$103$1$4 ==.
                                   1235 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:103: void Sys_Init(void)
                                   1236 ;	-----------------------------------------
                                   1237 ;	 function Sys_Init
                                   1238 ;	-----------------------------------------
      000037                       1239 _Sys_Init:
                           000037  1240 	C$c8051_SDCC.h$105$1$6 ==.
                                   1241 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:105: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1242 	mov	_WDTCN,#0xde
                           00003A  1243 	C$c8051_SDCC.h$106$1$6 ==.
                                   1244 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:106: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1245 	mov	_WDTCN,#0xad
                           00003D  1246 	C$c8051_SDCC.h$108$1$6 ==.
                                   1247 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1248 	lcall	_SYSCLK_Init
                           000040  1249 	C$c8051_SDCC.h$109$1$6 ==.
                                   1250 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:109: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1251 	lcall	_UART0_Init
                           000043  1252 	C$c8051_SDCC.h$111$1$6 ==.
                                   1253 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1254 	orl	_XBR0,#0x04
                           000046  1255 	C$c8051_SDCC.h$112$1$6 ==.
                                   1256 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1257 	orl	_XBR2,#0x40
                           000049  1258 	C$c8051_SDCC.h$113$1$6 ==.
                           000049  1259 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1260 	ret
                                   1261 ;------------------------------------------------------------
                                   1262 ;Allocation info for local variables in function 'putchar'
                                   1263 ;------------------------------------------------------------
                                   1264 ;c                         Allocated to registers r7 
                                   1265 ;------------------------------------------------------------
                           00004A  1266 	G$putchar$0$0 ==.
                           00004A  1267 	C$c8051_SDCC.h$129$1$6 ==.
                                   1268 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: void putchar(char c)
                                   1269 ;	-----------------------------------------
                                   1270 ;	 function putchar
                                   1271 ;	-----------------------------------------
      00004A                       1272 _putchar:
      00004A AF 82            [24] 1273 	mov	r7,dpl
                           00004C  1274 	C$c8051_SDCC.h$132$1$8 ==.
                                   1275 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:132: while (!TI0); 
      00004C                       1276 00101$:
                           00004C  1277 	C$c8051_SDCC.h$133$1$8 ==.
                                   1278 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:133: TI0 = 0;
      00004C 10 99 02         [24] 1279 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1280 	sjmp	00101$
      000051                       1281 00112$:
                           000051  1282 	C$c8051_SDCC.h$134$1$8 ==.
                                   1283 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:134: SBUF0 = c;
      000051 8F 99            [24] 1284 	mov	_SBUF0,r7
                           000053  1285 	C$c8051_SDCC.h$135$1$8 ==.
                           000053  1286 	XG$putchar$0$0 ==.
      000053 22               [24] 1287 	ret
                                   1288 ;------------------------------------------------------------
                                   1289 ;Allocation info for local variables in function 'getchar'
                                   1290 ;------------------------------------------------------------
                                   1291 ;c                         Allocated to registers r7 
                                   1292 ;------------------------------------------------------------
                           000054  1293 	G$getchar$0$0 ==.
                           000054  1294 	C$c8051_SDCC.h$154$1$8 ==.
                                   1295 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:154: char getchar(void)
                                   1296 ;	-----------------------------------------
                                   1297 ;	 function getchar
                                   1298 ;	-----------------------------------------
      000054                       1299 _getchar:
                           000054  1300 	C$c8051_SDCC.h$157$1$10 ==.
                                   1301 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:157: while (!RI0);
      000054                       1302 00101$:
                           000054  1303 	C$c8051_SDCC.h$158$1$10 ==.
                                   1304 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:158: RI0 = 0;
      000054 10 98 02         [24] 1305 	jbc	_RI0,00112$
      000057 80 FB            [24] 1306 	sjmp	00101$
      000059                       1307 00112$:
                           000059  1308 	C$c8051_SDCC.h$159$1$10 ==.
                                   1309 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:159: c = SBUF0;
      000059 AF 99            [24] 1310 	mov	r7,_SBUF0
                           00005B  1311 	C$c8051_SDCC.h$160$1$10 ==.
                                   1312 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:160: putchar(c);                          // echo to terminal
      00005B 8F 82            [24] 1313 	mov	dpl,r7
      00005D C0 07            [24] 1314 	push	ar7
      00005F 12r00r4A         [24] 1315 	lcall	_putchar
      000062 D0 07            [24] 1316 	pop	ar7
                           000064  1317 	C$c8051_SDCC.h$161$1$10 ==.
                                   1318 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:161: return c;
      000064 8F 82            [24] 1319 	mov	dpl,r7
                           000066  1320 	C$c8051_SDCC.h$162$1$10 ==.
                           000066  1321 	XG$getchar$0$0 ==.
      000066 22               [24] 1322 	ret
                                   1323 ;------------------------------------------------------------
                                   1324 ;Allocation info for local variables in function 'getchar_nw'
                                   1325 ;------------------------------------------------------------
                                   1326 ;c                         Allocated to registers 
                                   1327 ;------------------------------------------------------------
                           000067  1328 	G$getchar_nw$0$0 ==.
                           000067  1329 	C$c8051_SDCC.h$168$1$10 ==.
                                   1330 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:168: char getchar_nw(void)
                                   1331 ;	-----------------------------------------
                                   1332 ;	 function getchar_nw
                                   1333 ;	-----------------------------------------
      000067                       1334 _getchar_nw:
                           000067  1335 	C$c8051_SDCC.h$171$1$12 ==.
                                   1336 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:171: if (!RI0) return 0xFF;
      000067 20 98 05         [24] 1337 	jb	_RI0,00102$
      00006A 75 82 FF         [24] 1338 	mov	dpl,#0xff
      00006D 80 0B            [24] 1339 	sjmp	00104$
      00006F                       1340 00102$:
                           00006F  1341 	C$c8051_SDCC.h$174$2$13 ==.
                                   1342 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:174: RI0 = 0;
      00006F C2 98            [12] 1343 	clr	_RI0
                           000071  1344 	C$c8051_SDCC.h$175$2$13 ==.
                                   1345 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:175: c = SBUF0;
      000071 85 99 82         [24] 1346 	mov	dpl,_SBUF0
                           000074  1347 	C$c8051_SDCC.h$176$2$13 ==.
                                   1348 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:176: putchar(c);                          // echo to terminal
      000074 12r00r4A         [24] 1349 	lcall	_putchar
                           000077  1350 	C$c8051_SDCC.h$177$2$13 ==.
                                   1351 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:177: return SBUF0;
      000077 85 99 82         [24] 1352 	mov	dpl,_SBUF0
      00007A                       1353 00104$:
                           00007A  1354 	C$c8051_SDCC.h$179$1$12 ==.
                           00007A  1355 	XG$getchar_nw$0$0 ==.
      00007A 22               [24] 1356 	ret
                                   1357 ;------------------------------------------------------------
                                   1358 ;Allocation info for local variables in function 'lcd_print'
                                   1359 ;------------------------------------------------------------
                                   1360 ;fmt                       Allocated to stack - _bp -5
                                   1361 ;len                       Allocated to registers r6 
                                   1362 ;i                         Allocated to registers 
                                   1363 ;ap                        Allocated to registers 
                                   1364 ;text                      Allocated with name '_lcd_print_text_1_81'
                                   1365 ;------------------------------------------------------------
                           00007B  1366 	G$lcd_print$0$0 ==.
                           00007B  1367 	C$i2c.h$84$1$12 ==.
                                   1368 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:84: void lcd_print(const char *fmt, ...)
                                   1369 ;	-----------------------------------------
                                   1370 ;	 function lcd_print
                                   1371 ;	-----------------------------------------
      00007B                       1372 _lcd_print:
      00007B C0*00            [24] 1373 	push	_bp
      00007D 85 81*00         [24] 1374 	mov	_bp,sp
                           000080  1375 	C$i2c.h$90$1$81 ==.
                                   1376 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: if ( strlen(fmt) <= 0 ) return;         //If there is no data to print, return
      000080 E5*00            [12] 1377 	mov	a,_bp
      000082 24 FB            [12] 1378 	add	a,#0xfb
      000084 F8               [12] 1379 	mov	r0,a
      000085 86 82            [24] 1380 	mov	dpl,@r0
      000087 08               [12] 1381 	inc	r0
      000088 86 83            [24] 1382 	mov	dph,@r0
      00008A 08               [12] 1383 	inc	r0
      00008B 86 F0            [24] 1384 	mov	b,@r0
      00008D 12r00r00         [24] 1385 	lcall	_strlen
      000090 E5 82            [12] 1386 	mov	a,dpl
      000092 85 83 F0         [24] 1387 	mov	b,dph
      000095 45 F0            [12] 1388 	orl	a,b
      000097 70 02            [24] 1389 	jnz	00102$
      000099 80 62            [24] 1390 	sjmp	00109$
      00009B                       1391 00102$:
                           00009B  1392 	C$i2c.h$92$2$82 ==.
                                   1393 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:92: va_start(ap, fmt);
      00009B E5*00            [12] 1394 	mov	a,_bp
      00009D 24 FB            [12] 1395 	add	a,#0xfb
      00009F FF               [12] 1396 	mov	r7,a
      0000A0 8F*00            [24] 1397 	mov	_vsprintf_PARM_3,r7
                           0000A2  1398 	C$i2c.h$93$1$81 ==.
                                   1399 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: vsprintf(text, fmt, ap);
      0000A2 E5*00            [12] 1400 	mov	a,_bp
      0000A4 24 FB            [12] 1401 	add	a,#0xfb
      0000A6 F8               [12] 1402 	mov	r0,a
      0000A7 86*00            [24] 1403 	mov	_vsprintf_PARM_2,@r0
      0000A9 08               [12] 1404 	inc	r0
      0000AA 86*01            [24] 1405 	mov	(_vsprintf_PARM_2 + 1),@r0
      0000AC 08               [12] 1406 	inc	r0
      0000AD 86*02            [24] 1407 	mov	(_vsprintf_PARM_2 + 2),@r0
      0000AF 90r00r00         [24] 1408 	mov	dptr,#_lcd_print_text_1_81
      0000B2 75 F0 00         [24] 1409 	mov	b,#0x00
      0000B5 12r00r00         [24] 1410 	lcall	_vsprintf
                           0000B8  1411 	C$i2c.h$96$1$81 ==.
                                   1412 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: len = strlen(text);
      0000B8 90r00r00         [24] 1413 	mov	dptr,#_lcd_print_text_1_81
      0000BB 75 F0 00         [24] 1414 	mov	b,#0x00
      0000BE 12r00r00         [24] 1415 	lcall	_strlen
      0000C1 AE 82            [24] 1416 	mov	r6,dpl
                           0000C3  1417 	C$i2c.h$97$1$81 ==.
                                   1418 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000C3 7F 00            [12] 1419 	mov	r7,#0x00
      0000C5                       1420 00107$:
      0000C5 C3               [12] 1421 	clr	c
      0000C6 EF               [12] 1422 	mov	a,r7
      0000C7 9E               [12] 1423 	subb	a,r6
      0000C8 50 1F            [24] 1424 	jnc	00105$
                           0000CA  1425 	C$i2c.h$99$2$84 ==.
                                   1426 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000CA EF               [12] 1427 	mov	a,r7
      0000CB 24r00            [12] 1428 	add	a,#_lcd_print_text_1_81
      0000CD F5 82            [12] 1429 	mov	dpl,a
      0000CF E4               [12] 1430 	clr	a
      0000D0 34s00            [12] 1431 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000D2 F5 83            [12] 1432 	mov	dph,a
      0000D4 E0               [24] 1433 	movx	a,@dptr
      0000D5 FD               [12] 1434 	mov	r5,a
      0000D6 BD 0A 0D         [24] 1435 	cjne	r5,#0x0a,00108$
      0000D9 EF               [12] 1436 	mov	a,r7
      0000DA 24r00            [12] 1437 	add	a,#_lcd_print_text_1_81
      0000DC F5 82            [12] 1438 	mov	dpl,a
      0000DE E4               [12] 1439 	clr	a
      0000DF 34s00            [12] 1440 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000E1 F5 83            [12] 1441 	mov	dph,a
      0000E3 74 0D            [12] 1442 	mov	a,#0x0d
      0000E5 F0               [24] 1443 	movx	@dptr,a
      0000E6                       1444 00108$:
                           0000E6  1445 	C$i2c.h$97$1$81 ==.
                                   1446 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000E6 0F               [12] 1447 	inc	r7
      0000E7 80 DC            [24] 1448 	sjmp	00107$
      0000E9                       1449 00105$:
                           0000E9  1450 	C$i2c.h$102$1$81 ==.
                                   1451 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:102: i2c_write_data(0xC6, 0x00, text, len);
      0000E9 75*0Br00         [24] 1452 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_81
      0000EC 75*0Cs00         [24] 1453 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_81 >> 8)
      0000EF 75*0D 00         [24] 1454 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000F2 75*0A 00         [24] 1455 	mov	_i2c_write_data_PARM_2,#0x00
      0000F5 8E*0E            [24] 1456 	mov	_i2c_write_data_PARM_4,r6
      0000F7 75 82 C6         [24] 1457 	mov	dpl,#0xc6
      0000FA 12r03r8C         [24] 1458 	lcall	_i2c_write_data
      0000FD                       1459 00109$:
      0000FD D0*00            [24] 1460 	pop	_bp
                           0000FF  1461 	C$i2c.h$103$1$81 ==.
                           0000FF  1462 	XG$lcd_print$0$0 ==.
      0000FF 22               [24] 1463 	ret
                                   1464 ;------------------------------------------------------------
                                   1465 ;Allocation info for local variables in function 'lcd_clear'
                                   1466 ;------------------------------------------------------------
                                   1467 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_85'
                                   1468 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_85'
                                   1469 ;------------------------------------------------------------
                           000100  1470 	G$lcd_clear$0$0 ==.
                           000100  1471 	C$i2c.h$106$1$81 ==.
                                   1472 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:106: void lcd_clear()
                                   1473 ;	-----------------------------------------
                                   1474 ;	 function lcd_clear
                                   1475 ;	-----------------------------------------
      000100                       1476 _lcd_clear:
                           000100  1477 	C$i2c.h$108$1$81 ==.
                                   1478 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:108: unsigned char NumBytes=0, Cmd[2];
      000100 75*05 00         [24] 1479 	mov	_lcd_clear_NumBytes_1_85,#0x00
                           000103  1480 	C$i2c.h$110$1$85 ==.
                                   1481 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      000103                       1482 00101$:
      000103 74 C0            [12] 1483 	mov	a,#0x100 - 0x40
      000105 25*05            [12] 1484 	add	a,_lcd_clear_NumBytes_1_85
      000107 40 17            [24] 1485 	jc	00103$
      000109 75*10r05         [24] 1486 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_85
      00010C 75*11 00         [24] 1487 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00010F 75*12 40         [24] 1488 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000112 75*0F 00         [24] 1489 	mov	_i2c_read_data_PARM_2,#0x00
      000115 75*13 01         [24] 1490 	mov	_i2c_read_data_PARM_4,#0x01
      000118 75 82 C6         [24] 1491 	mov	dpl,#0xc6
      00011B 12r04r06         [24] 1492 	lcall	_i2c_read_data
      00011E 80 E3            [24] 1493 	sjmp	00101$
      000120                       1494 00103$:
                           000120  1495 	C$i2c.h$112$1$85 ==.
                                   1496 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:112: Cmd[0] = 12;
      000120 75*06 0C         [24] 1497 	mov	_lcd_clear_Cmd_1_85,#0x0c
                           000123  1498 	C$i2c.h$113$1$85 ==.
                                   1499 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:113: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000123 75*0Br06         [24] 1500 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_85
      000126 75*0C 00         [24] 1501 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000129 75*0D 40         [24] 1502 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00012C 75*0A 00         [24] 1503 	mov	_i2c_write_data_PARM_2,#0x00
      00012F 75*0E 01         [24] 1504 	mov	_i2c_write_data_PARM_4,#0x01
      000132 75 82 C6         [24] 1505 	mov	dpl,#0xc6
      000135 12r03r8C         [24] 1506 	lcall	_i2c_write_data
                           000138  1507 	C$i2c.h$114$1$85 ==.
                           000138  1508 	XG$lcd_clear$0$0 ==.
      000138 22               [24] 1509 	ret
                                   1510 ;------------------------------------------------------------
                                   1511 ;Allocation info for local variables in function 'read_keypad'
                                   1512 ;------------------------------------------------------------
                                   1513 ;i                         Allocated to registers r7 
                                   1514 ;Data                      Allocated with name '_read_keypad_Data_1_86'
                                   1515 ;------------------------------------------------------------
                           000139  1516 	G$read_keypad$0$0 ==.
                           000139  1517 	C$i2c.h$117$1$85 ==.
                                   1518 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:117: char read_keypad()
                                   1519 ;	-----------------------------------------
                                   1520 ;	 function read_keypad
                                   1521 ;	-----------------------------------------
      000139                       1522 _read_keypad:
                           000139  1523 	C$i2c.h$121$1$86 ==.
                                   1524 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      000139 75*10r08         [24] 1525 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_86
      00013C 75*11 00         [24] 1526 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00013F 75*12 40         [24] 1527 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000142 75*0F 01         [24] 1528 	mov	_i2c_read_data_PARM_2,#0x01
      000145 75*13 02         [24] 1529 	mov	_i2c_read_data_PARM_4,#0x02
      000148 75 82 C6         [24] 1530 	mov	dpl,#0xc6
      00014B 12r04r06         [24] 1531 	lcall	_i2c_read_data
                           00014E  1532 	C$i2c.h$122$1$86 ==.
                                   1533 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:122: if(Data[0] == 0xFF) return 0;   //No response on bus, no display
      00014E 74 FF            [12] 1534 	mov	a,#0xff
      000150 B5*08 05         [24] 1535 	cjne	a,_read_keypad_Data_1_86,00102$
      000153 75 82 00         [24] 1536 	mov	dpl,#0x00
      000156 80 5F            [24] 1537 	sjmp	00116$
      000158                       1538 00102$:
                           000158  1539 	C$i2c.h$124$1$86 ==.
                                   1540 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000158 7F 00            [12] 1541 	mov	r7,#0x00
      00015A 8F 06            [24] 1542 	mov	ar6,r7
      00015C                       1543 00114$:
                           00015C  1544 	C$i2c.h$126$2$87 ==.
                                   1545 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:126: if(Data[0] & (0x01 << i))   //find the ASCII value of the keypad read, if it is the current loop value
      00015C 8E F0            [24] 1546 	mov	b,r6
      00015E 05 F0            [12] 1547 	inc	b
      000160 7C 01            [12] 1548 	mov	r4,#0x01
      000162 7D 00            [12] 1549 	mov	r5,#0x00
      000164 80 06            [24] 1550 	sjmp	00145$
      000166                       1551 00144$:
      000166 EC               [12] 1552 	mov	a,r4
      000167 2C               [12] 1553 	add	a,r4
      000168 FC               [12] 1554 	mov	r4,a
      000169 ED               [12] 1555 	mov	a,r5
      00016A 33               [12] 1556 	rlc	a
      00016B FD               [12] 1557 	mov	r5,a
      00016C                       1558 00145$:
      00016C D5 F0 F7         [24] 1559 	djnz	b,00144$
      00016F AA*08            [24] 1560 	mov	r2,_read_keypad_Data_1_86
      000171 7B 00            [12] 1561 	mov	r3,#0x00
      000173 EA               [12] 1562 	mov	a,r2
      000174 52 04            [12] 1563 	anl	ar4,a
      000176 EB               [12] 1564 	mov	a,r3
      000177 52 05            [12] 1565 	anl	ar5,a
      000179 EC               [12] 1566 	mov	a,r4
      00017A 4D               [12] 1567 	orl	a,r5
      00017B 60 07            [24] 1568 	jz	00115$
                           00017D  1569 	C$i2c.h$127$2$87 ==.
                                   1570 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: return i+49;
      00017D 74 31            [12] 1571 	mov	a,#0x31
      00017F 2F               [12] 1572 	add	a,r7
      000180 F5 82            [12] 1573 	mov	dpl,a
      000182 80 33            [24] 1574 	sjmp	00116$
      000184                       1575 00115$:
                           000184  1576 	C$i2c.h$124$1$86 ==.
                                   1577 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000184 0E               [12] 1578 	inc	r6
      000185 8E 07            [24] 1579 	mov	ar7,r6
      000187 BE 08 00         [24] 1580 	cjne	r6,#0x08,00147$
      00018A                       1581 00147$:
      00018A 40 D0            [24] 1582 	jc	00114$
                           00018C  1583 	C$i2c.h$130$1$86 ==.
                                   1584 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:130: if(Data[1] & 0x01) return '9';  //if the value is equal to 9 return 9.
      00018C E5*09            [12] 1585 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00018E 30 E0 05         [24] 1586 	jnb	acc.0,00107$
      000191 75 82 39         [24] 1587 	mov	dpl,#0x39
      000194 80 21            [24] 1588 	sjmp	00116$
      000196                       1589 00107$:
                           000196  1590 	C$i2c.h$132$1$86 ==.
                                   1591 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:132: if(Data[1] & 0x02) return '*';  //if the value is equal to the star.
      000196 E5*09            [12] 1592 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      000198 30 E1 05         [24] 1593 	jnb	acc.1,00109$
      00019B 75 82 2A         [24] 1594 	mov	dpl,#0x2a
      00019E 80 17            [24] 1595 	sjmp	00116$
      0001A0                       1596 00109$:
                           0001A0  1597 	C$i2c.h$134$1$86 ==.
                                   1598 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:134: if(Data[1] & 0x04) return '0';  //if the value is equal to the 0 key
      0001A0 E5*09            [12] 1599 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001A2 30 E2 05         [24] 1600 	jnb	acc.2,00111$
      0001A5 75 82 30         [24] 1601 	mov	dpl,#0x30
      0001A8 80 0D            [24] 1602 	sjmp	00116$
      0001AA                       1603 00111$:
                           0001AA  1604 	C$i2c.h$136$1$86 ==.
                                   1605 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:136: if(Data[1] & 0x08) return '#';  //if the value is equal to the pound key
      0001AA E5*09            [12] 1606 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001AC 30 E3 05         [24] 1607 	jnb	acc.3,00113$
      0001AF 75 82 23         [24] 1608 	mov	dpl,#0x23
      0001B2 80 03            [24] 1609 	sjmp	00116$
      0001B4                       1610 00113$:
                           0001B4  1611 	C$i2c.h$138$1$86 ==.
                                   1612 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:138: return 0xFF;                    //else return a numerical -1 (0xFF)
      0001B4 75 82 FF         [24] 1613 	mov	dpl,#0xff
      0001B7                       1614 00116$:
                           0001B7  1615 	C$i2c.h$139$1$86 ==.
                           0001B7  1616 	XG$read_keypad$0$0 ==.
      0001B7 22               [24] 1617 	ret
                                   1618 ;------------------------------------------------------------
                                   1619 ;Allocation info for local variables in function 'kpd_input'
                                   1620 ;------------------------------------------------------------
                                   1621 ;mode                      Allocated to registers r7 
                                   1622 ;sum                       Allocated to registers r5 r6 
                                   1623 ;key                       Allocated to registers r3 
                                   1624 ;i                         Allocated to registers 
                                   1625 ;------------------------------------------------------------
                           0001B8  1626 	G$kpd_input$0$0 ==.
                           0001B8  1627 	C$i2c.h$151$1$86 ==.
                                   1628 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:151: unsigned int kpd_input(char mode)
                                   1629 ;	-----------------------------------------
                                   1630 ;	 function kpd_input
                                   1631 ;	-----------------------------------------
      0001B8                       1632 _kpd_input:
      0001B8 AF 82            [24] 1633 	mov	r7,dpl
                           0001BA  1634 	C$i2c.h$156$1$89 ==.
                                   1635 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: sum = 0;
                           0001BA  1636 	C$i2c.h$159$1$89 ==.
                                   1637 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:159: if(mode==0)lcd_print("\nType digits; end w/#");
      0001BA E4               [12] 1638 	clr	a
      0001BB FD               [12] 1639 	mov	r5,a
      0001BC FE               [12] 1640 	mov	r6,a
      0001BD EF               [12] 1641 	mov	a,r7
      0001BE 70 1D            [24] 1642 	jnz	00102$
      0001C0 C0 06            [24] 1643 	push	ar6
      0001C2 C0 05            [24] 1644 	push	ar5
      0001C4 74r00            [12] 1645 	mov	a,#___str_0
      0001C6 C0 E0            [24] 1646 	push	acc
      0001C8 74s00            [12] 1647 	mov	a,#(___str_0 >> 8)
      0001CA C0 E0            [24] 1648 	push	acc
      0001CC 74 80            [12] 1649 	mov	a,#0x80
      0001CE C0 E0            [24] 1650 	push	acc
      0001D0 12r00r7B         [24] 1651 	lcall	_lcd_print
      0001D3 15 81            [12] 1652 	dec	sp
      0001D5 15 81            [12] 1653 	dec	sp
      0001D7 15 81            [12] 1654 	dec	sp
      0001D9 D0 05            [24] 1655 	pop	ar5
      0001DB D0 06            [24] 1656 	pop	ar6
      0001DD                       1657 00102$:
                           0001DD  1658 	C$i2c.h$161$1$89 ==.
                                   1659 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:161: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001DD C0 06            [24] 1660 	push	ar6
      0001DF C0 05            [24] 1661 	push	ar5
      0001E1 74 08            [12] 1662 	mov	a,#0x08
      0001E3 C0 E0            [24] 1663 	push	acc
      0001E5 E4               [12] 1664 	clr	a
      0001E6 C0 E0            [24] 1665 	push	acc
      0001E8 74 08            [12] 1666 	mov	a,#0x08
      0001EA C0 E0            [24] 1667 	push	acc
      0001EC E4               [12] 1668 	clr	a
      0001ED C0 E0            [24] 1669 	push	acc
      0001EF 74 08            [12] 1670 	mov	a,#0x08
      0001F1 C0 E0            [24] 1671 	push	acc
      0001F3 E4               [12] 1672 	clr	a
      0001F4 C0 E0            [24] 1673 	push	acc
      0001F6 74 08            [12] 1674 	mov	a,#0x08
      0001F8 C0 E0            [24] 1675 	push	acc
      0001FA E4               [12] 1676 	clr	a
      0001FB C0 E0            [24] 1677 	push	acc
      0001FD 74 08            [12] 1678 	mov	a,#0x08
      0001FF C0 E0            [24] 1679 	push	acc
      000201 E4               [12] 1680 	clr	a
      000202 C0 E0            [24] 1681 	push	acc
      000204 74r16            [12] 1682 	mov	a,#___str_1
      000206 C0 E0            [24] 1683 	push	acc
      000208 74s00            [12] 1684 	mov	a,#(___str_1 >> 8)
      00020A C0 E0            [24] 1685 	push	acc
      00020C 74 80            [12] 1686 	mov	a,#0x80
      00020E C0 E0            [24] 1687 	push	acc
      000210 12r00r7B         [24] 1688 	lcall	_lcd_print
      000213 E5 81            [12] 1689 	mov	a,sp
      000215 24 F3            [12] 1690 	add	a,#0xf3
      000217 F5 81            [12] 1691 	mov	sp,a
                           000219  1692 	C$i2c.h$163$1$89 ==.
                                   1693 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:163: delay_time(500000);             //Add 20ms delay before reading i2c in loop
      000219 90 A1 20         [24] 1694 	mov	dptr,#0xa120
      00021C 75 F0 07         [24] 1695 	mov	b,#0x07
      00021F E4               [12] 1696 	clr	a
      000220 12r03r27         [24] 1697 	lcall	_delay_time
      000223 D0 05            [24] 1698 	pop	ar5
      000225 D0 06            [24] 1699 	pop	ar6
                           000227  1700 	C$i2c.h$167$1$89 ==.
                                   1701 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000227 7F 00            [12] 1702 	mov	r7,#0x00
                           000229  1703 	C$i2c.h$169$3$92 ==.
                                   1704 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(((key=read_keypad()) == 0xFF) || (key == '*'))delay_time(10000);
      000229                       1705 00104$:
      000229 C0 07            [24] 1706 	push	ar7
      00022B C0 06            [24] 1707 	push	ar6
      00022D C0 05            [24] 1708 	push	ar5
      00022F 12r01r39         [24] 1709 	lcall	_read_keypad
      000232 AC 82            [24] 1710 	mov	r4,dpl
      000234 D0 05            [24] 1711 	pop	ar5
      000236 D0 06            [24] 1712 	pop	ar6
      000238 D0 07            [24] 1713 	pop	ar7
      00023A 8C 03            [24] 1714 	mov	ar3,r4
      00023C BC FF 02         [24] 1715 	cjne	r4,#0xff,00146$
      00023F 80 03            [24] 1716 	sjmp	00105$
      000241                       1717 00146$:
      000241 BB 2A 17         [24] 1718 	cjne	r3,#0x2a,00106$
      000244                       1719 00105$:
      000244 90 27 10         [24] 1720 	mov	dptr,#0x2710
      000247 E4               [12] 1721 	clr	a
      000248 F5 F0            [12] 1722 	mov	b,a
      00024A C0 07            [24] 1723 	push	ar7
      00024C C0 06            [24] 1724 	push	ar6
      00024E C0 05            [24] 1725 	push	ar5
      000250 12r03r27         [24] 1726 	lcall	_delay_time
      000253 D0 05            [24] 1727 	pop	ar5
      000255 D0 06            [24] 1728 	pop	ar6
      000257 D0 07            [24] 1729 	pop	ar7
      000259 80 CE            [24] 1730 	sjmp	00104$
      00025B                       1731 00106$:
                           00025B  1732 	C$i2c.h$170$2$90 ==.
                                   1733 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: if(key == '#')
      00025B BB 23 2A         [24] 1734 	cjne	r3,#0x23,00114$
                           00025E  1735 	C$i2c.h$172$3$91 ==.
                                   1736 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:172: while(read_keypad() == '#')delay_time(10000);
      00025E                       1737 00107$:
      00025E C0 06            [24] 1738 	push	ar6
      000260 C0 05            [24] 1739 	push	ar5
      000262 12r01r39         [24] 1740 	lcall	_read_keypad
      000265 AC 82            [24] 1741 	mov	r4,dpl
      000267 D0 05            [24] 1742 	pop	ar5
      000269 D0 06            [24] 1743 	pop	ar6
      00026B BC 23 13         [24] 1744 	cjne	r4,#0x23,00109$
      00026E 90 27 10         [24] 1745 	mov	dptr,#0x2710
      000271 E4               [12] 1746 	clr	a
      000272 F5 F0            [12] 1747 	mov	b,a
      000274 C0 06            [24] 1748 	push	ar6
      000276 C0 05            [24] 1749 	push	ar5
      000278 12r03r27         [24] 1750 	lcall	_delay_time
      00027B D0 05            [24] 1751 	pop	ar5
      00027D D0 06            [24] 1752 	pop	ar6
      00027F 80 DD            [24] 1753 	sjmp	00107$
      000281                       1754 00109$:
                           000281  1755 	C$i2c.h$173$3$91 ==.
                                   1756 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:173: return sum;
      000281 8D 82            [24] 1757 	mov	dpl,r5
      000283 8E 83            [24] 1758 	mov	dph,r6
      000285 02r03r26         [24] 1759 	ljmp	00119$
      000288                       1760 00114$:
                           000288  1761 	C$i2c.h$177$3$92 ==.
                                   1762 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:177: lcd_print("%c", key);
      000288 8B 02            [24] 1763 	mov	ar2,r3
      00028A 7C 00            [12] 1764 	mov	r4,#0x00
      00028C C0 07            [24] 1765 	push	ar7
      00028E C0 06            [24] 1766 	push	ar6
      000290 C0 05            [24] 1767 	push	ar5
      000292 C0 04            [24] 1768 	push	ar4
      000294 C0 03            [24] 1769 	push	ar3
      000296 C0 02            [24] 1770 	push	ar2
      000298 C0 02            [24] 1771 	push	ar2
      00029A C0 04            [24] 1772 	push	ar4
      00029C 74r26            [12] 1773 	mov	a,#___str_2
      00029E C0 E0            [24] 1774 	push	acc
      0002A0 74s00            [12] 1775 	mov	a,#(___str_2 >> 8)
      0002A2 C0 E0            [24] 1776 	push	acc
      0002A4 74 80            [12] 1777 	mov	a,#0x80
      0002A6 C0 E0            [24] 1778 	push	acc
      0002A8 12r00r7B         [24] 1779 	lcall	_lcd_print
      0002AB E5 81            [12] 1780 	mov	a,sp
      0002AD 24 FB            [12] 1781 	add	a,#0xfb
      0002AF F5 81            [12] 1782 	mov	sp,a
      0002B1 D0 02            [24] 1783 	pop	ar2
      0002B3 D0 03            [24] 1784 	pop	ar3
      0002B5 D0 04            [24] 1785 	pop	ar4
      0002B7 D0 05            [24] 1786 	pop	ar5
      0002B9 D0 06            [24] 1787 	pop	ar6
                           0002BB  1788 	C$i2c.h$178$1$89 ==.
                                   1789 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:178: sum = sum*10 + key - '0';
      0002BB 8D*00            [24] 1790 	mov	__mulint_PARM_2,r5
      0002BD 8E*01            [24] 1791 	mov	(__mulint_PARM_2 + 1),r6
      0002BF 90 00 0A         [24] 1792 	mov	dptr,#0x000a
      0002C2 C0 04            [24] 1793 	push	ar4
      0002C4 C0 03            [24] 1794 	push	ar3
      0002C6 C0 02            [24] 1795 	push	ar2
      0002C8 12r00r00         [24] 1796 	lcall	__mulint
      0002CB A8 82            [24] 1797 	mov	r0,dpl
      0002CD A9 83            [24] 1798 	mov	r1,dph
      0002CF D0 02            [24] 1799 	pop	ar2
      0002D1 D0 03            [24] 1800 	pop	ar3
      0002D3 D0 04            [24] 1801 	pop	ar4
      0002D5 D0 07            [24] 1802 	pop	ar7
      0002D7 EA               [12] 1803 	mov	a,r2
      0002D8 28               [12] 1804 	add	a,r0
      0002D9 F8               [12] 1805 	mov	r0,a
      0002DA EC               [12] 1806 	mov	a,r4
      0002DB 39               [12] 1807 	addc	a,r1
      0002DC F9               [12] 1808 	mov	r1,a
      0002DD E8               [12] 1809 	mov	a,r0
      0002DE 24 D0            [12] 1810 	add	a,#0xd0
      0002E0 FD               [12] 1811 	mov	r5,a
      0002E1 E9               [12] 1812 	mov	a,r1
      0002E2 34 FF            [12] 1813 	addc	a,#0xff
      0002E4 FE               [12] 1814 	mov	r6,a
                           0002E5  1815 	C$i2c.h$179$3$92 ==.
                                   1816 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002E5                       1817 00110$:
      0002E5 C0 07            [24] 1818 	push	ar7
      0002E7 C0 06            [24] 1819 	push	ar6
      0002E9 C0 05            [24] 1820 	push	ar5
      0002EB C0 03            [24] 1821 	push	ar3
      0002ED 12r01r39         [24] 1822 	lcall	_read_keypad
      0002F0 AC 82            [24] 1823 	mov	r4,dpl
      0002F2 D0 03            [24] 1824 	pop	ar3
      0002F4 D0 05            [24] 1825 	pop	ar5
      0002F6 D0 06            [24] 1826 	pop	ar6
      0002F8 D0 07            [24] 1827 	pop	ar7
      0002FA EC               [12] 1828 	mov	a,r4
      0002FB B5 03 1B         [24] 1829 	cjne	a,ar3,00118$
      0002FE 90 27 10         [24] 1830 	mov	dptr,#0x2710
      000301 E4               [12] 1831 	clr	a
      000302 F5 F0            [12] 1832 	mov	b,a
      000304 C0 07            [24] 1833 	push	ar7
      000306 C0 06            [24] 1834 	push	ar6
      000308 C0 05            [24] 1835 	push	ar5
      00030A C0 03            [24] 1836 	push	ar3
      00030C 12r03r27         [24] 1837 	lcall	_delay_time
      00030F D0 03            [24] 1838 	pop	ar3
      000311 D0 05            [24] 1839 	pop	ar5
      000313 D0 06            [24] 1840 	pop	ar6
      000315 D0 07            [24] 1841 	pop	ar7
      000317 80 CC            [24] 1842 	sjmp	00110$
      000319                       1843 00118$:
                           000319  1844 	C$i2c.h$167$1$89 ==.
                                   1845 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000319 0F               [12] 1846 	inc	r7
      00031A BF 05 00         [24] 1847 	cjne	r7,#0x05,00155$
      00031D                       1848 00155$:
      00031D 50 03            [24] 1849 	jnc	00156$
      00031F 02r02r29         [24] 1850 	ljmp	00104$
      000322                       1851 00156$:
                           000322  1852 	C$i2c.h$182$1$89 ==.
                                   1853 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:182: return sum;
      000322 8D 82            [24] 1854 	mov	dpl,r5
      000324 8E 83            [24] 1855 	mov	dph,r6
      000326                       1856 00119$:
                           000326  1857 	C$i2c.h$183$1$89 ==.
                           000326  1858 	XG$kpd_input$0$0 ==.
      000326 22               [24] 1859 	ret
                                   1860 ;------------------------------------------------------------
                                   1861 ;Allocation info for local variables in function 'delay_time'
                                   1862 ;------------------------------------------------------------
                                   1863 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1864 ;index                     Allocated to registers 
                                   1865 ;------------------------------------------------------------
                           000327  1866 	G$delay_time$0$0 ==.
                           000327  1867 	C$i2c.h$192$1$89 ==.
                                   1868 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: void delay_time (unsigned long time_end)
                                   1869 ;	-----------------------------------------
                                   1870 ;	 function delay_time
                                   1871 ;	-----------------------------------------
      000327                       1872 _delay_time:
      000327 AC 82            [24] 1873 	mov	r4,dpl
      000329 AD 83            [24] 1874 	mov	r5,dph
      00032B AE F0            [24] 1875 	mov	r6,b
      00032D FF               [12] 1876 	mov	r7,a
                           00032E  1877 	C$i2c.h$196$1$94 ==.
                                   1878 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:196: for (index = 0; index < time_end; index++); //for loop delay
      00032E 78 00            [12] 1879 	mov	r0,#0x00
      000330 79 00            [12] 1880 	mov	r1,#0x00
      000332 7A 00            [12] 1881 	mov	r2,#0x00
      000334 7B 00            [12] 1882 	mov	r3,#0x00
      000336                       1883 00103$:
      000336 C3               [12] 1884 	clr	c
      000337 E8               [12] 1885 	mov	a,r0
      000338 9C               [12] 1886 	subb	a,r4
      000339 E9               [12] 1887 	mov	a,r1
      00033A 9D               [12] 1888 	subb	a,r5
      00033B EA               [12] 1889 	mov	a,r2
      00033C 9E               [12] 1890 	subb	a,r6
      00033D EB               [12] 1891 	mov	a,r3
      00033E 9F               [12] 1892 	subb	a,r7
      00033F 50 0F            [24] 1893 	jnc	00105$
      000341 08               [12] 1894 	inc	r0
      000342 B8 00 09         [24] 1895 	cjne	r0,#0x00,00115$
      000345 09               [12] 1896 	inc	r1
      000346 B9 00 05         [24] 1897 	cjne	r1,#0x00,00115$
      000349 0A               [12] 1898 	inc	r2
      00034A BA 00 E9         [24] 1899 	cjne	r2,#0x00,00103$
      00034D 0B               [12] 1900 	inc	r3
      00034E                       1901 00115$:
      00034E 80 E6            [24] 1902 	sjmp	00103$
      000350                       1903 00105$:
                           000350  1904 	C$i2c.h$197$1$94 ==.
                           000350  1905 	XG$delay_time$0$0 ==.
      000350 22               [24] 1906 	ret
                                   1907 ;------------------------------------------------------------
                                   1908 ;Allocation info for local variables in function 'i2c_start'
                                   1909 ;------------------------------------------------------------
                           000351  1910 	G$i2c_start$0$0 ==.
                           000351  1911 	C$i2c.h$200$1$94 ==.
                                   1912 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:200: void i2c_start(void)
                                   1913 ;	-----------------------------------------
                                   1914 ;	 function i2c_start
                                   1915 ;	-----------------------------------------
      000351                       1916 _i2c_start:
                           000351  1917 	C$i2c.h$202$1$96 ==.
                                   1918 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: while(BUSY);                //Wait until SMBus0 is free
      000351                       1919 00101$:
      000351 20 C7 FD         [24] 1920 	jb	_BUSY,00101$
                           000354  1921 	C$i2c.h$203$1$96 ==.
                                   1922 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:203: STA = 1;                    //Set Start Bit
      000354 D2 C5            [12] 1923 	setb	_STA
                           000356  1924 	C$i2c.h$204$1$96 ==.
                                   1925 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:204: while(!SI);                 //Wait until start sent
      000356                       1926 00104$:
      000356 30 C3 FD         [24] 1927 	jnb	_SI,00104$
                           000359  1928 	C$i2c.h$205$1$96 ==.
                                   1929 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:205: STA = 0;                    //Clear start bit
      000359 C2 C5            [12] 1930 	clr	_STA
                           00035B  1931 	C$i2c.h$206$1$96 ==.
                                   1932 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:206: SI = 0;                     //Clear SI
      00035B C2 C3            [12] 1933 	clr	_SI
                           00035D  1934 	C$i2c.h$207$1$96 ==.
                           00035D  1935 	XG$i2c_start$0$0 ==.
      00035D 22               [24] 1936 	ret
                                   1937 ;------------------------------------------------------------
                                   1938 ;Allocation info for local variables in function 'i2c_write'
                                   1939 ;------------------------------------------------------------
                                   1940 ;output_data               Allocated to registers 
                                   1941 ;------------------------------------------------------------
                           00035E  1942 	G$i2c_write$0$0 ==.
                           00035E  1943 	C$i2c.h$210$1$96 ==.
                                   1944 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:210: void i2c_write(unsigned char output_data)
                                   1945 ;	-----------------------------------------
                                   1946 ;	 function i2c_write
                                   1947 ;	-----------------------------------------
      00035E                       1948 _i2c_write:
      00035E 85 82 C2         [24] 1949 	mov	_SMB0DAT,dpl
                           000361  1950 	C$i2c.h$213$1$98 ==.
                                   1951 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:213: while(!SI);                 //Wait until send is complete
      000361                       1952 00101$:
                           000361  1953 	C$i2c.h$214$1$98 ==.
                                   1954 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:214: SI = 0;                     //Clear SI
      000361 10 C3 02         [24] 1955 	jbc	_SI,00112$
      000364 80 FB            [24] 1956 	sjmp	00101$
      000366                       1957 00112$:
                           000366  1958 	C$i2c.h$215$1$98 ==.
                           000366  1959 	XG$i2c_write$0$0 ==.
      000366 22               [24] 1960 	ret
                                   1961 ;------------------------------------------------------------
                                   1962 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1963 ;------------------------------------------------------------
                                   1964 ;output_data               Allocated to registers 
                                   1965 ;------------------------------------------------------------
                           000367  1966 	G$i2c_write_and_stop$0$0 ==.
                           000367  1967 	C$i2c.h$218$1$98 ==.
                                   1968 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:218: void i2c_write_and_stop(unsigned char output_data)
                                   1969 ;	-----------------------------------------
                                   1970 ;	 function i2c_write_and_stop
                                   1971 ;	-----------------------------------------
      000367                       1972 _i2c_write_and_stop:
      000367 85 82 C2         [24] 1973 	mov	_SMB0DAT,dpl
                           00036A  1974 	C$i2c.h$221$1$100 ==.
                                   1975 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:221: STO = 1;                    //Set stop bit
      00036A D2 C4            [12] 1976 	setb	_STO
                           00036C  1977 	C$i2c.h$222$1$100 ==.
                                   1978 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:222: while(!SI);                 //Wait until send is complete
      00036C                       1979 00101$:
                           00036C  1980 	C$i2c.h$223$1$100 ==.
                                   1981 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:223: SI = 0;                     //Clear SI
      00036C 10 C3 02         [24] 1982 	jbc	_SI,00112$
      00036F 80 FB            [24] 1983 	sjmp	00101$
      000371                       1984 00112$:
                           000371  1985 	C$i2c.h$224$1$100 ==.
                           000371  1986 	XG$i2c_write_and_stop$0$0 ==.
      000371 22               [24] 1987 	ret
                                   1988 ;------------------------------------------------------------
                                   1989 ;Allocation info for local variables in function 'i2c_read'
                                   1990 ;------------------------------------------------------------
                                   1991 ;input_data                Allocated to registers 
                                   1992 ;------------------------------------------------------------
                           000372  1993 	G$i2c_read$0$0 ==.
                           000372  1994 	C$i2c.h$227$1$100 ==.
                                   1995 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:227: unsigned char i2c_read(void)
                                   1996 ;	-----------------------------------------
                                   1997 ;	 function i2c_read
                                   1998 ;	-----------------------------------------
      000372                       1999 _i2c_read:
                           000372  2000 	C$i2c.h$231$1$102 ==.
                                   2001 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:231: while(!SI);                 //Wait until we have data to read
      000372                       2002 00101$:
      000372 30 C3 FD         [24] 2003 	jnb	_SI,00101$
                           000375  2004 	C$i2c.h$232$1$102 ==.
                                   2005 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:232: input_data = SMB0DAT;       //Read the data
      000375 85 C2 82         [24] 2006 	mov	dpl,_SMB0DAT
                           000378  2007 	C$i2c.h$233$1$102 ==.
                                   2008 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:233: SI = 0;                     //Clear SI
      000378 C2 C3            [12] 2009 	clr	_SI
                           00037A  2010 	C$i2c.h$234$1$102 ==.
                                   2011 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:234: return input_data;          //Return the read data
                           00037A  2012 	C$i2c.h$235$1$102 ==.
                           00037A  2013 	XG$i2c_read$0$0 ==.
      00037A 22               [24] 2014 	ret
                                   2015 ;------------------------------------------------------------
                                   2016 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2017 ;------------------------------------------------------------
                                   2018 ;input_data                Allocated to registers r7 
                                   2019 ;------------------------------------------------------------
                           00037B  2020 	G$i2c_read_and_stop$0$0 ==.
                           00037B  2021 	C$i2c.h$238$1$102 ==.
                                   2022 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:238: unsigned char i2c_read_and_stop(void)
                                   2023 ;	-----------------------------------------
                                   2024 ;	 function i2c_read_and_stop
                                   2025 ;	-----------------------------------------
      00037B                       2026 _i2c_read_and_stop:
                           00037B  2027 	C$i2c.h$242$1$104 ==.
                                   2028 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: while(!SI);                 //Wait until we have data to read
      00037B                       2029 00101$:
      00037B 30 C3 FD         [24] 2030 	jnb	_SI,00101$
                           00037E  2031 	C$i2c.h$243$1$104 ==.
                                   2032 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:243: input_data = SMB0DAT;       //Read the data
      00037E AF C2            [24] 2033 	mov	r7,_SMB0DAT
                           000380  2034 	C$i2c.h$244$1$104 ==.
                                   2035 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:244: SI = 0;                     //Clear SI
      000380 C2 C3            [12] 2036 	clr	_SI
                           000382  2037 	C$i2c.h$245$1$104 ==.
                                   2038 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:245: STO = 1;                    //Set stop bit
      000382 D2 C4            [12] 2039 	setb	_STO
                           000384  2040 	C$i2c.h$246$1$104 ==.
                                   2041 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:246: while(!SI);                 //Wait for stop
      000384                       2042 00104$:
                           000384  2043 	C$i2c.h$247$1$104 ==.
                                   2044 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:247: SI = 0;
      000384 10 C3 02         [24] 2045 	jbc	_SI,00122$
      000387 80 FB            [24] 2046 	sjmp	00104$
      000389                       2047 00122$:
                           000389  2048 	C$i2c.h$248$1$104 ==.
                                   2049 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:248: return input_data;          //Return the read data
      000389 8F 82            [24] 2050 	mov	dpl,r7
                           00038B  2051 	C$i2c.h$249$1$104 ==.
                           00038B  2052 	XG$i2c_read_and_stop$0$0 ==.
      00038B 22               [24] 2053 	ret
                                   2054 ;------------------------------------------------------------
                                   2055 ;Allocation info for local variables in function 'i2c_write_data'
                                   2056 ;------------------------------------------------------------
                                   2057 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2058 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2059 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2060 ;addr                      Allocated to registers r7 
                                   2061 ;i                         Allocated to registers 
                                   2062 ;------------------------------------------------------------
                           00038C  2063 	G$i2c_write_data$0$0 ==.
                           00038C  2064 	C$i2c.h$252$1$104 ==.
                                   2065 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:252: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2066 ;	-----------------------------------------
                                   2067 ;	 function i2c_write_data
                                   2068 ;	-----------------------------------------
      00038C                       2069 _i2c_write_data:
      00038C AF 82            [24] 2070 	mov	r7,dpl
                           00038E  2071 	C$i2c.h$256$1$106 ==.
                                   2072 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:256: EA = 0;                     //Don't allow interrupts during I2C work
      00038E C2 AF            [12] 2073 	clr	_EA
                           000390  2074 	C$i2c.h$257$1$106 ==.
                                   2075 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:257: i2c_start();                //Initiate I2C transfer
      000390 C0 07            [24] 2076 	push	ar7
      000392 12r03r51         [24] 2077 	lcall	_i2c_start
      000395 D0 07            [24] 2078 	pop	ar7
                           000397  2079 	C$i2c.h$258$1$106 ==.
                                   2080 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:258: i2c_write(addr & ~0x01);    //Write the desired address to the bus
      000397 74 FE            [12] 2081 	mov	a,#0xfe
      000399 5F               [12] 2082 	anl	a,r7
      00039A F5 82            [12] 2083 	mov	dpl,a
      00039C 12r03r5E         [24] 2084 	lcall	_i2c_write
                           00039F  2085 	C$i2c.h$259$1$106 ==.
                                   2086 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:259: i2c_write(start_reg);       //Write the start register to the bus
      00039F 85*0A 82         [24] 2087 	mov	dpl,_i2c_write_data_PARM_2
      0003A2 12r03r5E         [24] 2088 	lcall	_i2c_write
                           0003A5  2089 	C$i2c.h$260$1$106 ==.
                                   2090 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003A5 7F 00            [12] 2091 	mov	r7,#0x00
      0003A7                       2092 00103$:
      0003A7 AD*0E            [24] 2093 	mov	r5,_i2c_write_data_PARM_4
      0003A9 7E 00            [12] 2094 	mov	r6,#0x00
      0003AB 1D               [12] 2095 	dec	r5
      0003AC BD FF 01         [24] 2096 	cjne	r5,#0xff,00114$
      0003AF 1E               [12] 2097 	dec	r6
      0003B0                       2098 00114$:
      0003B0 8F 03            [24] 2099 	mov	ar3,r7
      0003B2 7C 00            [12] 2100 	mov	r4,#0x00
      0003B4 C3               [12] 2101 	clr	c
      0003B5 EB               [12] 2102 	mov	a,r3
      0003B6 9D               [12] 2103 	subb	a,r5
      0003B7 EC               [12] 2104 	mov	a,r4
      0003B8 64 80            [12] 2105 	xrl	a,#0x80
      0003BA 8E F0            [24] 2106 	mov	b,r6
      0003BC 63 F0 80         [24] 2107 	xrl	b,#0x80
      0003BF 95 F0            [12] 2108 	subb	a,b
      0003C1 50 1F            [24] 2109 	jnc	00101$
                           0003C3  2110 	C$i2c.h$261$1$106 ==.
                                   2111 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:261: i2c_write(buffer[i]);
      0003C3 EF               [12] 2112 	mov	a,r7
      0003C4 25*0B            [12] 2113 	add	a,_i2c_write_data_PARM_3
      0003C6 FC               [12] 2114 	mov	r4,a
      0003C7 E4               [12] 2115 	clr	a
      0003C8 35*0C            [12] 2116 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003CA FD               [12] 2117 	mov	r5,a
      0003CB AE*0D            [24] 2118 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003CD 8C 82            [24] 2119 	mov	dpl,r4
      0003CF 8D 83            [24] 2120 	mov	dph,r5
      0003D1 8E F0            [24] 2121 	mov	b,r6
      0003D3 12r00r00         [24] 2122 	lcall	__gptrget
      0003D6 F5 82            [12] 2123 	mov	dpl,a
      0003D8 C0 07            [24] 2124 	push	ar7
      0003DA 12r03r5E         [24] 2125 	lcall	_i2c_write
      0003DD D0 07            [24] 2126 	pop	ar7
                           0003DF  2127 	C$i2c.h$260$1$106 ==.
                                   2128 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003DF 0F               [12] 2129 	inc	r7
      0003E0 80 C5            [24] 2130 	sjmp	00103$
      0003E2                       2131 00101$:
                           0003E2  2132 	C$i2c.h$262$1$106 ==.
                                   2133 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:262: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003E2 AE*0E            [24] 2134 	mov	r6,_i2c_write_data_PARM_4
      0003E4 7F 00            [12] 2135 	mov	r7,#0x00
      0003E6 1E               [12] 2136 	dec	r6
      0003E7 BE FF 01         [24] 2137 	cjne	r6,#0xff,00116$
      0003EA 1F               [12] 2138 	dec	r7
      0003EB                       2139 00116$:
      0003EB EE               [12] 2140 	mov	a,r6
      0003EC 25*0B            [12] 2141 	add	a,_i2c_write_data_PARM_3
      0003EE FE               [12] 2142 	mov	r6,a
      0003EF EF               [12] 2143 	mov	a,r7
      0003F0 35*0C            [12] 2144 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003F2 FF               [12] 2145 	mov	r7,a
      0003F3 AD*0D            [24] 2146 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003F5 8E 82            [24] 2147 	mov	dpl,r6
      0003F7 8F 83            [24] 2148 	mov	dph,r7
      0003F9 8D F0            [24] 2149 	mov	b,r5
      0003FB 12r00r00         [24] 2150 	lcall	__gptrget
      0003FE F5 82            [12] 2151 	mov	dpl,a
      000400 12r03r67         [24] 2152 	lcall	_i2c_write_and_stop
                           000403  2153 	C$i2c.h$263$1$106 ==.
                                   2154 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:263: EA = 1;                     //Re-Enable interrupts
      000403 D2 AF            [12] 2155 	setb	_EA
                           000405  2156 	C$i2c.h$264$1$106 ==.
                           000405  2157 	XG$i2c_write_data$0$0 ==.
      000405 22               [24] 2158 	ret
                                   2159 ;------------------------------------------------------------
                                   2160 ;Allocation info for local variables in function 'i2c_read_data'
                                   2161 ;------------------------------------------------------------
                                   2162 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2163 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2164 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2165 ;addr                      Allocated to registers r7 
                                   2166 ;j                         Allocated to registers 
                                   2167 ;------------------------------------------------------------
                           000406  2168 	G$i2c_read_data$0$0 ==.
                           000406  2169 	C$i2c.h$267$1$106 ==.
                                   2170 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2171 ;	-----------------------------------------
                                   2172 ;	 function i2c_read_data
                                   2173 ;	-----------------------------------------
      000406                       2174 _i2c_read_data:
      000406 AF 82            [24] 2175 	mov	r7,dpl
                           000408  2176 	C$i2c.h$271$1$108 ==.
                                   2177 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:271: EA = 0;                     //Don't allow interrupts during I2C work
      000408 C2 AF            [12] 2178 	clr	_EA
                           00040A  2179 	C$i2c.h$272$1$108 ==.
                                   2180 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: i2c_start();                //Start I2C transfer
      00040A C0 07            [24] 2181 	push	ar7
      00040C 12r03r51         [24] 2182 	lcall	_i2c_start
      00040F D0 07            [24] 2183 	pop	ar7
                           000411  2184 	C$i2c.h$273$1$108 ==.
                                   2185 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:273: i2c_write(addr & ~0x01);    //Write address of device that will be written to, send 0
      000411 74 FE            [12] 2186 	mov	a,#0xfe
      000413 5F               [12] 2187 	anl	a,r7
      000414 F5 82            [12] 2188 	mov	dpl,a
      000416 C0 07            [24] 2189 	push	ar7
      000418 12r03r5E         [24] 2190 	lcall	_i2c_write
                           00041B  2191 	C$i2c.h$274$1$108 ==.
                                   2192 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:274: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      00041B 85*0F 82         [24] 2193 	mov	dpl,_i2c_read_data_PARM_2
      00041E 12r03r67         [24] 2194 	lcall	_i2c_write_and_stop
                           000421  2195 	C$i2c.h$275$1$108 ==.
                                   2196 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:275: i2c_start();                //Start I2C transfer
      000421 12r03r51         [24] 2197 	lcall	_i2c_start
      000424 D0 07            [24] 2198 	pop	ar7
                           000426  2199 	C$i2c.h$276$1$108 ==.
                                   2200 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:276: i2c_write(addr | 0x01);     //Write address again, this time indicating a read operation
      000426 74 01            [12] 2201 	mov	a,#0x01
      000428 4F               [12] 2202 	orl	a,r7
      000429 F5 82            [12] 2203 	mov	dpl,a
      00042B 12r03r5E         [24] 2204 	lcall	_i2c_write
                           00042E  2205 	C$i2c.h$277$1$108 ==.
                                   2206 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      00042E 7F 00            [12] 2207 	mov	r7,#0x00
      000430                       2208 00103$:
      000430 AD*13            [24] 2209 	mov	r5,_i2c_read_data_PARM_4
      000432 7E 00            [12] 2210 	mov	r6,#0x00
      000434 1D               [12] 2211 	dec	r5
      000435 BD FF 01         [24] 2212 	cjne	r5,#0xff,00114$
      000438 1E               [12] 2213 	dec	r6
      000439                       2214 00114$:
      000439 8F 03            [24] 2215 	mov	ar3,r7
      00043B 7C 00            [12] 2216 	mov	r4,#0x00
      00043D C3               [12] 2217 	clr	c
      00043E EB               [12] 2218 	mov	a,r3
      00043F 9D               [12] 2219 	subb	a,r5
      000440 EC               [12] 2220 	mov	a,r4
      000441 64 80            [12] 2221 	xrl	a,#0x80
      000443 8E F0            [24] 2222 	mov	b,r6
      000445 63 F0 80         [24] 2223 	xrl	b,#0x80
      000448 95 F0            [12] 2224 	subb	a,b
      00044A 50 2E            [24] 2225 	jnc	00101$
                           00044C  2226 	C$i2c.h$279$2$109 ==.
                                   2227 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:279: AA = 1;                 //Set acknowledge bit
      00044C D2 C2            [12] 2228 	setb	_AA
                           00044E  2229 	C$i2c.h$280$2$109 ==.
                                   2230 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:280: buffer[j] = i2c_read(); //Read data, save it in buffer
      00044E EF               [12] 2231 	mov	a,r7
      00044F 25*10            [12] 2232 	add	a,_i2c_read_data_PARM_3
      000451 FC               [12] 2233 	mov	r4,a
      000452 E4               [12] 2234 	clr	a
      000453 35*11            [12] 2235 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000455 FD               [12] 2236 	mov	r5,a
      000456 AE*12            [24] 2237 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      000458 C0 07            [24] 2238 	push	ar7
      00045A C0 06            [24] 2239 	push	ar6
      00045C C0 05            [24] 2240 	push	ar5
      00045E C0 04            [24] 2241 	push	ar4
      000460 12r03r72         [24] 2242 	lcall	_i2c_read
      000463 AB 82            [24] 2243 	mov	r3,dpl
      000465 D0 04            [24] 2244 	pop	ar4
      000467 D0 05            [24] 2245 	pop	ar5
      000469 D0 06            [24] 2246 	pop	ar6
      00046B D0 07            [24] 2247 	pop	ar7
      00046D 8C 82            [24] 2248 	mov	dpl,r4
      00046F 8D 83            [24] 2249 	mov	dph,r5
      000471 8E F0            [24] 2250 	mov	b,r6
      000473 EB               [12] 2251 	mov	a,r3
      000474 12r00r00         [24] 2252 	lcall	__gptrput
                           000477  2253 	C$i2c.h$277$1$108 ==.
                                   2254 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      000477 0F               [12] 2255 	inc	r7
      000478 80 B6            [24] 2256 	sjmp	00103$
      00047A                       2257 00101$:
                           00047A  2258 	C$i2c.h$282$1$108 ==.
                                   2259 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:282: AA = 0;
      00047A C2 C2            [12] 2260 	clr	_AA
                           00047C  2261 	C$i2c.h$283$1$108 ==.
                                   2262 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:283: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00047C AE*13            [24] 2263 	mov	r6,_i2c_read_data_PARM_4
      00047E 7F 00            [12] 2264 	mov	r7,#0x00
      000480 1E               [12] 2265 	dec	r6
      000481 BE FF 01         [24] 2266 	cjne	r6,#0xff,00116$
      000484 1F               [12] 2267 	dec	r7
      000485                       2268 00116$:
      000485 EE               [12] 2269 	mov	a,r6
      000486 25*10            [12] 2270 	add	a,_i2c_read_data_PARM_3
      000488 FE               [12] 2271 	mov	r6,a
      000489 EF               [12] 2272 	mov	a,r7
      00048A 35*11            [12] 2273 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00048C FF               [12] 2274 	mov	r7,a
      00048D AD*12            [24] 2275 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      00048F C0 07            [24] 2276 	push	ar7
      000491 C0 06            [24] 2277 	push	ar6
      000493 C0 05            [24] 2278 	push	ar5
      000495 12r03r7B         [24] 2279 	lcall	_i2c_read_and_stop
      000498 AC 82            [24] 2280 	mov	r4,dpl
      00049A D0 05            [24] 2281 	pop	ar5
      00049C D0 06            [24] 2282 	pop	ar6
      00049E D0 07            [24] 2283 	pop	ar7
      0004A0 8E 82            [24] 2284 	mov	dpl,r6
      0004A2 8F 83            [24] 2285 	mov	dph,r7
      0004A4 8D F0            [24] 2286 	mov	b,r5
      0004A6 EC               [12] 2287 	mov	a,r4
      0004A7 12r00r00         [24] 2288 	lcall	__gptrput
                           0004AA  2289 	C$i2c.h$284$1$108 ==.
                                   2290 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:284: EA = 1;                     //Re-Enable interrupts
      0004AA D2 AF            [12] 2291 	setb	_EA
                           0004AC  2292 	C$i2c.h$285$1$108 ==.
                           0004AC  2293 	XG$i2c_read_data$0$0 ==.
      0004AC 22               [24] 2294 	ret
                                   2295 ;------------------------------------------------------------
                                   2296 ;Allocation info for local variables in function 'Accel_Init'
                                   2297 ;------------------------------------------------------------
                           0004AD  2298 	G$Accel_Init$0$0 ==.
                           0004AD  2299 	C$i2c.h$294$1$108 ==.
                                   2300 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:294: void Accel_Init(void)
                                   2301 ;	-----------------------------------------
                                   2302 ;	 function Accel_Init
                                   2303 ;	-----------------------------------------
      0004AD                       2304 _Accel_Init:
                           0004AD  2305 	C$i2c.h$298$1$111 ==.
                                   2306 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:298: Data2[0]=0x23;  //normal power mode, 50Hz ODR, y & x axes enabled
      0004AD 75*00 23         [24] 2307 	mov	_Data2,#0x23
                           0004B0  2308 	C$i2c.h$300$1$111 ==.
                                   2309 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:300: Data2[1]=0x00;  //default - no filtering
      0004B0 75*01 00         [24] 2310 	mov	(_Data2 + 0x0001),#0x00
                           0004B3  2311 	C$i2c.h$301$1$111 ==.
                                   2312 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:301: Data2[1]=0x10;  //filtered data selected, HPF = 1.0->0.125Hz
      0004B3 75*01 10         [24] 2313 	mov	(_Data2 + 0x0001),#0x10
                           0004B6  2314 	C$i2c.h$302$1$111 ==.
                                   2315 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:302: Data2[2]=0x00;  //default - no interrupts enabled
      0004B6 75*02 00         [24] 2316 	mov	(_Data2 + 0x0002),#0x00
                           0004B9  2317 	C$i2c.h$304$1$111 ==.
                                   2318 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:304: i2c_write_data(addr_accel, 0x20, Data2, 1);
      0004B9 75*0Br00         [24] 2319 	mov	_i2c_write_data_PARM_3,#_Data2
      0004BC 75*0C 00         [24] 2320 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004BF 75*0D 40         [24] 2321 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C2 75*0A 20         [24] 2322 	mov	_i2c_write_data_PARM_2,#0x20
      0004C5 75*0E 01         [24] 2323 	mov	_i2c_write_data_PARM_4,#0x01
      0004C8 75 82 30         [24] 2324 	mov	dpl,#0x30
      0004CB 12r03r8C         [24] 2325 	lcall	_i2c_write_data
                           0004CE  2326 	C$i2c.h$310$1$111 ==.
                           0004CE  2327 	XG$Accel_Init$0$0 ==.
      0004CE 22               [24] 2328 	ret
                                   2329 ;------------------------------------------------------------
                                   2330 ;Allocation info for local variables in function 'Accel_Init_C'
                                   2331 ;------------------------------------------------------------
                           0004CF  2332 	G$Accel_Init_C$0$0 ==.
                           0004CF  2333 	C$i2c.h$313$1$111 ==.
                                   2334 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:313: void Accel_Init_C(void)
                                   2335 ;	-----------------------------------------
                                   2336 ;	 function Accel_Init_C
                                   2337 ;	-----------------------------------------
      0004CF                       2338 _Accel_Init_C:
                           0004CF  2339 	C$i2c.h$318$1$113 ==.
                                   2340 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:318: Data2[0]=0x04;  //set register address auto increment bit
      0004CF 75*00 04         [24] 2341 	mov	_Data2,#0x04
                           0004D2  2342 	C$i2c.h$319$1$113 ==.
                                   2343 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:319: i2c_write_data(addr_accelC, 0x23, Data2, 1);
      0004D2 75*0Br00         [24] 2344 	mov	_i2c_write_data_PARM_3,#_Data2
      0004D5 75*0C 00         [24] 2345 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004D8 75*0D 40         [24] 2346 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004DB 75*0A 23         [24] 2347 	mov	_i2c_write_data_PARM_2,#0x23
      0004DE 75*0E 01         [24] 2348 	mov	_i2c_write_data_PARM_4,#0x01
      0004E1 75 82 3A         [24] 2349 	mov	dpl,#0x3a
      0004E4 12r03r8C         [24] 2350 	lcall	_i2c_write_data
                           0004E7  2351 	C$i2c.h$321$1$113 ==.
                                   2352 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:321: Data2[0]=0x6B;  //R20 normal power mode, 800Hz ODR, y & x axes enabled
      0004E7 75*00 6B         [24] 2353 	mov	_Data2,#0x6b
                           0004EA  2354 	C$i2c.h$323$1$113 ==.
                                   2355 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:323: Data2[1]=0x00;  //R21 Default - no HP filtering
      0004EA 75*01 00         [24] 2356 	mov	(_Data2 + 0x0001),#0x00
                           0004ED  2357 	C$i2c.h$325$1$113 ==.
                                   2358 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:325: Data2[2]=0x00;  //R22 Default - no interrupts enabled
      0004ED 75*02 00         [24] 2359 	mov	(_Data2 + 0x0002),#0x00
                           0004F0  2360 	C$i2c.h$326$1$113 ==.
                                   2361 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:326: i2c_write_data(addr_accelC, 0x20, Data2, 1);
      0004F0 75*0Br00         [24] 2362 	mov	_i2c_write_data_PARM_3,#_Data2
      0004F3 75*0C 00         [24] 2363 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004F6 75*0D 40         [24] 2364 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004F9 75*0A 20         [24] 2365 	mov	_i2c_write_data_PARM_2,#0x20
      0004FC 75*0E 01         [24] 2366 	mov	_i2c_write_data_PARM_4,#0x01
      0004FF 75 82 3A         [24] 2367 	mov	dpl,#0x3a
      000502 12r03r8C         [24] 2368 	lcall	_i2c_write_data
                           000505  2369 	C$i2c.h$328$1$113 ==.
                           000505  2370 	XG$Accel_Init_C$0$0 ==.
      000505 22               [24] 2371 	ret
                                   2372 ;------------------------------------------------------------
                                   2373 ;Allocation info for local variables in function 'main'
                                   2374 ;------------------------------------------------------------
                           000506  2375 	G$main$0$0 ==.
                           000506  2376 	C$Lab3_3_SteeringAndCompass.c$48$1$113 ==.
                                   2377 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:48: void main(void)
                                   2378 ;	-----------------------------------------
                                   2379 ;	 function main
                                   2380 ;	-----------------------------------------
      000506                       2381 _main:
                           000506  2382 	C$Lab3_3_SteeringAndCompass.c$52$1$119 ==.
                                   2383 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:52: Sys_Init();
      000506 12r00r37         [24] 2384 	lcall	_Sys_Init
                           000509  2385 	C$Lab3_3_SteeringAndCompass.c$53$1$119 ==.
                                   2386 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:53: putchar(' '); //the quotes in this line may not format correctly
      000509 75 82 20         [24] 2387 	mov	dpl,#0x20
      00050C 12r00r4A         [24] 2388 	lcall	_putchar
                           00050F  2389 	C$Lab3_3_SteeringAndCompass.c$54$1$119 ==.
                                   2390 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:54: Port_Init();
      00050F 12r05rDB         [24] 2391 	lcall	_Port_Init
                           000512  2392 	C$Lab3_3_SteeringAndCompass.c$55$1$119 ==.
                                   2393 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:55: XBR0_Init();
      000512 12r05rEB         [24] 2394 	lcall	_XBR0_Init
                           000515  2395 	C$Lab3_3_SteeringAndCompass.c$56$1$119 ==.
                                   2396 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:56: PCA_Init();
      000515 12r05rEF         [24] 2397 	lcall	_PCA_Init
                           000518  2398 	C$Lab3_3_SteeringAndCompass.c$57$1$119 ==.
                                   2399 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:57: SMB_Init();
      000518 12r06r23         [24] 2400 	lcall	_SMB_Init
                           00051B  2401 	C$Lab3_3_SteeringAndCompass.c$61$1$119 ==.
                                   2402 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:61: printf("Embedded Control Steering + Compass\r\n");
      00051B 74r29            [12] 2403 	mov	a,#___str_3
      00051D C0 E0            [24] 2404 	push	acc
      00051F 74s00            [12] 2405 	mov	a,#(___str_3 >> 8)
      000521 C0 E0            [24] 2406 	push	acc
      000523 74 80            [12] 2407 	mov	a,#0x80
      000525 C0 E0            [24] 2408 	push	acc
      000527 12r00r00         [24] 2409 	lcall	_printf
      00052A 15 81            [12] 2410 	dec	sp
      00052C 15 81            [12] 2411 	dec	sp
      00052E 15 81            [12] 2412 	dec	sp
                           000530  2413 	C$Lab3_3_SteeringAndCompass.c$64$1$119 ==.
                                   2414 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:64: while(1)
      000530                       2415 00109$:
                           000530  2416 	C$Lab3_3_SteeringAndCompass.c$67$2$120 ==.
                                   2417 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:67: if (count % 2 == 0) // if 40ms has passed
      000530 E5*1C            [12] 2418 	mov	a,_count
      000532 20 E0 FB         [24] 2419 	jb	acc.0,00109$
                           000535  2420 	C$Lab3_3_SteeringAndCompass.c$69$3$121 ==.
                                   2421 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:69: if(TURN_EN) // If the enable switch is on
      000535 30 B7 18         [24] 2422 	jnb	_TURN_EN,00102$
                           000538  2423 	C$Lab3_3_SteeringAndCompass.c$71$4$122 ==.
                                   2424 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:71: SERVO_PW = ErrorCorrection(); // Get new pulse width 
      000538 12r06rBF         [24] 2425 	lcall	_ErrorCorrection
      00053B 85 82*1A         [24] 2426 	mov	_SERVO_PW,dpl
      00053E 85 83*1B         [24] 2427 	mov	(_SERVO_PW + 1),dph
                           000541  2428 	C$Lab3_3_SteeringAndCompass.c$72$4$122 ==.
                                   2429 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:72: PCA0CP0 = 0xFFFF - SERVO_PW; // Change pulse width
      000541 74 FF            [12] 2430 	mov	a,#0xff
      000543 C3               [12] 2431 	clr	c
      000544 95*1A            [12] 2432 	subb	a,_SERVO_PW
      000546 F5 EA            [12] 2433 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000548 74 FF            [12] 2434 	mov	a,#0xff
      00054A 95*1B            [12] 2435 	subb	a,(_SERVO_PW + 1)
      00054C F5 FA            [12] 2436 	mov	((_PCA0CP0 >> 8) & 0xFF),a
      00054E 80 1C            [24] 2437 	sjmp	00103$
      000550                       2438 00102$:
                           000550  2439 	C$Lab3_3_SteeringAndCompass.c$77$4$123 ==.
                                   2440 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:77: bearing = ReadCompass(); // Read current heading
      000550 12r06r99         [24] 2441 	lcall	_ReadCompass
      000553 85 82*1E         [24] 2442 	mov	_bearing,dpl
      000556 85 83*1F         [24] 2443 	mov	(_bearing + 1),dph
                           000559  2444 	C$Lab3_3_SteeringAndCompass.c$78$4$123 ==.
                                   2445 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:78: SERVO_PW = PW_CENTER; // Set pulse width to center position
      000559 85*14*1A         [24] 2446 	mov	_SERVO_PW,_PW_CENTER
      00055C 85*15*1B         [24] 2447 	mov	(_SERVO_PW + 1),(_PW_CENTER + 1)
                           00055F  2448 	C$Lab3_3_SteeringAndCompass.c$79$4$123 ==.
                                   2449 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:79: PCA0CP0 = 0xFFFF - SERVO_PW; // Change pulse width
      00055F 74 FF            [12] 2450 	mov	a,#0xff
      000561 C3               [12] 2451 	clr	c
      000562 95*1A            [12] 2452 	subb	a,_SERVO_PW
      000564 F5 EA            [12] 2453 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000566 74 FF            [12] 2454 	mov	a,#0xff
      000568 95*1B            [12] 2455 	subb	a,(_SERVO_PW + 1)
      00056A F5 FA            [12] 2456 	mov	((_PCA0CP0 >> 8) & 0xFF),a
      00056C                       2457 00103$:
                           00056C  2458 	C$Lab3_3_SteeringAndCompass.c$82$1$119 ==.
                                   2459 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:82: if(other % 40 == 0) // Print every other 4 outputs
      00056C 75*00 28         [24] 2460 	mov	__moduint_PARM_2,#0x28
      00056F 75*01 00         [24] 2461 	mov	(__moduint_PARM_2 + 1),#0x00
      000572 85*20 82         [24] 2462 	mov	dpl,_other
      000575 85*21 83         [24] 2463 	mov	dph,(_other + 1)
      000578 12r00r00         [24] 2464 	lcall	__moduint
      00057B E5 82            [12] 2465 	mov	a,dpl
      00057D 85 83 F0         [24] 2466 	mov	b,dph
      000580 45 F0            [12] 2467 	orl	a,b
      000582 70 4B            [24] 2468 	jnz	00105$
                           000584  2469 	C$Lab3_3_SteeringAndCompass.c$84$4$124 ==.
                                   2470 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:84: printf("\r\nActual heading = %u",bearing); // Print the actual heading
      000584 C0*1E            [24] 2471 	push	_bearing
      000586 C0*1F            [24] 2472 	push	(_bearing + 1)
      000588 74r4F            [12] 2473 	mov	a,#___str_4
      00058A C0 E0            [24] 2474 	push	acc
      00058C 74s00            [12] 2475 	mov	a,#(___str_4 >> 8)
      00058E C0 E0            [24] 2476 	push	acc
      000590 74 80            [12] 2477 	mov	a,#0x80
      000592 C0 E0            [24] 2478 	push	acc
      000594 12r00r00         [24] 2479 	lcall	_printf
      000597 E5 81            [12] 2480 	mov	a,sp
      000599 24 FB            [12] 2481 	add	a,#0xfb
      00059B F5 81            [12] 2482 	mov	sp,a
                           00059D  2483 	C$Lab3_3_SteeringAndCompass.c$85$4$124 ==.
                                   2484 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:85: printf("\r\nDesired heading = %u", heading); // Print the desired heading
      00059D C0*22            [24] 2485 	push	_heading
      00059F C0*23            [24] 2486 	push	(_heading + 1)
      0005A1 74r65            [12] 2487 	mov	a,#___str_5
      0005A3 C0 E0            [24] 2488 	push	acc
      0005A5 74s00            [12] 2489 	mov	a,#(___str_5 >> 8)
      0005A7 C0 E0            [24] 2490 	push	acc
      0005A9 74 80            [12] 2491 	mov	a,#0x80
      0005AB C0 E0            [24] 2492 	push	acc
      0005AD 12r00r00         [24] 2493 	lcall	_printf
      0005B0 E5 81            [12] 2494 	mov	a,sp
      0005B2 24 FB            [12] 2495 	add	a,#0xfb
      0005B4 F5 81            [12] 2496 	mov	sp,a
                           0005B6  2497 	C$Lab3_3_SteeringAndCompass.c$86$4$124 ==.
                                   2498 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:86: printf("\r\nServo Pulse width = %u", SERVO_PW); // Print the servo pulse width
      0005B6 C0*1A            [24] 2499 	push	_SERVO_PW
      0005B8 C0*1B            [24] 2500 	push	(_SERVO_PW + 1)
      0005BA 74r7C            [12] 2501 	mov	a,#___str_6
      0005BC C0 E0            [24] 2502 	push	acc
      0005BE 74s00            [12] 2503 	mov	a,#(___str_6 >> 8)
      0005C0 C0 E0            [24] 2504 	push	acc
      0005C2 74 80            [12] 2505 	mov	a,#0x80
      0005C4 C0 E0            [24] 2506 	push	acc
      0005C6 12r00r00         [24] 2507 	lcall	_printf
      0005C9 E5 81            [12] 2508 	mov	a,sp
      0005CB 24 FB            [12] 2509 	add	a,#0xfb
      0005CD F5 81            [12] 2510 	mov	sp,a
      0005CF                       2511 00105$:
                           0005CF  2512 	C$Lab3_3_SteeringAndCompass.c$89$3$121 ==.
                                   2513 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:89: other++; // Increment output counter
      0005CF 05*20            [12] 2514 	inc	_other
      0005D1 E4               [12] 2515 	clr	a
      0005D2 B5*20 02         [24] 2516 	cjne	a,_other,00128$
      0005D5 05*21            [12] 2517 	inc	(_other + 1)
      0005D7                       2518 00128$:
      0005D7 02r05r30         [24] 2519 	ljmp	00109$
                           0005DA  2520 	C$Lab3_3_SteeringAndCompass.c$93$1$119 ==.
                           0005DA  2521 	XG$main$0$0 ==.
      0005DA 22               [24] 2522 	ret
                                   2523 ;------------------------------------------------------------
                                   2524 ;Allocation info for local variables in function 'Port_Init'
                                   2525 ;------------------------------------------------------------
                           0005DB  2526 	G$Port_Init$0$0 ==.
                           0005DB  2527 	C$Lab3_3_SteeringAndCompass.c$100$1$119 ==.
                                   2528 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:100: void Port_Init()
                                   2529 ;	-----------------------------------------
                                   2530 ;	 function Port_Init
                                   2531 ;	-----------------------------------------
      0005DB                       2532 _Port_Init:
                           0005DB  2533 	C$Lab3_3_SteeringAndCompass.c$102$1$125 ==.
                                   2534 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:102: P1MDOUT = 0x0F ;//set output pin for CEX0 in push-pull mode
      0005DB 75 A5 0F         [24] 2535 	mov	_P1MDOUT,#0x0f
                           0005DE  2536 	C$Lab3_3_SteeringAndCompass.c$103$1$125 ==.
                                   2537 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:103: P0MDOUT = 0xC0;
      0005DE 75 A4 C0         [24] 2538 	mov	_P0MDOUT,#0xc0
                           0005E1  2539 	C$Lab3_3_SteeringAndCompass.c$104$1$125 ==.
                                   2540 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:104: P0 |= ~0xC0;
      0005E1 43 80 3F         [24] 2541 	orl	_P0,#0x3f
                           0005E4  2542 	C$Lab3_3_SteeringAndCompass.c$105$1$125 ==.
                                   2543 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:105: P3MDOUT &= ~0x80; // Set P3.7 as input 
      0005E4 53 A7 7F         [24] 2544 	anl	_P3MDOUT,#0x7f
                           0005E7  2545 	C$Lab3_3_SteeringAndCompass.c$106$1$125 ==.
                                   2546 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:106: P3 |= 0x80; // Set high impedance
      0005E7 43 B0 80         [24] 2547 	orl	_P3,#0x80
                           0005EA  2548 	C$Lab3_3_SteeringAndCompass.c$107$1$125 ==.
                           0005EA  2549 	XG$Port_Init$0$0 ==.
      0005EA 22               [24] 2550 	ret
                                   2551 ;------------------------------------------------------------
                                   2552 ;Allocation info for local variables in function 'XBR0_Init'
                                   2553 ;------------------------------------------------------------
                           0005EB  2554 	G$XBR0_Init$0$0 ==.
                           0005EB  2555 	C$Lab3_3_SteeringAndCompass.c$114$1$125 ==.
                                   2556 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:114: void XBR0_Init()
                                   2557 ;	-----------------------------------------
                                   2558 ;	 function XBR0_Init
                                   2559 ;	-----------------------------------------
      0005EB                       2560 _XBR0_Init:
                           0005EB  2561 	C$Lab3_3_SteeringAndCompass.c$116$1$126 ==.
                                   2562 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:116: XBR0 = 0x27;     // set up URART0, SPI, SMB, and CEX 0-3
      0005EB 75 E1 27         [24] 2563 	mov	_XBR0,#0x27
                           0005EE  2564 	C$Lab3_3_SteeringAndCompass.c$118$1$126 ==.
                           0005EE  2565 	XG$XBR0_Init$0$0 ==.
      0005EE 22               [24] 2566 	ret
                                   2567 ;------------------------------------------------------------
                                   2568 ;Allocation info for local variables in function 'PCA_Init'
                                   2569 ;------------------------------------------------------------
                           0005EF  2570 	G$PCA_Init$0$0 ==.
                           0005EF  2571 	C$Lab3_3_SteeringAndCompass.c$125$1$126 ==.
                                   2572 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:125: void PCA_Init(void)
                                   2573 ;	-----------------------------------------
                                   2574 ;	 function PCA_Init
                                   2575 ;	-----------------------------------------
      0005EF                       2576 _PCA_Init:
                           0005EF  2577 	C$Lab3_3_SteeringAndCompass.c$127$1$128 ==.
                                   2578 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:127: EA = 1; // Enable all interrupts
      0005EF D2 AF            [12] 2579 	setb	_EA
                           0005F1  2580 	C$Lab3_3_SteeringAndCompass.c$128$1$128 ==.
                                   2581 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:128: EIE1 |= 0x08; // Enable PCA0 interrupts
      0005F1 43 E6 08         [24] 2582 	orl	_EIE1,#0x08
                           0005F4  2583 	C$Lab3_3_SteeringAndCompass.c$129$1$128 ==.
                                   2584 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:129: PCA0MD = 0x81;   // SYSCLK/12, enable CF interrupts, suspend when idle
      0005F4 75 D9 81         [24] 2585 	mov	_PCA0MD,#0x81
                           0005F7  2586 	C$Lab3_3_SteeringAndCompass.c$130$1$128 ==.
                                   2587 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:130: PCA0CPM0 = 0xC2; // 16 bit, enable compare, enable PWM
      0005F7 75 DA C2         [24] 2588 	mov	_PCA0CPM0,#0xc2
                           0005FA  2589 	C$Lab3_3_SteeringAndCompass.c$131$1$128 ==.
                                   2590 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:131: PCA0 = PCA_START; // Set period for 20ms
      0005FA 75 E9 00         [24] 2591 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      0005FD 75 F9 70         [24] 2592 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           000600  2593 	C$Lab3_3_SteeringAndCompass.c$132$1$128 ==.
                                   2594 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:132: PCA0CN |= 0x40;  // enable PCA
      000600 43 D8 40         [24] 2595 	orl	_PCA0CN,#0x40
                           000603  2596 	C$Lab3_3_SteeringAndCompass.c$133$1$128 ==.
                           000603  2597 	XG$PCA_Init$0$0 ==.
      000603 22               [24] 2598 	ret
                                   2599 ;------------------------------------------------------------
                                   2600 ;Allocation info for local variables in function 'PCA_ISR'
                                   2601 ;------------------------------------------------------------
                           000604  2602 	G$PCA_ISR$0$0 ==.
                           000604  2603 	C$Lab3_3_SteeringAndCompass.c$140$1$128 ==.
                                   2604 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:140: void PCA_ISR ( void ) __interrupt 9
                                   2605 ;	-----------------------------------------
                                   2606 ;	 function PCA_ISR
                                   2607 ;	-----------------------------------------
      000604                       2608 _PCA_ISR:
      000604 C0 E0            [24] 2609 	push	acc
      000606 C0 D0            [24] 2610 	push	psw
                           000608  2611 	C$Lab3_3_SteeringAndCompass.c$142$1$130 ==.
                                   2612 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:142: if (CF)
                           000608  2613 	C$Lab3_3_SteeringAndCompass.c$144$2$131 ==.
                                   2614 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:144: CF = 0; // Clear overflow flag
      000608 10 DF 02         [24] 2615 	jbc	_CF,00108$
      00060B 80 0E            [24] 2616 	sjmp	00102$
      00060D                       2617 00108$:
                           00060D  2618 	C$Lab3_3_SteeringAndCompass.c$145$2$131 ==.
                                   2619 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:145: PCA0 = PCA_START; // Set period for 20ms
      00060D 75 E9 00         [24] 2620 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      000610 75 F9 70         [24] 2621 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           000613  2622 	C$Lab3_3_SteeringAndCompass.c$146$2$131 ==.
                                   2623 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:146: count++; // Increment overflow counter
      000613 05*1C            [12] 2624 	inc	_count
      000615 E4               [12] 2625 	clr	a
      000616 B5*1C 02         [24] 2626 	cjne	a,_count,00109$
      000619 05*1D            [12] 2627 	inc	(_count + 1)
      00061B                       2628 00109$:
      00061B                       2629 00102$:
                           00061B  2630 	C$Lab3_3_SteeringAndCompass.c$149$1$130 ==.
                                   2631 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:149: PCA0CN &= 0x40; // Clear other PCI interrupt sources
      00061B 53 D8 40         [24] 2632 	anl	_PCA0CN,#0x40
      00061E D0 D0            [24] 2633 	pop	psw
      000620 D0 E0            [24] 2634 	pop	acc
                           000622  2635 	C$Lab3_3_SteeringAndCompass.c$150$1$130 ==.
                           000622  2636 	XG$PCA_ISR$0$0 ==.
      000622 32               [24] 2637 	reti
                                   2638 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2639 ;	eliminated unneeded push/pop dpl
                                   2640 ;	eliminated unneeded push/pop dph
                                   2641 ;	eliminated unneeded push/pop b
                                   2642 ;------------------------------------------------------------
                                   2643 ;Allocation info for local variables in function 'SMB_Init'
                                   2644 ;------------------------------------------------------------
                           000623  2645 	G$SMB_Init$0$0 ==.
                           000623  2646 	C$Lab3_3_SteeringAndCompass.c$157$1$130 ==.
                                   2647 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:157: void SMB_Init()
                                   2648 ;	-----------------------------------------
                                   2649 ;	 function SMB_Init
                                   2650 ;	-----------------------------------------
      000623                       2651 _SMB_Init:
                           000623  2652 	C$Lab3_3_SteeringAndCompass.c$159$1$132 ==.
                                   2653 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:159: SMB0CR = 0x93;
      000623 75 CF 93         [24] 2654 	mov	_SMB0CR,#0x93
                           000626  2655 	C$Lab3_3_SteeringAndCompass.c$160$1$132 ==.
                                   2656 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:160: ENSMB = 1;
      000626 D2 C6            [12] 2657 	setb	_ENSMB
                           000628  2658 	C$Lab3_3_SteeringAndCompass.c$161$1$132 ==.
                           000628  2659 	XG$SMB_Init$0$0 ==.
      000628 22               [24] 2660 	ret
                                   2661 ;------------------------------------------------------------
                                   2662 ;Allocation info for local variables in function 'Steering_Servo'
                                   2663 ;------------------------------------------------------------
                                   2664 ;input                     Allocated to registers r7 
                                   2665 ;------------------------------------------------------------
                           000629  2666 	G$Steering_Servo$0$0 ==.
                           000629  2667 	C$Lab3_3_SteeringAndCompass.c$163$1$132 ==.
                                   2668 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:163: void Steering_Servo()
                                   2669 ;	-----------------------------------------
                                   2670 ;	 function Steering_Servo
                                   2671 ;	-----------------------------------------
      000629                       2672 _Steering_Servo:
                           000629  2673 	C$Lab3_3_SteeringAndCompass.c$167$1$133 ==.
                                   2674 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:167: input = getchar();
      000629 12r00r54         [24] 2675 	lcall	_getchar
      00062C AF 82            [24] 2676 	mov	r7,dpl
                           00062E  2677 	C$Lab3_3_SteeringAndCompass.c$168$1$133 ==.
                                   2678 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:168: if(input == 'r') //if 'r' is pressed by the user
      00062E BF 72 1F         [24] 2679 	cjne	r7,#0x72,00108$
                           000631  2680 	C$Lab3_3_SteeringAndCompass.c$170$2$134 ==.
                                   2681 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:170: if(SERVO_PW+10 <= PW_RIGHT)
      000631 74 0A            [12] 2682 	mov	a,#0x0a
      000633 25*1A            [12] 2683 	add	a,_SERVO_PW
      000635 FD               [12] 2684 	mov	r5,a
      000636 E4               [12] 2685 	clr	a
      000637 35*1B            [12] 2686 	addc	a,(_SERVO_PW + 1)
      000639 FE               [12] 2687 	mov	r6,a
      00063A C3               [12] 2688 	clr	c
      00063B E5*16            [12] 2689 	mov	a,_PW_RIGHT
      00063D 9D               [12] 2690 	subb	a,r5
      00063E E5*17            [12] 2691 	mov	a,(_PW_RIGHT + 1)
      000640 9E               [12] 2692 	subb	a,r6
      000641 40 2F            [24] 2693 	jc	00109$
                           000643  2694 	C$Lab3_3_SteeringAndCompass.c$171$2$134 ==.
                                   2695 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:171: SERVO_PW = SERVO_PW + 10; //increase the steering pulsewidth by 10
      000643 74 0A            [12] 2696 	mov	a,#0x0a
      000645 25*1A            [12] 2697 	add	a,_SERVO_PW
      000647 F5*1A            [12] 2698 	mov	_SERVO_PW,a
      000649 E4               [12] 2699 	clr	a
      00064A 35*1B            [12] 2700 	addc	a,(_SERVO_PW + 1)
      00064C F5*1B            [12] 2701 	mov	(_SERVO_PW + 1),a
      00064E 80 22            [24] 2702 	sjmp	00109$
      000650                       2703 00108$:
                           000650  2704 	C$Lab3_3_SteeringAndCompass.c$173$1$133 ==.
                                   2705 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:173: else if(input == 'l') //if 'l' is pressed by the user
      000650 BF 6C 1F         [24] 2706 	cjne	r7,#0x6c,00109$
                           000653  2707 	C$Lab3_3_SteeringAndCompass.c$175$2$135 ==.
                                   2708 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:175: if(SERVO_PW-10 >= PW_LEFT)
      000653 E5*1A            [12] 2709 	mov	a,_SERVO_PW
      000655 24 F6            [12] 2710 	add	a,#0xf6
      000657 FE               [12] 2711 	mov	r6,a
      000658 E5*1B            [12] 2712 	mov	a,(_SERVO_PW + 1)
      00065A 34 FF            [12] 2713 	addc	a,#0xff
      00065C FF               [12] 2714 	mov	r7,a
      00065D C3               [12] 2715 	clr	c
      00065E EE               [12] 2716 	mov	a,r6
      00065F 95*18            [12] 2717 	subb	a,_PW_LEFT
      000661 EF               [12] 2718 	mov	a,r7
      000662 95*19            [12] 2719 	subb	a,(_PW_LEFT + 1)
      000664 40 0C            [24] 2720 	jc	00109$
                           000666  2721 	C$Lab3_3_SteeringAndCompass.c$176$2$135 ==.
                                   2722 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:176: SERVO_PW = SERVO_PW - 10; //decrease the steering pulsewidth by 10
      000666 E5*1A            [12] 2723 	mov	a,_SERVO_PW
      000668 24 F6            [12] 2724 	add	a,#0xf6
      00066A F5*1A            [12] 2725 	mov	_SERVO_PW,a
      00066C E5*1B            [12] 2726 	mov	a,(_SERVO_PW + 1)
      00066E 34 FF            [12] 2727 	addc	a,#0xff
      000670 F5*1B            [12] 2728 	mov	(_SERVO_PW + 1),a
      000672                       2729 00109$:
                           000672  2730 	C$Lab3_3_SteeringAndCompass.c$178$1$133 ==.
                                   2731 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:178: PCA0CP0 = 0xFFFF - SERVO_PW; // Set CEX0 compare value
      000672 74 FF            [12] 2732 	mov	a,#0xff
      000674 C3               [12] 2733 	clr	c
      000675 95*1A            [12] 2734 	subb	a,_SERVO_PW
      000677 F5 EA            [12] 2735 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000679 74 FF            [12] 2736 	mov	a,#0xff
      00067B 95*1B            [12] 2737 	subb	a,(_SERVO_PW + 1)
      00067D F5 FA            [12] 2738 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           00067F  2739 	C$Lab3_3_SteeringAndCompass.c$179$1$133 ==.
                                   2740 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:179: printf("\r\nSERVO_PW: %u\n", SERVO_PW);
      00067F C0*1A            [24] 2741 	push	_SERVO_PW
      000681 C0*1B            [24] 2742 	push	(_SERVO_PW + 1)
      000683 74r95            [12] 2743 	mov	a,#___str_7
      000685 C0 E0            [24] 2744 	push	acc
      000687 74s00            [12] 2745 	mov	a,#(___str_7 >> 8)
      000689 C0 E0            [24] 2746 	push	acc
      00068B 74 80            [12] 2747 	mov	a,#0x80
      00068D C0 E0            [24] 2748 	push	acc
      00068F 12r00r00         [24] 2749 	lcall	_printf
      000692 E5 81            [12] 2750 	mov	a,sp
      000694 24 FB            [12] 2751 	add	a,#0xfb
      000696 F5 81            [12] 2752 	mov	sp,a
                           000698  2753 	C$Lab3_3_SteeringAndCompass.c$181$1$133 ==.
                           000698  2754 	XG$Steering_Servo$0$0 ==.
      000698 22               [24] 2755 	ret
                                   2756 ;------------------------------------------------------------
                                   2757 ;Allocation info for local variables in function 'ReadCompass'
                                   2758 ;------------------------------------------------------------
                                   2759 ;addr                      Allocated to registers 
                                   2760 ;Data                      Allocated with name '_ReadCompass_Data_1_136'
                                   2761 ;heading                   Allocated to registers 
                                   2762 ;------------------------------------------------------------
                           000699  2763 	G$ReadCompass$0$0 ==.
                           000699  2764 	C$Lab3_3_SteeringAndCompass.c$183$1$133 ==.
                                   2765 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:183: unsigned int ReadCompass()
                                   2766 ;	-----------------------------------------
                                   2767 ;	 function ReadCompass
                                   2768 ;	-----------------------------------------
      000699                       2769 _ReadCompass:
                           000699  2770 	C$Lab3_3_SteeringAndCompass.c$188$1$136 ==.
                                   2771 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:188: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      000699 75*10r24         [24] 2772 	mov	_i2c_read_data_PARM_3,#_ReadCompass_Data_1_136
      00069C 75*11 00         [24] 2773 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00069F 75*12 40         [24] 2774 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0006A2 75*0F 02         [24] 2775 	mov	_i2c_read_data_PARM_2,#0x02
      0006A5 75*13 02         [24] 2776 	mov	_i2c_read_data_PARM_4,#0x02
      0006A8 75 82 C0         [24] 2777 	mov	dpl,#0xc0
      0006AB 12r04r06         [24] 2778 	lcall	_i2c_read_data
                           0006AE  2779 	C$Lab3_3_SteeringAndCompass.c$189$1$136 ==.
                                   2780 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:189: heading =(((unsigned int)Data[0] << 8) | (unsigned int)Data[1]); //combine the two values
      0006AE AF*24            [24] 2781 	mov	r7,_ReadCompass_Data_1_136
      0006B0 7E 00            [12] 2782 	mov	r6,#0x00
      0006B2 AC*25            [24] 2783 	mov	r4,(_ReadCompass_Data_1_136 + 0x0001)
      0006B4 7D 00            [12] 2784 	mov	r5,#0x00
      0006B6 EC               [12] 2785 	mov	a,r4
      0006B7 4E               [12] 2786 	orl	a,r6
      0006B8 F5 82            [12] 2787 	mov	dpl,a
      0006BA ED               [12] 2788 	mov	a,r5
      0006BB 4F               [12] 2789 	orl	a,r7
      0006BC F5 83            [12] 2790 	mov	dph,a
                           0006BE  2791 	C$Lab3_3_SteeringAndCompass.c$192$1$136 ==.
                                   2792 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:192: return heading; // the heading returned in degrees between 0 and 3599
                           0006BE  2793 	C$Lab3_3_SteeringAndCompass.c$193$1$136 ==.
                           0006BE  2794 	XG$ReadCompass$0$0 ==.
      0006BE 22               [24] 2795 	ret
                                   2796 ;------------------------------------------------------------
                                   2797 ;Allocation info for local variables in function 'ErrorCorrection'
                                   2798 ;------------------------------------------------------------
                                   2799 ;error                     Allocated with name '_ErrorCorrection_error_1_137'
                                   2800 ;tmp_pw                    Allocated to registers r6 r7 
                                   2801 ;------------------------------------------------------------
                           0006BF  2802 	G$ErrorCorrection$0$0 ==.
                           0006BF  2803 	C$Lab3_3_SteeringAndCompass.c$195$1$136 ==.
                                   2804 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:195: unsigned int ErrorCorrection()
                                   2805 ;	-----------------------------------------
                                   2806 ;	 function ErrorCorrection
                                   2807 ;	-----------------------------------------
      0006BF                       2808 _ErrorCorrection:
                           0006BF  2809 	C$Lab3_3_SteeringAndCompass.c$213$1$137 ==.
                                   2810 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:213: bearing = ReadCompass();
      0006BF 12r06r99         [24] 2811 	lcall	_ReadCompass
      0006C2 85 82*1E         [24] 2812 	mov	_bearing,dpl
      0006C5 85 83*1F         [24] 2813 	mov	(_bearing + 1),dph
                           0006C8  2814 	C$Lab3_3_SteeringAndCompass.c$215$1$137 ==.
                                   2815 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:215: error = (int)heading - (int)bearing; // error is desired heading - actual
      0006C8 AE*22            [24] 2816 	mov	r6,_heading
      0006CA AF*23            [24] 2817 	mov	r7,(_heading + 1)
      0006CC AC*1E            [24] 2818 	mov	r4,_bearing
      0006CE AD*1F            [24] 2819 	mov	r5,(_bearing + 1)
      0006D0 EE               [12] 2820 	mov	a,r6
      0006D1 C3               [12] 2821 	clr	c
      0006D2 9C               [12] 2822 	subb	a,r4
      0006D3 F5*26            [12] 2823 	mov	_ErrorCorrection_error_1_137,a
      0006D5 EF               [12] 2824 	mov	a,r7
      0006D6 9D               [12] 2825 	subb	a,r5
      0006D7 F5*27            [12] 2826 	mov	(_ErrorCorrection_error_1_137 + 1),a
                           0006D9  2827 	C$Lab3_3_SteeringAndCompass.c$217$1$137 ==.
                                   2828 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:217: if (error > 1800)
      0006D9 C3               [12] 2829 	clr	c
      0006DA 74 08            [12] 2830 	mov	a,#0x08
      0006DC 95*26            [12] 2831 	subb	a,_ErrorCorrection_error_1_137
      0006DE 74 87            [12] 2832 	mov	a,#(0x07 ^ 0x80)
      0006E0 85*27 F0         [24] 2833 	mov	b,(_ErrorCorrection_error_1_137 + 1)
      0006E3 63 F0 80         [24] 2834 	xrl	b,#0x80
      0006E6 95 F0            [12] 2835 	subb	a,b
      0006E8 50 0F            [24] 2836 	jnc	00104$
                           0006EA  2837 	C$Lab3_3_SteeringAndCompass.c$219$2$138 ==.
                                   2838 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:219: error = 3600 - error; 
      0006EA 74 10            [12] 2839 	mov	a,#0x10
      0006EC C3               [12] 2840 	clr	c
      0006ED 95*26            [12] 2841 	subb	a,_ErrorCorrection_error_1_137
      0006EF F5*26            [12] 2842 	mov	_ErrorCorrection_error_1_137,a
      0006F1 74 0E            [12] 2843 	mov	a,#0x0e
      0006F3 95*27            [12] 2844 	subb	a,(_ErrorCorrection_error_1_137 + 1)
      0006F5 F5*27            [12] 2845 	mov	(_ErrorCorrection_error_1_137 + 1),a
      0006F7 80 19            [24] 2846 	sjmp	00105$
      0006F9                       2847 00104$:
                           0006F9  2848 	C$Lab3_3_SteeringAndCompass.c$221$1$137 ==.
                                   2849 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:221: else if (error < -1800)
      0006F9 C3               [12] 2850 	clr	c
      0006FA E5*26            [12] 2851 	mov	a,_ErrorCorrection_error_1_137
      0006FC 94 F8            [12] 2852 	subb	a,#0xf8
      0006FE E5*27            [12] 2853 	mov	a,(_ErrorCorrection_error_1_137 + 1)
      000700 64 80            [12] 2854 	xrl	a,#0x80
      000702 94 78            [12] 2855 	subb	a,#0x78
      000704 50 0C            [24] 2856 	jnc	00105$
                           000706  2857 	C$Lab3_3_SteeringAndCompass.c$223$2$139 ==.
                                   2858 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:223: error = 3600 + error; 
      000706 74 10            [12] 2859 	mov	a,#0x10
      000708 25*26            [12] 2860 	add	a,_ErrorCorrection_error_1_137
      00070A F5*26            [12] 2861 	mov	_ErrorCorrection_error_1_137,a
      00070C 74 0E            [12] 2862 	mov	a,#0x0e
      00070E 35*27            [12] 2863 	addc	a,(_ErrorCorrection_error_1_137 + 1)
      000710 F5*27            [12] 2864 	mov	(_ErrorCorrection_error_1_137 + 1),a
      000712                       2865 00105$:
                           000712  2866 	C$Lab3_3_SteeringAndCompass.c$232$1$137 ==.
                                   2867 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:232: if (((heading >= 2700) && (heading <= 3600)) && ((bearing >=0) && (bearing <= 900))) // If the values are in the range in which the algorith fails
      000712 C3               [12] 2868 	clr	c
      000713 E5*22            [12] 2869 	mov	a,_heading
      000715 94 8C            [12] 2870 	subb	a,#0x8c
      000717 E5*23            [12] 2871 	mov	a,(_heading + 1)
      000719 94 0A            [12] 2872 	subb	a,#0x0a
      00071B 40 1E            [24] 2873 	jc	00107$
      00071D 74 10            [12] 2874 	mov	a,#0x10
      00071F 95*22            [12] 2875 	subb	a,_heading
      000721 74 0E            [12] 2876 	mov	a,#0x0e
      000723 95*23            [12] 2877 	subb	a,(_heading + 1)
      000725 40 14            [24] 2878 	jc	00107$
      000727 74 84            [12] 2879 	mov	a,#0x84
      000729 95*1E            [12] 2880 	subb	a,_bearing
      00072B 74 03            [12] 2881 	mov	a,#0x03
      00072D 95*1F            [12] 2882 	subb	a,(_bearing + 1)
                           00072F  2883 	C$Lab3_3_SteeringAndCompass.c$234$2$140 ==.
                                   2884 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:234: error = error * -1; // Change the direction the car steers
      00072F 40 0A            [24] 2885 	jc	00107$
      000731 E4               [12] 2886 	clr	a
      000732 95*26            [12] 2887 	subb	a,_ErrorCorrection_error_1_137
      000734 F5*26            [12] 2888 	mov	_ErrorCorrection_error_1_137,a
      000736 E4               [12] 2889 	clr	a
      000737 95*27            [12] 2890 	subb	a,(_ErrorCorrection_error_1_137 + 1)
      000739 F5*27            [12] 2891 	mov	(_ErrorCorrection_error_1_137 + 1),a
      00073B                       2892 00107$:
                           00073B  2893 	C$Lab3_3_SteeringAndCompass.c$237$1$137 ==.
                                   2894 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:237: tmp_pw = (unsigned int)(K_VAL * (float)error + (float)PW_CENTER); // Calculate the new pulse width
      00073B 85*26 82         [24] 2895 	mov	dpl,_ErrorCorrection_error_1_137
      00073E 85*27 83         [24] 2896 	mov	dph,(_ErrorCorrection_error_1_137 + 1)
      000741 12r00r00         [24] 2897 	lcall	___sint2fs
      000744 AA 82            [24] 2898 	mov	r2,dpl
      000746 AB 83            [24] 2899 	mov	r3,dph
      000748 AC F0            [24] 2900 	mov	r4,b
      00074A FD               [12] 2901 	mov	r5,a
      00074B C0 02            [24] 2902 	push	ar2
      00074D C0 03            [24] 2903 	push	ar3
      00074F C0 04            [24] 2904 	push	ar4
      000751 C0 05            [24] 2905 	push	ar5
      000753 90 7A E1         [24] 2906 	mov	dptr,#0x7ae1
      000756 75 F0 54         [24] 2907 	mov	b,#0x54
      000759 74 3F            [12] 2908 	mov	a,#0x3f
      00075B 12r00r00         [24] 2909 	lcall	___fsmul
      00075E AA 82            [24] 2910 	mov	r2,dpl
      000760 AB 83            [24] 2911 	mov	r3,dph
      000762 AC F0            [24] 2912 	mov	r4,b
      000764 FD               [12] 2913 	mov	r5,a
      000765 E5 81            [12] 2914 	mov	a,sp
      000767 24 FC            [12] 2915 	add	a,#0xfc
      000769 F5 81            [12] 2916 	mov	sp,a
      00076B 85*14 82         [24] 2917 	mov	dpl,_PW_CENTER
      00076E 85*15 83         [24] 2918 	mov	dph,(_PW_CENTER + 1)
      000771 C0 05            [24] 2919 	push	ar5
      000773 C0 04            [24] 2920 	push	ar4
      000775 C0 03            [24] 2921 	push	ar3
      000777 C0 02            [24] 2922 	push	ar2
      000779 12r00r00         [24] 2923 	lcall	___uint2fs
      00077C A8 82            [24] 2924 	mov	r0,dpl
      00077E A9 83            [24] 2925 	mov	r1,dph
      000780 AE F0            [24] 2926 	mov	r6,b
      000782 FF               [12] 2927 	mov	r7,a
      000783 D0 02            [24] 2928 	pop	ar2
      000785 D0 03            [24] 2929 	pop	ar3
      000787 D0 04            [24] 2930 	pop	ar4
      000789 D0 05            [24] 2931 	pop	ar5
      00078B C0 00            [24] 2932 	push	ar0
      00078D C0 01            [24] 2933 	push	ar1
      00078F C0 06            [24] 2934 	push	ar6
      000791 C0 07            [24] 2935 	push	ar7
      000793 8A 82            [24] 2936 	mov	dpl,r2
      000795 8B 83            [24] 2937 	mov	dph,r3
      000797 8C F0            [24] 2938 	mov	b,r4
      000799 ED               [12] 2939 	mov	a,r5
      00079A 12r00r00         [24] 2940 	lcall	___fsadd
      00079D AC 82            [24] 2941 	mov	r4,dpl
      00079F AD 83            [24] 2942 	mov	r5,dph
      0007A1 AE F0            [24] 2943 	mov	r6,b
      0007A3 FF               [12] 2944 	mov	r7,a
      0007A4 E5 81            [12] 2945 	mov	a,sp
      0007A6 24 FC            [12] 2946 	add	a,#0xfc
      0007A8 F5 81            [12] 2947 	mov	sp,a
      0007AA 8C 82            [24] 2948 	mov	dpl,r4
      0007AC 8D 83            [24] 2949 	mov	dph,r5
      0007AE 8E F0            [24] 2950 	mov	b,r6
      0007B0 EF               [12] 2951 	mov	a,r7
      0007B1 12r00r00         [24] 2952 	lcall	___fs2uint
      0007B4 AE 82            [24] 2953 	mov	r6,dpl
      0007B6 AF 83            [24] 2954 	mov	r7,dph
                           0007B8  2955 	C$Lab3_3_SteeringAndCompass.c$239$1$137 ==.
                                   2956 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:239: if(tmp_pw > PW_LEFT) // If it is below minimum
      0007B8 C3               [12] 2957 	clr	c
      0007B9 E5*18            [12] 2958 	mov	a,_PW_LEFT
      0007BB 9E               [12] 2959 	subb	a,r6
      0007BC E5*19            [12] 2960 	mov	a,(_PW_LEFT + 1)
      0007BE 9F               [12] 2961 	subb	a,r7
      0007BF 50 06            [24] 2962 	jnc	00114$
                           0007C1  2963 	C$Lab3_3_SteeringAndCompass.c$240$1$137 ==.
                                   2964 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:240: tmp_pw = PW_LEFT; // Set it to minimum
      0007C1 AE*18            [24] 2965 	mov	r6,_PW_LEFT
      0007C3 AF*19            [24] 2966 	mov	r7,(_PW_LEFT + 1)
      0007C5 80 0D            [24] 2967 	sjmp	00115$
      0007C7                       2968 00114$:
                           0007C7  2969 	C$Lab3_3_SteeringAndCompass.c$242$1$137 ==.
                                   2970 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:242: else if (tmp_pw < PW_RIGHT) // If it above maximum
      0007C7 C3               [12] 2971 	clr	c
      0007C8 EE               [12] 2972 	mov	a,r6
      0007C9 95*16            [12] 2973 	subb	a,_PW_RIGHT
      0007CB EF               [12] 2974 	mov	a,r7
      0007CC 95*17            [12] 2975 	subb	a,(_PW_RIGHT + 1)
      0007CE 50 04            [24] 2976 	jnc	00115$
                           0007D0  2977 	C$Lab3_3_SteeringAndCompass.c$243$1$137 ==.
                                   2978 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:243: tmp_pw = PW_RIGHT; // Set it to maximum
      0007D0 AE*16            [24] 2979 	mov	r6,_PW_RIGHT
      0007D2 AF*17            [24] 2980 	mov	r7,(_PW_RIGHT + 1)
      0007D4                       2981 00115$:
                           0007D4  2982 	C$Lab3_3_SteeringAndCompass.c$245$1$137 ==.
                                   2983 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:245: if(other % 40 == 0) // Print every other 4 outputs
      0007D4 75*00 28         [24] 2984 	mov	__moduint_PARM_2,#0x28
      0007D7 75*01 00         [24] 2985 	mov	(__moduint_PARM_2 + 1),#0x00
      0007DA 85*20 82         [24] 2986 	mov	dpl,_other
      0007DD 85*21 83         [24] 2987 	mov	dph,(_other + 1)
      0007E0 C0 07            [24] 2988 	push	ar7
      0007E2 C0 06            [24] 2989 	push	ar6
      0007E4 12r00r00         [24] 2990 	lcall	__moduint
      0007E7 E5 82            [12] 2991 	mov	a,dpl
      0007E9 85 83 F0         [24] 2992 	mov	b,dph
      0007EC D0 06            [24] 2993 	pop	ar6
      0007EE D0 07            [24] 2994 	pop	ar7
      0007F0 45 F0            [12] 2995 	orl	a,b
      0007F2 70 21            [24] 2996 	jnz	00117$
                           0007F4  2997 	C$Lab3_3_SteeringAndCompass.c$247$2$141 ==.
                                   2998 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:247: printf("\r\nerror: %d",error);
      0007F4 C0 07            [24] 2999 	push	ar7
      0007F6 C0 06            [24] 3000 	push	ar6
      0007F8 C0*26            [24] 3001 	push	_ErrorCorrection_error_1_137
      0007FA C0*27            [24] 3002 	push	(_ErrorCorrection_error_1_137 + 1)
      0007FC 74rA5            [12] 3003 	mov	a,#___str_8
      0007FE C0 E0            [24] 3004 	push	acc
      000800 74s00            [12] 3005 	mov	a,#(___str_8 >> 8)
      000802 C0 E0            [24] 3006 	push	acc
      000804 74 80            [12] 3007 	mov	a,#0x80
      000806 C0 E0            [24] 3008 	push	acc
      000808 12r00r00         [24] 3009 	lcall	_printf
      00080B E5 81            [12] 3010 	mov	a,sp
      00080D 24 FB            [12] 3011 	add	a,#0xfb
      00080F F5 81            [12] 3012 	mov	sp,a
      000811 D0 06            [24] 3013 	pop	ar6
      000813 D0 07            [24] 3014 	pop	ar7
      000815                       3015 00117$:
                           000815  3016 	C$Lab3_3_SteeringAndCompass.c$251$1$137 ==.
                                   3017 ;	C:\Users\Ethan\Documents\RPI Classes\Fall 2018\Embeded Control\Assignments\Lab 3\Lab3-3\Lab3-3_SteeringAndCompass.c:251: return tmp_pw;
      000815 8E 82            [24] 3018 	mov	dpl,r6
      000817 8F 83            [24] 3019 	mov	dph,r7
                           000819  3020 	C$Lab3_3_SteeringAndCompass.c$252$1$137 ==.
                           000819  3021 	XG$ErrorCorrection$0$0 ==.
      000819 22               [24] 3022 	ret
                                   3023 	.area CSEG    (CODE)
                                   3024 	.area CONST   (CODE)
                           000000  3025 FLab3_3_SteeringAndCompass$__str_0$0$0 == .
      000000                       3026 ___str_0:
      000000 0A                    3027 	.db 0x0a
      000001 54 79 70 65 20 64 69  3028 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3029 	.db 0x00
                           000016  3030 FLab3_3_SteeringAndCompass$__str_1$0$0 == .
      000016                       3031 ___str_1:
      000016 20 20 20 20 20 25 63  3032 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3033 	.db 0x00
                           000026  3034 FLab3_3_SteeringAndCompass$__str_2$0$0 == .
      000026                       3035 ___str_2:
      000026 25 63                 3036 	.ascii "%c"
      000028 00                    3037 	.db 0x00
                           000029  3038 FLab3_3_SteeringAndCompass$__str_3$0$0 == .
      000029                       3039 ___str_3:
      000029 45 6D 62 65 64 64 65  3040 	.ascii "Embedded Control Steering + Compass"
             64 20 43 6F 6E 74 72
             6F 6C 20 53 74 65 65
             72 69 6E 67 20 2B 20
             43 6F 6D 70 61 73 73
      00004C 0D                    3041 	.db 0x0d
      00004D 0A                    3042 	.db 0x0a
      00004E 00                    3043 	.db 0x00
                           00004F  3044 FLab3_3_SteeringAndCompass$__str_4$0$0 == .
      00004F                       3045 ___str_4:
      00004F 0D                    3046 	.db 0x0d
      000050 0A                    3047 	.db 0x0a
      000051 41 63 74 75 61 6C 20  3048 	.ascii "Actual heading = %u"
             68 65 61 64 69 6E 67
             20 3D 20 25 75
      000064 00                    3049 	.db 0x00
                           000065  3050 FLab3_3_SteeringAndCompass$__str_5$0$0 == .
      000065                       3051 ___str_5:
      000065 0D                    3052 	.db 0x0d
      000066 0A                    3053 	.db 0x0a
      000067 44 65 73 69 72 65 64  3054 	.ascii "Desired heading = %u"
             20 68 65 61 64 69 6E
             67 20 3D 20 25 75
      00007B 00                    3055 	.db 0x00
                           00007C  3056 FLab3_3_SteeringAndCompass$__str_6$0$0 == .
      00007C                       3057 ___str_6:
      00007C 0D                    3058 	.db 0x0d
      00007D 0A                    3059 	.db 0x0a
      00007E 53 65 72 76 6F 20 50  3060 	.ascii "Servo Pulse width = %u"
             75 6C 73 65 20 77 69
             64 74 68 20 3D 20 25
             75
      000094 00                    3061 	.db 0x00
                           000095  3062 FLab3_3_SteeringAndCompass$__str_7$0$0 == .
      000095                       3063 ___str_7:
      000095 0D                    3064 	.db 0x0d
      000096 0A                    3065 	.db 0x0a
      000097 53 45 52 56 4F 5F 50  3066 	.ascii "SERVO_PW: %u"
             57 3A 20 25 75
      0000A3 0A                    3067 	.db 0x0a
      0000A4 00                    3068 	.db 0x00
                           0000A5  3069 FLab3_3_SteeringAndCompass$__str_8$0$0 == .
      0000A5                       3070 ___str_8:
      0000A5 0D                    3071 	.db 0x0d
      0000A6 0A                    3072 	.db 0x0a
      0000A7 65 72 72 6F 72 3A 20  3073 	.ascii "error: %d"
             25 64
      0000B0 00                    3074 	.db 0x00
                                   3075 	.area XINIT   (CODE)
                                   3076 	.area CABS    (ABS,CODE)
